package com.android.server.am;

import android.app.ActivityClient;
import android.app.ActivityManager;
import android.app.ActivityManagerInternal;
import android.app.ActivityTaskManager;
import android.app.ActivityThread;
import android.app.AnrController;
import android.app.AppGlobals;
import android.app.AppOpsManager;
import android.app.AppOpsManagerInternal;
import android.app.ApplicationErrorReport;
import android.app.ApplicationExitInfo;
import android.app.BroadcastOptions;
import android.app.ContentProviderHolder;
import android.app.ContextImpl;
import android.app.IActivityController;
import android.app.IActivityManager;
import android.app.IApplicationThread;
import android.app.IForegroundServiceObserver;
import android.app.IInstrumentationWatcher;
import android.app.INotificationManager;
import android.app.IProcessObserver;
import android.app.IServiceConnection;
import android.app.IStopUserCallback;
import android.app.ITaskStackListener;
import android.app.IUiAutomationConnection;
import android.app.IUidObserver;
import android.app.IUserSwitchObserver;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.PendingIntentStats;
import android.app.ProcessMemoryState;
import android.app.ProfilerInfo;
import android.app.SyncNotedAppOp;
import android.app.WaitResult;
import android.app.backup.IBackupManager;
import android.app.compat.CompatChanges;
import android.app.usage.UsageStatsManagerInternal;
import android.appwidget.AppWidgetManagerInternal;
import android.content.AttributionSource;
import android.content.AutofillOptions;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.ContentCaptureOptions;
import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.Context;
import android.content.IIntentReceiver;
import android.content.IIntentSender;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.LocusId;
import android.content.ServiceConnection;
import android.content.pm.ActivityInfo;
import android.content.pm.ActivityPresentationInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.IPackageDataObserver;
import android.content.pm.IPackageManager;
import android.content.pm.IncrementalStatesInfo;
import android.content.pm.InstrumentationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManagerInternal;
import android.content.pm.ParceledListSlice;
import android.content.pm.PermissionInfo;
import android.content.pm.ProcessInfo;
import android.content.pm.ProviderInfo;
import android.content.pm.ProviderInfoList;
import android.content.pm.ResolveInfo;
import android.content.pm.TestUtilityService;
import android.content.pm.UserInfo;
import android.content.res.CompatibilityInfo;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.database.ContentObserver;
import android.graphics.Rect;
import android.hardware.audio.common.V2_0.AudioDevice;
import android.hardware.audio.common.V2_0.AudioFormat;
import android.hardware.camera2.CameraManager;
import android.hardware.display.DisplayManagerInternal;
import android.hardware.usb.gadget.V1_2.GadgetFunction;
import android.media.AudioManager;
import android.net.INetd;
import android.net.Uri;
import android.os.AppZygote;
import android.os.Binder;
import android.os.BinderProxy;
import android.os.Build;
import android.os.Bundle;
import android.os.Debug;
import android.os.DropBoxManager;
import android.os.FactoryTest;
import android.os.FileUtils;
import android.os.Handler;
import android.os.IBinder;
import android.os.ICancellationSignal;
import android.os.IDeviceIdentifiersPolicyService;
import android.os.IPermissionController;
import android.os.IProcessInfoService;
import android.os.IProgressListener;
import android.os.InputConstants;
import android.os.Looper;
import android.os.Message;
import android.os.Parcel;
import android.os.ParcelFileDescriptor;
import android.os.PowerExemptionManager;
import android.os.PowerManager;
import android.os.PowerManagerInternal;
import android.os.PowerSaveState;
import android.os.Process;
import android.os.RemoteCallback;
import android.os.RemoteException;
import android.os.ResultReceiver;
import android.os.ServiceManager;
import android.os.SharedMemory;
import android.os.ShellCallback;
import android.os.StrictMode;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.os.Trace;
import android.os.TransactionTooLargeException;
import android.os.UserHandle;
import android.os.UserManager;
import android.os.WorkSource;
import android.os.incremental.IIncrementalService;
import android.os.incremental.IncrementalManager;
import android.os.incremental.IncrementalMetrics;
import android.os.storage.IStorageManager;
import android.os.storage.StorageManager;
import android.provider.DeviceConfig;
import android.provider.Settings;
import android.sysprop.InitProperties;
import android.sysprop.VoldProperties;
import android.text.TextUtils;
import android.util.ArrayMap;
import android.util.ArraySet;
import android.util.EventLog;
import android.util.FeatureFlagUtils;
import android.util.IntArray;
import android.util.Log;
import android.util.Pair;
import android.util.PrintWriterPrinter;
import android.util.Slog;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.util.TimeUtils;
import android.util.proto.ProtoOutputStream;
import android.util.proto.ProtoUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.autofill.AutofillManagerInternal;
import com.android.internal.app.IAppOpsActiveCallback;
import com.android.internal.app.IAppOpsCallback;
import com.android.internal.app.IAppOpsService;
import com.android.internal.app.ProcessMap;
import com.android.internal.app.procstats.ProcessState;
import com.android.internal.app.procstats.ProcessStats;
import com.android.internal.content.InstallLocationUtils;
import com.android.internal.notification.SystemNotificationChannels;
import com.android.internal.os.BackgroundThread;
import com.android.internal.os.BatteryStatsImpl;
import com.android.internal.os.BinderCallHeavyHitterWatcher;
import com.android.internal.os.BinderInternal;
import com.android.internal.os.BinderTransactionNameResolver;
import com.android.internal.os.ByteTransferPipe;
import com.android.internal.os.IResultReceiver;
import com.android.internal.os.ProcessCpuTracker;
import com.android.internal.os.SomeArgs;
import com.android.internal.os.TransferPipe;
import com.android.internal.os.Zygote;
import com.android.internal.policy.AttributeCache;
import com.android.internal.protolog.ProtoLogGroup;
import com.android.internal.protolog.ProtoLogImpl;
import com.android.internal.util.ArrayUtils;
import com.android.internal.util.DumpUtils;
import com.android.internal.util.FastPrintWriter;
import com.android.internal.util.FrameworkStatsLog;
import com.android.internal.util.MemInfoReader;
import com.android.internal.util.Preconditions;
import com.android.internal.util.function.HeptFunction;
import com.android.internal.util.function.HexFunction;
import com.android.internal.util.function.QuadFunction;
import com.android.internal.util.function.QuintFunction;
import com.android.internal.util.function.UndecFunction;
import com.android.server.AlarmManagerInternal;
import com.android.server.BootReceiver;
import com.android.server.DeviceIdleInternal;
import com.android.server.DisplayThread;
import com.android.server.IntentResolver;
import com.android.server.IoThread;
import com.android.server.LocalManagerRegistry;
import com.android.server.LocalServices;
import com.android.server.LockGuard;
import com.android.server.NVUtils;
import com.android.server.NetworkManagementInternal;
import com.android.server.PackageWatchdog;
import com.android.server.ServiceThread;
import com.android.server.SystemConfig;
import com.android.server.SystemService;
import com.android.server.SystemServiceManager;
import com.android.server.ThreadPriorityBooster;
import com.android.server.UiModeManagerService;
import com.android.server.UiThread;
import com.android.server.UserspaceRebootLogger;
import com.android.server.Watchdog;
import com.android.server.am.ActiveServices;
import com.android.server.am.ActivityManagerService;
import com.android.server.am.AppNotRespondingDialog;
import com.android.server.am.ComponentAliasResolver;
import com.android.server.am.DropboxRateLimiter;
import com.android.server.am.ProcessList;
import com.android.server.appop.AppOpsService;
import com.android.server.compat.PlatformCompat;
import com.android.server.contentcapture.ContentCaptureManagerInternal;
import com.android.server.criticalevents.CriticalEventLog;
import com.android.server.firewall.IntentFirewall;
import com.android.server.graphics.fonts.FontManagerInternal;
import com.android.server.job.JobSchedulerInternal;
import com.android.server.job.controllers.JobStatus;
import com.android.server.location.gnss.hal.GnssNative;
import com.android.server.net.NetworkPolicyManagerInternal;
import com.android.server.os.NativeTombstoneManager;
import com.android.server.pm.Computer;
import com.android.server.pm.Installer;
import com.android.server.pm.PackageManagerService;
import com.android.server.pm.UserManagerInternal;
import com.android.server.pm.parsing.pkg.AndroidPackage;
import com.android.server.pm.permission.PermissionManagerServiceInternal;
import com.android.server.pm.pkg.SELinuxUtil;
import com.android.server.pm.pkg.parsing.ParsingPackageUtils;
import com.android.server.pm.snapshot.PackageDataSnapshot;
import com.android.server.policy.PhoneWindowManager;
import com.android.server.sdksandbox.SdkSandboxManagerLocal;
import com.android.server.slice.SliceClientPermissions;
import com.android.server.timezonedetector.ServiceConfigAccessor;
import com.android.server.uri.GrantUri;
import com.android.server.uri.NeededUriGrants;
import com.android.server.uri.UriGrantsManagerInternal;
import com.android.server.usb.descriptors.UsbTerminalTypes;
import com.android.server.utils.PriorityDump;
import com.android.server.utils.TimingsTraceAndSlog;
import com.android.server.voiceinteraction.DatabaseHelper;
import com.android.server.vr.VrManagerInternal;
import com.android.server.wm.ActivityMetricsLaunchObserver;
import com.android.server.wm.ActivityServiceConnectionsHolder;
import com.android.server.wm.ActivityTaskManagerDebugConfig;
import com.android.server.wm.ActivityTaskManagerInternal;
import com.android.server.wm.ActivityTaskManagerService;
import com.android.server.wm.ProtoLogCache;
import com.android.server.wm.WindowManagerInternal;
import com.android.server.wm.WindowManagerService;
import com.android.server.wm.WindowProcessController;
import com.mediatek.cta.CtaManagerFactory;
import com.mediatek.server.MtkSystemServer;
import com.mediatek.server.MtkSystemServiceFactory;
import com.mediatek.server.am.AmsExt;
import com.mediatek.server.anr.AnrManager;
import com.transsion.griffin.Griffin;
import com.transsion.hubcore.cpubooster.ITranAnimationBoost;
import com.transsion.hubcore.griffin.ITranGriffinFeature;
import com.transsion.hubcore.griffin.lib.provider.TranStateListener;
import com.transsion.hubcore.server.am.ITranActivityManagerService;
import com.transsion.hubcore.server.am.ITranOomAdjuster;
import com.transsion.hubcore.server.inputmethod.ITranInputMethodManagerService;
import com.transsion.hubcore.server.power.ITranPowerManagerService;
import com.transsion.hubcore.sru.ITranSruManager;
import com.transsion.server.TranSystemServiceFactory;
import com.transsion.server.am.TranAmsExt;
import com.transsion.server.trangbmonitor.TranGraphicBufferMonitor;
import dalvik.annotation.optimization.NeverCompile;
import dalvik.system.VMRuntime;
import defpackage.CompanionAppsPermissions;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.Executor;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.ToLongFunction;
import libcore.util.EmptyArray;
/* loaded from: classes.dex */
public class ActivityManagerService extends IActivityManager.Stub implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback, ActivityManagerGlobalLock {
    static final int ABORT_DUMPHEAP_MSG = 51;
    public static final String ACTION_TRIGGER_IDLE = "com.android.server.ACTION_TRIGGER_IDLE";
    private static final String AEEV_DEBUG = "vendor.debug.mtk.aeev.db";
    private static final String AEEV_OLD_ERROR_PROP = "persist.sys.aeev.exception";
    private static final String AEE_DEBUG = "vendor.debug.mtk.aee.db";
    private static final String AEE_OLD_ERROR_PROP = "persist.sys.aee.exception";
    static final String ANR_FILE_PREFIX = "anr_";
    public static final String ANR_TRACE_DIR = "/data/anr";
    static final int BINDER_HEAVYHITTER_AUTOSAMPLER_TIMEOUT_MSG = 72;
    private static final long BINDER_HEAVY_HITTER_AUTO_SAMPLER_DURATION_MS = 300000;
    private static final long BINDER_HEAVY_HITTER_AUTO_SAMPLER_THROTTLE_MS = 3600000;
    private static final int BINDER_PROXY_HIGH_WATERMARK = 6000;
    private static final int BINDER_PROXY_LOW_WATERMARK = 5500;
    static final int CHECK_EXCESSIVE_POWER_USE_MSG = 27;
    static final int CLEAR_DNS_CACHE_MSG = 28;
    static final int CONTENT_PROVIDER_PUBLISH_TIMEOUT_MSG = 57;
    static final int DISPATCH_BINDING_SERVICE_EVENT = 75;
    static final int DISPATCH_OOM_ADJ_OBSERVER_MSG = 70;
    static final int DISPATCH_PROCESSES_CHANGED_UI_MSG = 31;
    static final int DISPATCH_PROCESS_DIED_UI_MSG = 32;
    static final int DISPATCH_SENDING_BROADCAST_EVENT = 74;
    static final int DROPBOX_DEFAULT_MAX_SIZE = 196608;
    static final long[] DUMP_MEM_BUCKETS;
    static final int[] DUMP_MEM_OOM_ADJ;
    static final String[] DUMP_MEM_OOM_COMPACT_LABEL;
    static final String[] DUMP_MEM_OOM_LABEL;
    private static final long DYNAMIC_RECEIVER_EXPLICIT_EXPORT_REQUIRED = 161145287;
    private static final boolean ENABLE_PROC_LOCK = true;
    static final String EXTRA_BUGREPORT_NONCE = "android.intent.extra.BUGREPORT_NONCE";
    static final String EXTRA_BUGREPORT_TYPE = "android.intent.extra.BUGREPORT_TYPE";
    static final String EXTRA_DESCRIPTION = "android.intent.extra.DESCRIPTION";
    static final String EXTRA_TITLE = "android.intent.extra.TITLE";
    static final FgsTempAllowListItem FAKE_TEMP_ALLOW_LIST_ITEM;
    static final int FIRST_BROADCAST_QUEUE_MSG = 200;
    static final int GC_BACKGROUND_PROCESSES_MSG = 5;
    static final int HANDLE_TRUST_STORAGE_UPDATE_MSG = 63;
    static final int IDLE_UIDS_MSG = 58;
    private static final int INDEX_DALVIK_PSS = 3;
    private static final int INDEX_DALVIK_RSS = 5;
    private static final int INDEX_DALVIK_SWAP_PSS = 4;
    private static final int INDEX_LAST = 15;
    private static final int INDEX_NATIVE_PSS = 0;
    private static final int INDEX_NATIVE_RSS = 2;
    private static final int INDEX_NATIVE_SWAP_PSS = 1;
    private static final int INDEX_OTHER_PSS = 6;
    private static final int INDEX_OTHER_RSS = 8;
    private static final int INDEX_OTHER_SWAP_PSS = 7;
    private static final int INDEX_TOTAL_MEMTRACK_GL = 14;
    private static final int INDEX_TOTAL_MEMTRACK_GRAPHICS = 13;
    private static final int INDEX_TOTAL_NATIVE_PSS = 12;
    private static final int INDEX_TOTAL_PSS = 9;
    private static final int INDEX_TOTAL_RSS = 11;
    private static final int INDEX_TOTAL_SWAP_PSS = 10;
    private static final String INTENT_BUGREPORT_REQUESTED = "com.android.internal.intent.action.BUGREPORT_REQUESTED";
    private static final String INTENT_REMOTE_BUGREPORT_FINISHED = "com.android.internal.intent.action.REMOTE_BUGREPORT_FINISHED";
    private static final int JAVA_DUMP_MINIMUM_SIZE = 100;
    static final int KILL_APPLICATION_MSG = 22;
    static final int KILL_APP_ZYGOTE_DELAY_MS = 5000;
    static final int KILL_APP_ZYGOTE_MSG = 71;
    static final int KSM_SHARED = 0;
    static final int KSM_SHARING = 1;
    static final int KSM_UNSHARED = 2;
    static final int KSM_VOLATILE = 3;
    private static final int MAX_BUGREPORT_DESCRIPTION_SIZE = 150;
    private static final int MAX_BUGREPORT_TITLE_SIZE = 100;
    private static final int MAX_DUP_SUPPRESSED_STACKS = 5000;
    private static final int MAX_RECEIVERS_ALLOWED_PER_APP = 1000;
    static final int MAX_STATE_DATA_SIZE = 128;
    private static final int MEMINFO_COMPACT_VERSION = 1;
    private static final int MINIMUM_MEMORY_GROWTH_THRESHOLD = 10000;
    private static final long NETWORK_ACCESS_TIMEOUT_DEFAULT_MS = 200;
    static final int NOTIFY_CLEARTEXT_NETWORK_MSG = 49;
    static final int PERSISTENT_MASK = 9;
    static final int POST_DUMP_HEAP_NOTIFICATION_MSG = 50;
    static final int PROC_START_TIMEOUT_MSG = 20;
    static final int PROC_START_TIMEOUT_WITH_WRAPPER = 1200000;
    static final int PUSH_TEMP_ALLOWLIST_UI_MSG = 68;
    static final int REPORT_MEM_USAGE_MSG = 33;
    static final int RESERVED_BYTES_PER_LOGCAT_LINE = 100;
    static final int SERVICE_FOREGROUND_CRASH_MSG = 69;
    static final int SERVICE_FOREGROUND_TIMEOUT_ANR_MSG = 67;
    static final int SERVICE_FOREGROUND_TIMEOUT_MSG = 66;
    static final int SERVICE_TIMEOUT_MSG = 12;
    private static final String SHELL_APP_PACKAGE = "com.android.shell";
    static final int SHOW_ERROR_UI_MSG = 1;
    static final int SHOW_NOT_RESPONDING_UI_MSG = 2;
    static final int SHOW_STRICT_MODE_VIOLATION_UI_MSG = 26;
    static final int SHUTDOWN_UI_AUTOMATION_CONNECTION_MSG = 56;
    public static final int STOCK_PM_FLAGS = 1024;
    private static final String SYSTEM_PROPERTY_DEVICE_PROVISIONED = "persist.sys.device_provisioned";
    static final String SYSTEM_USER_HOME_NEEDED = "ro.system_user_home_needed";
    static final String TAG_MU = "ActivityManager_MU";
    static final String TAG_NETWORK = "ActivityManager_Network";
    static final boolean TRACK_PROCSTATS_ASSOCIATIONS = true;
    private static final String TRAN_BAT_TEMP = "/sys/devices/platform/tran_battery/tran_bat_temp";
    private static final boolean TRAN_DISABLE_UNLOCK_ANIM_SUPPORT;
    private static final boolean TRAN_GT_SUPPORT;
    private static final int TRAN_RM_FORBIDPSS_CLOUD_ITEM = 15;
    private static final int TRAN_VSYNC_CLOUD_ITEM = 13;
    static final int UPDATE_HTTP_PROXY_MSG = 29;
    static final int UPDATE_TIME_PREFERENCE_MSG = 41;
    static final int UPDATE_TIME_ZONE = 13;
    static final int WAIT_FOR_CONTENT_PROVIDER_TIMEOUT_MSG = 73;
    static final int WAIT_FOR_DEBUGGER_UI_MSG = 6;
    private static Context mWarnContext;
    static final SparseArray<ProcessInfo> sActiveProcessInfoSelfLocked;
    private static SimpleDateFormat sAnrFileDateFormat;
    public static MtkSystemServer sMtkSystemServerIns;
    static final HostingRecord sNullHostingRecord;
    private static ThreadPriorityBooster sProcThreadPriorityBooster;
    private static String sTheRealBuildSerial;
    private static ThreadPriorityBooster sThreadPriorityBooster;
    private static final String[] skipCameraInternalList;
    public final long ANR_DUMP_HEAP_TIME;
    final IntArray mActiveCameraUids;
    final ArrayList<ActiveInstrumentation> mActiveInstrumentation;
    private final ActivityMetricsLaunchObserver mActivityLaunchObserver;
    public ActivityTaskManagerService mActivityTaskManager;
    private ArrayMap<String, PackageAssociationInfo> mAllowedAssociations;
    private final HashSet<Integer> mAlreadyLoggedViolatedStacks;
    boolean mAlwaysFinishActivities;
    public AmsExt mAmsExt;
    final AnrHelper mAnrHelper;
    public AnrManager mAnrManager;
    ArrayMap<String, IBinder> mAppBindArgs;
    final AppErrors mAppErrors;
    private AppOpsManager mAppOpsManager;
    final AppOpsService mAppOpsService;
    public final AppProfiler mAppProfiler;
    final AppRestrictionController mAppRestrictionController;
    final SparseArray<ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>>> mAssociations;
    public ActivityTaskManagerInternal mAtmInternal;
    private final CameraManager.AvailabilityCallback mAvailabilityCallback;
    private int[] mBackgroundAppIdAllowlist;
    private ArraySet<String> mBackgroundLaunchBroadcasts;
    final SparseArray<BackupRecord> mBackupTargets;
    public final BatteryStatsService mBatteryStatsService;
    final BroadcastQueue mBgBroadcastQueue;
    final BroadcastQueue mBgOffloadBroadcastQueue;
    final CopyOnWriteArrayList<ActivityManagerInternal.BindServiceEventListener> mBindServiceEventListeners;
    private volatile boolean mBinderTransactionTrackingEnabled;
    boolean mBootAnimationComplete;
    int mBootPhase;
    volatile boolean mBooted;
    volatile boolean mBooting;
    final CopyOnWriteArrayList<ActivityManagerInternal.BroadcastEventListener> mBroadcastEventListeners;
    final BroadcastQueue[] mBroadcastQueues;
    boolean mCallFinishBooting;
    public int mCallingPid;
    private CameraManager mCameraManager;
    private final Map<Integer, Set<Integer>> mCompanionAppUidsMap;
    final ComponentAliasResolver mComponentAliasResolver;
    ActivityManagerConstants mConstants;
    volatile ContentCaptureManagerInternal mContentCaptureService;
    final Context mContext;
    CoreSettingsObserver mCoreSettingsObserver;
    final ContentProviderHelper mCpHelper;
    BroadcastStats mCurBroadcastStats;
    OomAdjObserver mCurOomAdjObserver;
    int mCurOomAdjUid;
    private final Object mCurResumedAppLock;
    private String mCurResumedPackage;
    private int mCurResumedUid;
    private String mDebugApp;
    private boolean mDebugTransient;
    int[] mDeviceIdleAllowlist;
    int[] mDeviceIdleExceptIdleAllowlist;
    int[] mDeviceIdleTempAllowlist;
    private volatile int mDeviceOwnerUid;
    private final DropboxRateLimiter mDropboxRateLimiter;
    final boolean mEnableOffloadQueue;
    final int mFactoryTest;
    final BroadcastQueue mFgBroadcastQueue;
    final BroadcastQueue mFgOffloadBroadcastQueue;
    final FgsTempAllowList<FgsTempAllowListItem> mFgsStartTempAllowList;
    private final FgsTempAllowList<String> mFgsWhileInUseTempAllowList;
    private boolean mForceBackgroundCheck;
    final ProcessMap<ArrayList<ProcessRecord>> mForegroundPackages;
    final ArrayList<ActivityManagerInternal.ForegroundServiceStateListener> mForegroundServiceStateListeners;
    TranGraphicBufferMonitor mGBMonitor;
    final ActivityManagerGlobalLock mGlobalLock;
    final MainHandler mHandler;
    public final ServiceThread mHandlerThread;
    final HiddenApiSettings mHiddenApiBlacklist;
    final SparseArray<ImportanceToken> mImportantProcesses;
    final Injector mInjector;
    private Installer mInstaller;
    final InstrumentationReporter mInstrumentationReporter;
    public final IntentFirewall mIntentFirewall;
    public final ActivityManagerInternal mInternal;
    ArrayMap<String, IBinder> mIsolatedAppBindArgs;
    private long mLastBinderHeavyHitterAutoSamplerStart;
    BroadcastStats mLastBroadcastStats;
    long mLastIdleTime;
    long mLastPowerCheckUptime;
    private ParcelFileDescriptor[] mLifeMonitorFds;
    DeviceIdleInternal mLocalDeviceIdleController;
    PowerManagerInternal mLocalPowerManager;
    String mNativeDebuggingApp;
    private volatile IUidObserver mNetworkPolicyUidObserver;
    private boolean mNotifyOverlayChangedWhenWmsSet;
    volatile boolean mOnBattery;
    final Object mOomAdjObserverLock;
    public OomAdjProfiler mOomAdjProfiler;
    OomAdjuster mOomAdjuster;
    private String mOrigDebugApp;
    private boolean mOrigWaitForDebugger;
    PackageManagerInternal mPackageManagerInt;
    final PackageWatchdog mPackageWatchdog;
    public final PendingIntentController mPendingIntentController;
    private final PendingStartActivityUids mPendingStartActivityUids;
    final PendingTempAllowlists mPendingTempAllowlist;
    PermissionManagerServiceInternal mPermissionManagerInt;
    final ArrayList<ProcessRecord> mPersistentStartingProcesses;
    final PhantomProcessList mPhantomProcessList;
    final PidMap mPidsSelfLocked;
    private final PlatformCompat mPlatformCompat;
    private final PriorityDump.PriorityDumper mPriorityDumper;
    final ActivityManagerGlobalLock mProcLock;
    final ProcessList.ProcStartHandler mProcStartHandler;
    final ServiceThread mProcStartHandlerThread;
    public final ProcessList mProcessList;
    final ProcessStatsService mProcessStats;
    final ArrayList<ProcessRecord> mProcessesOnHold;
    volatile boolean mProcessesReady;
    private ArraySet<Integer> mProfileOwnerUids;
    final IntentResolver<BroadcastFilter, BroadcastFilter> mReceiverResolver;
    final HashMap<IBinder, ReceiverList> mRegisteredReceivers;
    private Boolean mResForbidPss;
    boolean mSafeMode;
    final SdkSandboxSettings mSdkSandboxSettings;
    final ActiveServices mServices;
    final SparseArray<ArrayMap<String, ArrayList<Intent>>> mStickyBroadcasts;
    volatile boolean mSystemReady;
    SystemServiceManager mSystemServiceManager;
    final ActivityThread mSystemThread;
    private TestUtilityService mTestUtilityService;
    TraceErrorLogger mTraceErrorLogger;
    private String mTrackAllocationApp;
    boolean mTrackingAssociations;
    public TranAmsExt mTranAmsExt;
    UriGrantsManagerInternal mUgmInternal;
    final Context mUiContext;
    public final Handler mUiHandler;
    private final SparseIntArray mUidNetworkBlockedReasons;
    final UidObserverController mUidObserverController;
    volatile UsageStatsManagerInternal mUsageStatsService;
    final boolean mUseFifoUiScheduling;
    final UserController mUserController;
    private volatile boolean mUserIsMonkey;
    volatile ActivityManagerInternal.VoiceInteractionManagerProvider mVoiceInteractionManagerProvider;
    private boolean mWaitForDebugger;
    AtomicInteger mWakefulness;
    public WindowManagerService mWindowManager;
    WindowManagerInternal mWmInternal;
    static final String TAG = "ActivityManager";
    static final String TAG_BACKUP = TAG + ActivityManagerDebugConfig.POSTFIX_BACKUP;
    private static final String TAG_BROADCAST = TAG + ActivityManagerDebugConfig.POSTFIX_BROADCAST;
    private static final String TAG_CLEANUP = TAG + ActivityManagerDebugConfig.POSTFIX_CLEANUP;
    private static final String TAG_CONFIGURATION = TAG + ActivityTaskManagerDebugConfig.POSTFIX_CONFIGURATION;
    private static final String TAG_LOCKTASK = TAG + ActivityTaskManagerDebugConfig.POSTFIX_LOCKTASK;
    static final String TAG_LRU = TAG + ActivityManagerDebugConfig.POSTFIX_LRU;
    static final String TAG_OOM_ADJ = TAG + ActivityManagerDebugConfig.POSTFIX_OOM_ADJ;
    private static final String TAG_POWER = TAG + ActivityManagerDebugConfig.POSTFIX_POWER;
    static final String TAG_PROCESSES = TAG + ActivityManagerDebugConfig.POSTFIX_PROCESSES;
    private static final String TAG_SERVICE = TAG + ActivityManagerDebugConfig.POSTFIX_SERVICE;
    private static final String TAG_SWITCH = TAG + ActivityTaskManagerDebugConfig.POSTFIX_SWITCH;
    static final String TAG_UID_OBSERVERS = TAG + ActivityManagerDebugConfig.POSTFIX_UID_OBSERVERS;
    static final int PROC_START_TIMEOUT = Build.HW_TIMEOUT_MULTIPLIER * 10000;
    static final int BROADCAST_FG_TIMEOUT = Build.HW_TIMEOUT_MULTIPLIER * 10000;
    static final int BROADCAST_BG_TIMEOUT = Build.HW_TIMEOUT_MULTIPLIER * 60000;
    public static final int MY_PID = Process.myPid();
    static final String[] EMPTY_STRING_ARRAY = new String[0];
    private static final int NATIVE_DUMP_TIMEOUT_MS = Build.HW_TIMEOUT_MULTIPLIER * 2000;
    private static final boolean mIsAdbEnable = SystemProperties.get("persist.sys.adb.support", "0").equals("1");
    public static long mLastDumpHeapTime = 0;
    public static int mLastDumpHeapCount = 0;
    private static String mWarnCameraProcessName = null;
    private static boolean mIsResetShowWarning = false;
    private static final boolean CAM_LOW_WARNING_SUPPORT = "1".equals(SystemProperties.get("ro.transsion.lowwarning.support"));

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public interface OomAdjObserver {
        void onOomAdjMessage(String str);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public static final class ProcessChangeItem {
        static final int CHANGE_ACTIVITIES = 1;
        static final int CHANGE_CAPABILITY = 4;
        static final int CHANGE_FOREGROUND_SERVICES = 2;
        int capability;
        int changes;
        boolean foregroundActivities;
        int foregroundServiceTypes;
        int pid;
        int processState;
        int uid;
    }

    static {
        TRAN_GT_SUPPORT = 1 == SystemProperties.getInt("ro.tran_gt.support", 0);
        TRAN_DISABLE_UNLOCK_ANIM_SUPPORT = "1".equals(SystemProperties.get("ro.transsion_disable_launcher_unlock_support", "0"));
        sThreadPriorityBooster = new ThreadPriorityBooster(-2, 7);
        sMtkSystemServerIns = MtkSystemServer.getInstance();
        sProcThreadPriorityBooster = new ThreadPriorityBooster(-2, 6);
        sActiveProcessInfoSelfLocked = new SparseArray<>();
        FAKE_TEMP_ALLOW_LIST_ITEM = new FgsTempAllowListItem(JobStatus.NO_LATEST_RUNTIME, 300, "", -1);
        sTheRealBuildSerial = UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN;
        sNullHostingRecord = new HostingRecord("");
        DUMP_MEM_BUCKETS = new long[]{5120, 7168, 10240, 15360, 20480, 30720, 40960, 81920, 122880, 163840, 204800, 256000, 307200, 358400, 409600, 512000, 614400, 819200, 1048576, 2097152, 5242880, 10485760, 20971520};
        DUMP_MEM_OOM_ADJ = new int[]{-1000, -900, -800, -700, 0, 100, 200, 250, ProcessList.PERCEPTIBLE_MEDIUM_APP_ADJ, 300, 400, 500, 600, 700, 800, 900};
        DUMP_MEM_OOM_LABEL = new String[]{"Native", "System", "Persistent", "Persistent Service", "Foreground", "Visible", "Perceptible", "Perceptible Low", "Perceptible Medium", "Backup", "Heavy Weight", "A Services", "Home", "Previous", "B Services", "Cached"};
        DUMP_MEM_OOM_COMPACT_LABEL = new String[]{"native", Griffin.SYS, "pers", "persvc", "fore", "vis", "percept", "perceptl", "perceptm", HostingRecord.HOSTING_TYPE_BACKUP, "heavy", "servicea", "home", "prev", "serviceb", "cached"};
        skipCameraInternalList = new String[]{"com.transsion.faceid", "com.transsion.server.telecom", "com.mediatek.ims", "com.android.systemui", "com.android.server.telecom", "android.camera.cts", "android.app.stubs", "com.android.cts.verifier", "com.reallytek.wg"};
    }

    BroadcastQueue broadcastQueueForIntent(Intent intent) {
        if (isOnFgOffloadQueue(intent.getFlags())) {
            if (ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND) {
                Slog.i(TAG_BROADCAST, "Broadcast intent " + intent + " on foreground offload queue");
            }
            return this.mFgOffloadBroadcastQueue;
        } else if (isOnBgOffloadQueue(intent.getFlags())) {
            if (ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND) {
                Slog.i(TAG_BROADCAST, "Broadcast intent " + intent + " on background offload queue");
            }
            return this.mBgOffloadBroadcastQueue;
        } else {
            boolean isFg = (intent.getFlags() & 268435456) != 0;
            if (ActivityManagerDebugConfig.DEBUG_BROADCAST_BACKGROUND) {
                Slog.i(TAG_BROADCAST, "Broadcast intent " + intent + " on " + (isFg ? "foreground" : "background") + " queue");
            }
            return isFg ? this.mFgBroadcastQueue : this.mBgBroadcastQueue;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static void boostPriorityForLockedSection() {
        sThreadPriorityBooster.boost();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static void resetPriorityAfterLockedSection() {
        sThreadPriorityBooster.reset();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static void boostPriorityForProcLockedSection() {
        sProcThreadPriorityBooster.boost();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static void resetPriorityAfterProcLockedSection() {
        sProcThreadPriorityBooster.reset();
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes.dex */
    public final class PackageAssociationInfo {
        private final ArraySet<String> mAllowedPackageAssociations;
        private boolean mIsDebuggable;
        private final String mSourcePackage;

        PackageAssociationInfo(String sourcePackage, ArraySet<String> allowedPackages, boolean isDebuggable) {
            this.mSourcePackage = sourcePackage;
            this.mAllowedPackageAssociations = allowedPackages;
            this.mIsDebuggable = isDebuggable;
        }

        boolean isPackageAssociationAllowed(String targetPackage) {
            return this.mIsDebuggable || this.mAllowedPackageAssociations.contains(targetPackage);
        }

        boolean isDebuggable() {
            return this.mIsDebuggable;
        }

        void setDebuggable(boolean isDebuggable) {
            this.mIsDebuggable = isDebuggable;
        }

        ArraySet<String> getAllowedPackageAssociations() {
            return this.mAllowedPackageAssociations;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public static final class PidMap {
        private final SparseArray<ProcessRecord> mPidMap = new SparseArray<>();

        PidMap() {
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public ProcessRecord get(int pid) {
            return this.mPidMap.get(pid);
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public int size() {
            return this.mPidMap.size();
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public ProcessRecord valueAt(int index) {
            return this.mPidMap.valueAt(index);
        }

        int keyAt(int index) {
            return this.mPidMap.keyAt(index);
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public int indexOfKey(int key) {
            return this.mPidMap.indexOfKey(key);
        }

        void doAddInternal(int pid, ProcessRecord app) {
            this.mPidMap.put(pid, app);
        }

        boolean doRemoveInternal(int pid, ProcessRecord app) {
            ProcessRecord existingApp = this.mPidMap.get(pid);
            if (existingApp != null && existingApp.getStartSeq() == app.getStartSeq()) {
                this.mPidMap.remove(pid);
                return true;
            }
            return false;
        }

        boolean doRemoveIfNoThreadInternal(int pid, ProcessRecord app) {
            if (app == null || app.getThread() != null) {
                return false;
            }
            return doRemoveInternal(pid, app);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void addPidLocked(ProcessRecord app) {
        int pid = app.getPid();
        synchronized (this.mPidsSelfLocked) {
            this.mPidsSelfLocked.doAddInternal(pid, app);
        }
        SparseArray<ProcessInfo> sparseArray = sActiveProcessInfoSelfLocked;
        synchronized (sparseArray) {
            if (app.processInfo != null) {
                sparseArray.put(pid, app.processInfo);
            } else {
                sparseArray.remove(pid);
            }
        }
        this.mAtmInternal.onProcessMapped(pid, app.getWindowProcessController());
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void removePidLocked(int pid, ProcessRecord app) {
        boolean removed;
        synchronized (this.mPidsSelfLocked) {
            removed = this.mPidsSelfLocked.doRemoveInternal(pid, app);
        }
        if (removed) {
            SparseArray<ProcessInfo> sparseArray = sActiveProcessInfoSelfLocked;
            synchronized (sparseArray) {
                sparseArray.remove(pid);
            }
            this.mAtmInternal.onProcessUnMapped(pid);
        }
    }

    private boolean removePidIfNoThreadLocked(ProcessRecord app) {
        boolean removed;
        int pid = app.getPid();
        synchronized (this.mPidsSelfLocked) {
            removed = this.mPidsSelfLocked.doRemoveIfNoThreadInternal(pid, app);
        }
        if (removed) {
            SparseArray<ProcessInfo> sparseArray = sActiveProcessInfoSelfLocked;
            synchronized (sparseArray) {
                sparseArray.remove(pid);
            }
            this.mAtmInternal.onProcessUnMapped(pid);
        }
        return removed;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public abstract class ImportanceToken implements IBinder.DeathRecipient {
        final int pid;
        final String reason;
        final IBinder token;

        ImportanceToken(int _pid, IBinder _token, String _reason) {
            this.pid = _pid;
            this.token = _token;
            this.reason = _reason;
        }

        public String toString() {
            return "ImportanceToken { " + Integer.toHexString(System.identityHashCode(this)) + " " + this.reason + " " + this.pid + " " + this.token + " }";
        }

        void dumpDebug(ProtoOutputStream proto, long fieldId) {
            long pToken = proto.start(fieldId);
            proto.write(CompanionMessage.MESSAGE_ID, this.pid);
            IBinder iBinder = this.token;
            if (iBinder != null) {
                proto.write(1138166333442L, iBinder.toString());
            }
            proto.write(1138166333443L, this.reason);
            proto.end(pToken);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public static final class Association {
        int mCount;
        long mLastStateUptime;
        int mNesting;
        final String mSourceProcess;
        final int mSourceUid;
        long mStartTime;
        final ComponentName mTargetComponent;
        final String mTargetProcess;
        final int mTargetUid;
        long mTime;
        int mLastState = 21;
        long[] mStateTimes = new long[21];

        Association(int sourceUid, String sourceProcess, int targetUid, ComponentName targetComponent, String targetProcess) {
            this.mSourceUid = sourceUid;
            this.mSourceProcess = sourceProcess;
            this.mTargetUid = targetUid;
            this.mTargetComponent = targetComponent;
            this.mTargetProcess = targetProcess;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public static final class PendingTempAllowlist {
        final int callingUid;
        final long duration;
        final int reasonCode;
        final String tag;
        final int targetUid;
        final int type;

        PendingTempAllowlist(int targetUid, long duration, int reasonCode, String tag, int type, int callingUid) {
            this.targetUid = targetUid;
            this.duration = duration;
            this.tag = tag;
            this.type = type;
            this.reasonCode = reasonCode;
            this.callingUid = callingUid;
        }

        void dumpDebug(ProtoOutputStream proto, long fieldId) {
            long token = proto.start(fieldId);
            proto.write(CompanionMessage.MESSAGE_ID, this.targetUid);
            proto.write(1112396529666L, this.duration);
            proto.write(1138166333443L, this.tag);
            proto.write(1120986464260L, this.type);
            proto.write(1120986464261L, this.reasonCode);
            proto.write(1120986464262L, this.callingUid);
            proto.end(token);
        }
    }

    /* loaded from: classes.dex */
    public static final class FgsTempAllowListItem {
        final int mCallingUid;
        final long mDuration;
        final String mReason;
        final int mReasonCode;

        FgsTempAllowListItem(long duration, int reasonCode, String reason, int callingUid) {
            this.mDuration = duration;
            this.mReasonCode = reasonCode;
            this.mReason = reason;
            this.mCallingUid = callingUid;
        }

        void dump(PrintWriter pw) {
            pw.print(" duration=" + this.mDuration + " callingUid=" + UserHandle.formatUid(this.mCallingUid) + " reasonCode=" + PowerExemptionManager.reasonCodeToString(this.mReasonCode) + " reason=" + this.mReason);
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes.dex */
    public final class AppDeathRecipient implements IBinder.DeathRecipient {
        final ProcessRecord mApp;
        final IApplicationThread mAppThread;
        final int mPid;

        AppDeathRecipient(ProcessRecord app, int pid, IApplicationThread thread) {
            Slog.v(ActivityManagerService.TAG, "New death recipient " + this + " for thread " + thread.asBinder());
            this.mApp = app;
            this.mPid = pid;
            this.mAppThread = thread;
        }

        @Override // android.os.IBinder.DeathRecipient
        public void binderDied() {
            Slog.v(ActivityManagerService.TAG, "Death received in " + this + " for thread " + this.mAppThread.asBinder());
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.appDiedLocked(this.mApp, this.mPid, this.mAppThread, true, null);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public final class UiHandler extends Handler {
        public UiHandler() {
            super(UiThread.get().getLooper(), null, true);
        }

        /* JADX DEBUG: Another duplicated slice has different insns count: {[]}, finally: {[INVOKE] complete} */
        @Override // android.os.Handler
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case 1:
                    ActivityManagerService.this.mAppErrors.handleShowAppErrorUi(msg);
                    ActivityManagerService.this.ensureBootCompleted();
                    return;
                case 2:
                    ActivityManagerService.this.mAppErrors.handleShowAnrUi(msg);
                    ActivityManagerService.this.ensureBootCompleted();
                    return;
                case 6:
                    synchronized (ActivityManagerService.this.mProcLock) {
                        try {
                            ActivityManagerService.boostPriorityForProcLockedSection();
                            ProcessRecord app = (ProcessRecord) msg.obj;
                            if (msg.arg1 != 0) {
                                if (!app.hasWaitedForDebugger()) {
                                    app.mErrorState.getDialogController().showDebugWaitingDialogs();
                                    app.setWaitedForDebugger(true);
                                }
                            } else {
                                app.mErrorState.getDialogController().clearWaitingDialog();
                            }
                        } finally {
                        }
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return;
                case 26:
                    HashMap<String, Object> data = (HashMap) msg.obj;
                    synchronized (ActivityManagerService.this.mProcLock) {
                        try {
                            ActivityManagerService.boostPriorityForProcLockedSection();
                            ProcessRecord proc = (ProcessRecord) data.get("app");
                            if (proc == null) {
                                Slog.e(ActivityManagerService.TAG, "App not found when showing strict mode dialog.");
                                ActivityManagerService.resetPriorityAfterProcLockedSection();
                                return;
                            } else if (proc.mErrorState.getDialogController().hasViolationDialogs()) {
                                Slog.e(ActivityManagerService.TAG, "App already has strict mode dialog: " + proc);
                                return;
                            } else {
                                AppErrorResult res = (AppErrorResult) data.get("result");
                                if (ActivityManagerService.this.mAtmInternal.showStrictModeViolationDialog()) {
                                    proc.mErrorState.getDialogController().showViolationDialogs(res);
                                } else {
                                    res.set(0);
                                }
                                ActivityManagerService.resetPriorityAfterProcLockedSection();
                                ActivityManagerService.this.ensureBootCompleted();
                                return;
                            }
                        } finally {
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                        }
                    }
                case 31:
                    ActivityManagerService.this.mProcessList.dispatchProcessesChanged();
                    return;
                case 32:
                    int pid = msg.arg1;
                    int uid = msg.arg2;
                    ActivityManagerService.this.mProcessList.dispatchProcessDied(pid, uid);
                    return;
                case 68:
                    ActivityManagerService.this.pushTempAllowlist();
                    return;
                case 70:
                    ActivityManagerService.this.dispatchOomAdjObserver((String) msg.obj);
                    return;
                default:
                    return;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public final class MainHandler extends Handler {
        public MainHandler(Looper looper) {
            super(looper, null, true);
        }

        /* JADX DEBUG: Another duplicated slice has different insns count: {[]}, finally: {[INVOKE] complete} */
        @Override // android.os.Handler
        public void handleMessage(final Message msg) {
            switch (msg.what) {
                case 5:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ActivityManagerService.this.mAppProfiler.performAppGcsIfAppropriateLocked();
                        } finally {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return;
                case 12:
                    if (ActivityManagerService.this.mAnrManager.delayMessage(ActivityManagerService.this.mHandler, msg, 12, ActiveServices.SERVICE_TIMEOUT)) {
                        return;
                    }
                    ActivityManagerService.this.mServices.serviceTimeout((ProcessRecord) msg.obj);
                    return;
                case 13:
                    synchronized (ActivityManagerService.this.mProcLock) {
                        try {
                            ActivityManagerService.boostPriorityForProcLockedSection();
                            ActivityManagerService.this.mProcessList.forEachLruProcessesLOSP(false, new Consumer() { // from class: com.android.server.am.ActivityManagerService$MainHandler$$ExternalSyntheticLambda0
                                @Override // java.util.function.Consumer
                                public final void accept(Object obj) {
                                    ActivityManagerService.MainHandler.lambda$handleMessage$0((ProcessRecord) obj);
                                }
                            });
                        } finally {
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                        }
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return;
                case 20:
                    if (ActivityManagerService.this.mAnrManager.delayMessage(ActivityManagerService.this.mHandler, msg, 20, ActivityManagerService.PROC_START_TIMEOUT)) {
                        return;
                    }
                    ProcessRecord app = (ProcessRecord) msg.obj;
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ActivityManagerService.this.handleProcessStartOrKillTimeoutLocked(app, false);
                        } finally {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return;
                case 22:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            int appId = msg.arg1;
                            int userId = msg.arg2;
                            Bundle bundle = (Bundle) msg.obj;
                            String pkg = bundle.getString("pkg");
                            String reason = bundle.getString(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY);
                            ActivityManagerService.this.forceStopPackageLocked(pkg, appId, false, false, true, false, false, userId, reason);
                        } finally {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return;
                case 27:
                    ActivityManagerService.this.checkExcessivePowerUsage();
                    removeMessages(27);
                    Message nmsg = obtainMessage(27);
                    sendMessageDelayed(nmsg, ActivityManagerService.this.mConstants.POWER_CHECK_INTERVAL);
                    return;
                case 28:
                    synchronized (ActivityManagerService.this.mProcLock) {
                        try {
                            ActivityManagerService.boostPriorityForProcLockedSection();
                            ActivityManagerService.this.mProcessList.clearAllDnsCacheLOSP();
                        } finally {
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                        }
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return;
                case 29:
                    ActivityManagerService.this.mProcessList.setAllHttpProxy();
                    return;
                case 33:
                    final ArrayList<ProcessMemInfo> memInfos = (ArrayList) msg.obj;
                    new Thread() { // from class: com.android.server.am.ActivityManagerService.MainHandler.1
                        @Override // java.lang.Thread, java.lang.Runnable
                        public void run() {
                            ActivityManagerService.this.mAppProfiler.reportMemUsage(memInfos);
                        }
                    }.start();
                    return;
                case 41:
                    synchronized (ActivityManagerService.this.mProcLock) {
                        try {
                            ActivityManagerService.boostPriorityForProcLockedSection();
                            ActivityManagerService.this.mProcessList.updateAllTimePrefsLOSP(msg.arg1);
                        } finally {
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                        }
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return;
                case 49:
                    int uid = msg.arg1;
                    byte[] firstPacket = (byte[]) msg.obj;
                    synchronized (ActivityManagerService.this.mProcLock) {
                        try {
                            ActivityManagerService.boostPriorityForProcLockedSection();
                            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                                for (int i = 0; i < ActivityManagerService.this.mPidsSelfLocked.size(); i++) {
                                    ProcessRecord p = ActivityManagerService.this.mPidsSelfLocked.valueAt(i);
                                    IApplicationThread thread = p.getThread();
                                    if (p.uid == uid && thread != null) {
                                        try {
                                            thread.notifyCleartextNetwork(firstPacket);
                                        } catch (RemoteException e) {
                                        }
                                    }
                                }
                            }
                        } finally {
                        }
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return;
                case 50:
                    ActivityManagerService.this.mAppProfiler.handlePostDumpHeapNotification();
                    return;
                case 51:
                    ActivityManagerService.this.mAppProfiler.handleAbortDumpHeap((String) msg.obj);
                    return;
                case 56:
                    IUiAutomationConnection connection = (IUiAutomationConnection) msg.obj;
                    try {
                        connection.shutdown();
                    } catch (RemoteException e2) {
                        Slog.w(ActivityManagerService.TAG, "Error shutting down UiAutomationConnection");
                    }
                    ActivityManagerService.this.mUserIsMonkey = false;
                    ITranActivityManagerService.Instance().setIsUserMonkey(false);
                    return;
                case 57:
                    ProcessRecord app2 = (ProcessRecord) msg.obj;
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ActivityManagerService.this.mCpHelper.processContentProviderPublishTimedOutLocked(app2);
                        } finally {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return;
                case 58:
                    ActivityManagerService.this.idleUids();
                    return;
                case 63:
                    synchronized (ActivityManagerService.this.mProcLock) {
                        try {
                            ActivityManagerService.boostPriorityForProcLockedSection();
                            ActivityManagerService.this.mProcessList.handleAllTrustStorageUpdateLOSP();
                        } finally {
                        }
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return;
                case 66:
                    ActivityManagerService.this.mServices.serviceForegroundTimeout((ServiceRecord) msg.obj);
                    return;
                case 67:
                    SomeArgs args = (SomeArgs) msg.obj;
                    ActivityManagerService.this.mServices.serviceForegroundTimeoutANR((ProcessRecord) args.arg1, (String) args.arg2);
                    args.recycle();
                    return;
                case 69:
                    SomeArgs args2 = (SomeArgs) msg.obj;
                    ActivityManagerService.this.mServices.serviceForegroundCrash((ProcessRecord) args2.arg1, (String) args2.arg2, (ComponentName) args2.arg3);
                    args2.recycle();
                    return;
                case 71:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            AppZygote appZygote = (AppZygote) msg.obj;
                            ActivityManagerService.this.mProcessList.killAppZygoteIfNeededLocked(appZygote, false);
                        } finally {
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return;
                case 72:
                    ActivityManagerService.this.handleBinderHeavyHitterAutoSamplerTimeOut();
                    return;
                case 73:
                    synchronized (ActivityManagerService.this) {
                        try {
                            ActivityManagerService.boostPriorityForLockedSection();
                            ((ContentProviderRecord) msg.obj).onProviderPublishStatusLocked(false);
                        } finally {
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return;
                case 74:
                    ActivityManagerService.this.mBroadcastEventListeners.forEach(new Consumer() { // from class: com.android.server.am.ActivityManagerService$MainHandler$$ExternalSyntheticLambda1
                        @Override // java.util.function.Consumer
                        public final void accept(Object obj) {
                            ((ActivityManagerInternal.BroadcastEventListener) obj).onSendingBroadcast((String) r0.obj, msg.arg1);
                        }
                    });
                    return;
                case 75:
                    ActivityManagerService.this.mBindServiceEventListeners.forEach(new Consumer() { // from class: com.android.server.am.ActivityManagerService$MainHandler$$ExternalSyntheticLambda2
                        @Override // java.util.function.Consumer
                        public final void accept(Object obj) {
                            ((ActivityManagerInternal.BindServiceEventListener) obj).onBindingService((String) r0.obj, msg.arg1);
                        }
                    });
                    return;
                default:
                    return;
            }
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public static /* synthetic */ void lambda$handleMessage$0(ProcessRecord app) {
            IApplicationThread thread = app.getThread();
            if (thread != null) {
                try {
                    thread.updateTimeZone();
                } catch (RemoteException e) {
                    Slog.w(ActivityManagerService.TAG, "Failed to update time zone for: " + app.info.processName);
                }
            }
        }
    }

    /* JADX DEBUG: Multi-variable search result rejected for r14v0, resolved type: com.android.server.am.ActivityManagerService */
    /* JADX WARN: Multi-variable type inference failed */
    public void setSystemProcess() {
        try {
            ServiceManager.addService(HostingRecord.HOSTING_TYPE_ACTIVITY, this, true, 21);
            ServiceManager.addService("procstats", this.mProcessStats);
            ServiceManager.addService("meminfo", new MemBinder(this), false, 2);
            ServiceManager.addService("gfxinfo", new GraphicsBinder(this));
            ServiceManager.addService("dbinfo", new DbBinder(this));
            this.mAppProfiler.setCpuInfoService();
            ServiceManager.addService(ParsingPackageUtils.TAG_PERMISSION, new PermissionController(this));
            ServiceManager.addService("processinfo", new ProcessInfoService(this));
            ServiceManager.addService("cacheinfo", new CacheBinder(this));
            this.mAnrManager.AddAnrManagerService();
            this.mAmsExt.addDuraSpeedService();
            ApplicationInfo info = this.mContext.getPackageManager().getApplicationInfo(PackageManagerService.PLATFORM_PACKAGE_NAME, 1049600);
            this.mSystemThread.installSystemApplicationInfo(info, getClass().getClassLoader());
            synchronized (this) {
                boostPriorityForLockedSection();
                ProcessRecord app = this.mProcessList.newProcessRecordLocked(info, info.processName, false, 0, false, 0, null, new HostingRecord(HostingRecord.HOSTING_TYPE_SYSTEM));
                app.setPersistent(true);
                app.setPid(MY_PID);
                app.mState.setMaxAdj(-900);
                app.makeActive(this.mSystemThread.getApplicationThread(), this.mProcessStats);
                app.mProfile.addHostingComponentType(1);
                ITranActivityManagerService.Instance().hookProcStart(app.processWrapper, PackageManagerService.PLATFORM_PACKAGE_NAME, "");
                addPidLocked(app);
                updateLruProcessLocked(app, false, null);
                updateOomAdjLocked("updateOomAdj_meh");
            }
            resetPriorityAfterLockedSection();
            this.mAmsExt.enableAmsLog(this.mProcessList.mLruProcesses);
            CtaManagerFactory.getInstance().makeCtaManager().addAutoBootService(this.mContext);
            this.mAppOpsService.startWatchingMode(63, null, new IAppOpsCallback.Stub() { // from class: com.android.server.am.ActivityManagerService.4
                public void opChanged(int op, int uid, String packageName) {
                    if (op == 63 && packageName != null && ActivityManagerService.this.getAppOpsManager().checkOpNoThrow(op, uid, packageName) != 0) {
                        ActivityManagerService.this.runInBackgroundDisabled(uid);
                    }
                }
            });
            int[] cameraOp = {26};
            this.mAppOpsService.startWatchingActive(cameraOp, new IAppOpsActiveCallback.Stub() { // from class: com.android.server.am.ActivityManagerService.5
                public void opActiveChanged(int op, int uid, String packageName, String attributionTag, boolean active, int attributionFlags, int attributionChainId) {
                    ActivityManagerService.this.cameraActiveChanged(uid, active);
                }
            });
        } catch (PackageManager.NameNotFoundException e) {
            throw new RuntimeException("Unable to find android system package", e);
        }
    }

    public void setWindowManager(WindowManagerService wm) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mWindowManager = wm;
                if (this.mNotifyOverlayChangedWhenWmsSet) {
                    Executor executor = ActivityThread.currentActivityThread().getExecutor();
                    WindowManagerService windowManagerService = this.mWindowManager;
                    Objects.requireNonNull(windowManagerService);
                    executor.execute(new ActivityManagerService$$ExternalSyntheticLambda12(windowManagerService));
                    this.mNotifyOverlayChangedWhenWmsSet = false;
                }
                this.mWmInternal = (WindowManagerInternal) LocalServices.getService(WindowManagerInternal.class);
                this.mActivityTaskManager.setWindowManager(wm);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void setUsageStatsManager(UsageStatsManagerInternal usageStatsManager) {
        this.mUsageStatsService = usageStatsManager;
        this.mActivityTaskManager.setUsageStatsManager(usageStatsManager);
    }

    public void setContentCaptureManager(ContentCaptureManagerInternal contentCaptureManager) {
        this.mContentCaptureService = contentCaptureManager;
    }

    public void startObservingNativeCrashes() {
        NativeCrashListener ncl = new NativeCrashListener(this);
        ncl.start();
    }

    public void setAppOpsPolicy(AppOpsManagerInternal.CheckOpsDelegate appOpsPolicy) {
        this.mAppOpsService.setAppOpsPolicy(appOpsPolicy);
    }

    public IAppOpsService getAppOpsService() {
        return this.mAppOpsService;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void setVoiceInteractionManagerProvider(ActivityManagerInternal.VoiceInteractionManagerProvider provider) {
        this.mVoiceInteractionManagerProvider = provider;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public static class MemBinder extends Binder {
        ActivityManagerService mActivityManagerService;
        private final PriorityDump.PriorityDumper mPriorityDumper = new PriorityDump.PriorityDumper() { // from class: com.android.server.am.ActivityManagerService.MemBinder.1
            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpHigh(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                dump(fd, pw, new String[]{"-a"}, asProto);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dump(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                MemBinder.this.mActivityManagerService.dumpApplicationMemoryUsage(fd, pw, "  ", args, false, null, asProto);
            }
        };

        MemBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        @Override // android.os.Binder
        protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            try {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                if (!DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "meminfo", pw)) {
                    return;
                }
                PriorityDump.dump(this.mPriorityDumper, fd, pw, args);
            } finally {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
            }
        }
    }

    /* loaded from: classes.dex */
    static class GraphicsBinder extends Binder {
        ActivityManagerService mActivityManagerService;

        GraphicsBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        @Override // android.os.Binder
        protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            try {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                if (!DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "gfxinfo", pw)) {
                    return;
                }
                this.mActivityManagerService.dumpGraphicsHardwareUsage(fd, pw, args);
            } finally {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
            }
        }
    }

    /* loaded from: classes.dex */
    static class DbBinder extends Binder {
        ActivityManagerService mActivityManagerService;

        DbBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        @Override // android.os.Binder
        protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            try {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                if (!DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "dbinfo", pw)) {
                    return;
                }
                this.mActivityManagerService.dumpDbInfo(fd, pw, args);
            } finally {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
            }
        }
    }

    /* loaded from: classes.dex */
    static class CacheBinder extends Binder {
        ActivityManagerService mActivityManagerService;

        CacheBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        @Override // android.os.Binder
        protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
            try {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                if (!DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "cacheinfo", pw)) {
                    return;
                }
                this.mActivityManagerService.dumpBinderCacheContents(fd, pw, args);
            } finally {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
            }
        }
    }

    /* loaded from: classes.dex */
    public static final class Lifecycle extends SystemService {
        private static ActivityTaskManagerService sAtm;
        private final ActivityManagerService mService;

        public Lifecycle(Context context) {
            super(context);
            this.mService = new ActivityManagerService(context, sAtm);
        }

        public static ActivityManagerService startService(SystemServiceManager ssm, ActivityTaskManagerService atm) {
            sAtm = atm;
            return ((Lifecycle) ssm.startService(Lifecycle.class)).getService();
        }

        @Override // com.android.server.SystemService
        public void onStart() {
            this.mService.start();
        }

        @Override // com.android.server.SystemService
        public void onBootPhase(int phase) {
            this.mService.mBootPhase = phase;
            if (phase == 500) {
                this.mService.mBatteryStatsService.systemServicesReady();
                this.mService.mServices.systemServicesReady();
            } else if (phase == 550) {
                this.mService.startBroadcastObservers();
            } else if (phase == 600) {
                this.mService.mPackageWatchdog.onPackagesReady();
                ActivityTaskManagerService activityTaskManagerService = sAtm;
                if (activityTaskManagerService != null) {
                    activityTaskManagerService.onPackagesReady();
                }
            }
        }

        @Override // com.android.server.SystemService
        public void onUserStopped(SystemService.TargetUser user) {
            this.mService.mBatteryStatsService.onCleanupUser(user.getUserIdentifier());
        }

        public ActivityManagerService getService() {
            return this.mService;
        }
    }

    private void maybeLogUserspaceRebootEvent() {
        int userId;
        if (!UserspaceRebootLogger.shouldLogUserspaceRebootEvent() || (userId = this.mUserController.getCurrentUserId()) != 0) {
            return;
        }
        UserspaceRebootLogger.logEventAsync(StorageManager.isUserKeyUnlocked(userId), BackgroundThread.getExecutor());
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public static class HiddenApiSettings extends ContentObserver implements DeviceConfig.OnPropertiesChangedListener {
        public static final String HIDDEN_API_ACCESS_LOG_SAMPLING_RATE = "hidden_api_access_log_sampling_rate";
        public static final String HIDDEN_API_ACCESS_STATSLOG_SAMPLING_RATE = "hidden_api_access_statslog_sampling_rate";
        private boolean mBlacklistDisabled;
        private final Context mContext;
        private List<String> mExemptions;
        private String mExemptionsStr;
        private int mLogSampleRate;
        private int mPolicy;
        private int mStatslogSampleRate;

        public void onPropertiesChanged(DeviceConfig.Properties properties) {
            int logSampleRate = properties.getInt(HIDDEN_API_ACCESS_LOG_SAMPLING_RATE, 0);
            logSampleRate = (logSampleRate < 0 || logSampleRate > 65536) ? -1 : -1;
            if (logSampleRate != -1 && logSampleRate != this.mLogSampleRate) {
                this.mLogSampleRate = logSampleRate;
                Process.ZYGOTE_PROCESS.setHiddenApiAccessLogSampleRate(this.mLogSampleRate);
            }
            int statslogSampleRate = properties.getInt(HIDDEN_API_ACCESS_STATSLOG_SAMPLING_RATE, 0);
            statslogSampleRate = (statslogSampleRate < 0 || statslogSampleRate > 65536) ? -1 : -1;
            if (statslogSampleRate != -1 && statslogSampleRate != this.mStatslogSampleRate) {
                this.mStatslogSampleRate = statslogSampleRate;
                Process.ZYGOTE_PROCESS.setHiddenApiAccessStatslogSampleRate(this.mStatslogSampleRate);
            }
        }

        public HiddenApiSettings(Handler handler, Context context) {
            super(handler);
            this.mExemptions = Collections.emptyList();
            this.mLogSampleRate = -1;
            this.mStatslogSampleRate = -1;
            this.mPolicy = -1;
            this.mContext = context;
        }

        public void registerObserver() {
            this.mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor("hidden_api_blacklist_exemptions"), false, this);
            this.mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor("hidden_api_policy"), false, this);
            DeviceConfig.addOnPropertiesChangedListener("app_compat", this.mContext.getMainExecutor(), this);
            update();
        }

        private void update() {
            List<String> asList;
            String exemptions = Settings.Global.getString(this.mContext.getContentResolver(), "hidden_api_blacklist_exemptions");
            if (!TextUtils.equals(exemptions, this.mExemptionsStr)) {
                this.mExemptionsStr = exemptions;
                if ("*".equals(exemptions)) {
                    this.mBlacklistDisabled = true;
                    this.mExemptions = Collections.emptyList();
                } else {
                    this.mBlacklistDisabled = false;
                    if (TextUtils.isEmpty(exemptions)) {
                        asList = Collections.emptyList();
                    } else {
                        asList = Arrays.asList(exemptions.split(","));
                    }
                    this.mExemptions = asList;
                }
                if (!Process.ZYGOTE_PROCESS.setApiDenylistExemptions(this.mExemptions)) {
                    Slog.e(ActivityManagerService.TAG, "Failed to set API blacklist exemptions!");
                    this.mExemptions = Collections.emptyList();
                }
            }
            this.mPolicy = getValidEnforcementPolicy("hidden_api_policy");
        }

        private int getValidEnforcementPolicy(String settingsKey) {
            int policy = Settings.Global.getInt(this.mContext.getContentResolver(), settingsKey, -1);
            if (ApplicationInfo.isValidHiddenApiEnforcementPolicy(policy)) {
                return policy;
            }
            return -1;
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public boolean isDisabled() {
            return this.mBlacklistDisabled;
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public int getPolicy() {
            return this.mPolicy;
        }

        @Override // android.database.ContentObserver
        public void onChange(boolean selfChange) {
            update();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public static class SdkSandboxSettings implements DeviceConfig.OnPropertiesChangedListener {
        public static final String ENFORCE_BROADCAST_RECEIVER_RESTRICTIONS = "enforce_broadcast_receiver_restrictions";
        private final Context mContext;
        private boolean mEnforceBroadcastReceiverRestrictions;
        private final Object mLock = new Object();

        SdkSandboxSettings(Context context) {
            this.mContext = context;
        }

        void registerObserver() {
            synchronized (this.mLock) {
                this.mEnforceBroadcastReceiverRestrictions = DeviceConfig.getBoolean("sdk_sandbox", ENFORCE_BROADCAST_RECEIVER_RESTRICTIONS, false);
                DeviceConfig.addOnPropertiesChangedListener("sdk_sandbox", this.mContext.getMainExecutor(), this);
            }
        }

        public void onPropertiesChanged(DeviceConfig.Properties properties) {
            synchronized (this.mLock) {
                this.mEnforceBroadcastReceiverRestrictions = properties.getBoolean(ENFORCE_BROADCAST_RECEIVER_RESTRICTIONS, false);
            }
        }

        boolean isBroadcastReceiverRestrictionsEnforced() {
            boolean z;
            synchronized (this.mLock) {
                z = this.mEnforceBroadcastReceiverRestrictions;
            }
            return z;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public AppOpsManager getAppOpsManager() {
        if (this.mAppOpsManager == null) {
            this.mAppOpsManager = (AppOpsManager) this.mContext.getSystemService(AppOpsManager.class);
        }
        return this.mAppOpsManager;
    }

    public ActivityManagerService(Injector injector, ServiceThread handlerThread) {
        ActivityManagerConstants activityManagerConstants;
        OomAdjuster oomAdjuster;
        IntentFirewall intentFirewall;
        PendingIntentController pendingIntentController;
        this.mGBMonitor = null;
        this.ANR_DUMP_HEAP_TIME = 120000L;
        this.mInstrumentationReporter = new InstrumentationReporter();
        this.mActiveInstrumentation = new ArrayList<>();
        this.mOomAdjProfiler = new OomAdjProfiler();
        this.mGlobalLock = this;
        this.mProcLock = new ActivityManagerProcLock();
        this.mNotifyOverlayChangedWhenWmsSet = false;
        this.mBroadcastQueues = new BroadcastQueue[4];
        this.mDeviceOwnerUid = -1;
        this.mCompanionAppUidsMap = new ArrayMap();
        this.mProfileOwnerUids = null;
        this.mActiveCameraUids = new IntArray(4);
        this.mPriorityDumper = new PriorityDump.PriorityDumper() { // from class: com.android.server.am.ActivityManagerService.1
            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpCritical(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                if (asProto) {
                    return;
                }
                ActivityManagerService.this.doDump(fd, pw, new String[]{ActivityTaskManagerService.DUMP_ACTIVITIES_CMD}, asProto);
                ActivityManagerService.this.doDump(fd, pw, new String[]{HostingRecord.HOSTING_TYPE_SERVICE, "all-platform-critical"}, asProto);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpNormal(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, new String[]{"-a", "--normal-priority"}, asProto);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dump(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, args, asProto);
            }
        };
        this.mAmsExt = MtkSystemServiceFactory.getInstance().makeAmsExt();
        this.mTranAmsExt = TranSystemServiceFactory.getInstance().makeTranAmsExt();
        this.mAnrManager = MtkSystemServiceFactory.getInstance().makeAnrManager();
        this.mBackgroundAppIdAllowlist = new int[]{1002};
        PidMap pidMap = new PidMap();
        this.mPidsSelfLocked = pidMap;
        this.mImportantProcesses = new SparseArray<>();
        this.mProcessesOnHold = new ArrayList<>();
        this.mPersistentStartingProcesses = new ArrayList<>();
        this.mActivityLaunchObserver = new ActivityMetricsLaunchObserver() { // from class: com.android.server.am.ActivityManagerService.2
            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public void onActivityLaunched(long id, ComponentName name, int temperature) {
                ActivityManagerService.this.mAppProfiler.onActivityLaunched();
            }
        };
        this.mBinderTransactionTrackingEnabled = false;
        this.mAlreadyLoggedViolatedStacks = new HashSet<>();
        this.mRegisteredReceivers = new HashMap<>();
        this.mReceiverResolver = new IntentResolver<BroadcastFilter, BroadcastFilter>() { // from class: com.android.server.am.ActivityManagerService.3
            /* JADX DEBUG: Method merged with bridge method */
            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public boolean allowFilterResult(BroadcastFilter filter, List<BroadcastFilter> dest) {
                IBinder target = filter.receiverList.receiver.asBinder();
                for (int i = dest.size() - 1; i >= 0; i--) {
                    if (dest.get(i).receiverList.receiver.asBinder() == target) {
                        return false;
                    }
                }
                return true;
            }

            /* JADX DEBUG: Method merged with bridge method */
            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public BroadcastFilter newResult(Computer computer, BroadcastFilter filter, int match, int userId, long customFlags) {
                if (userId == -1 || filter.owningUserId == -1 || userId == filter.owningUserId) {
                    return (BroadcastFilter) super.newResult(computer, (Computer) filter, match, userId, customFlags);
                }
                return null;
            }

            /* JADX DEBUG: Method merged with bridge method */
            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public IntentFilter getIntentFilter(BroadcastFilter input) {
                return input;
            }

            /* JADX DEBUG: Method merged with bridge method */
            /* JADX INFO: Access modifiers changed from: protected */
            /* JADX WARN: Can't rename method to resolve collision */
            @Override // com.android.server.IntentResolver
            public BroadcastFilter[] newArray(int size) {
                return new BroadcastFilter[size];
            }

            /* JADX DEBUG: Method merged with bridge method */
            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public boolean isPackageForFilter(String packageName, BroadcastFilter filter) {
                return packageName.equals(filter.packageName);
            }
        };
        this.mStickyBroadcasts = new SparseArray<>();
        this.mAssociations = new SparseArray<>();
        this.mBackupTargets = new SparseArray<>();
        this.mDeviceIdleAllowlist = new int[0];
        this.mDeviceIdleExceptIdleAllowlist = new int[0];
        this.mDeviceIdleTempAllowlist = new int[0];
        this.mPendingTempAllowlist = new PendingTempAllowlists(this);
        this.mFgsStartTempAllowList = new FgsTempAllowList<>();
        this.mFgsWhileInUseTempAllowList = new FgsTempAllowList<>();
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mWakefulness = new AtomicInteger(1);
        this.mLastIdleTime = SystemClock.uptimeMillis();
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mCurResumedAppLock = new Object();
        this.mForegroundPackages = new ProcessMap<>();
        this.mForegroundServiceStateListeners = new ArrayList<>();
        this.mBroadcastEventListeners = new CopyOnWriteArrayList<>();
        this.mBindServiceEventListeners = new CopyOnWriteArrayList<>();
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mOomAdjObserverLock = new Object();
        this.mAnrHelper = new AnrHelper(this);
        this.mBooted = false;
        this.mUidNetworkBlockedReasons = new SparseIntArray();
        this.mLastBinderHeavyHitterAutoSamplerStart = 0L;
        this.mResForbidPss = false;
        this.mDropboxRateLimiter = new DropboxRateLimiter();
        this.mCallingPid = 0;
        this.mAvailabilityCallback = new CameraManager.AvailabilityCallback() { // from class: com.android.server.am.ActivityManagerService.21
            @Override // android.hardware.camera2.CameraManager.AvailabilityCallback
            public void onCameraAvailable(String cameraId) {
                ActivityManagerService.this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService.21.1
                    @Override // java.lang.Runnable
                    public void run() {
                        ActivityManagerService.sendLowWarningBroadCast(2);
                    }
                });
            }

            @Override // android.hardware.camera2.CameraManager.AvailabilityCallback
            public void onCameraUnavailable(String cameraId) {
                ActivityManagerService.this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService.21.2
                    @Override // java.lang.Runnable
                    public void run() {
                        ActivityManagerService.sendLowWarningBroadCast(1);
                    }
                });
            }
        };
        boolean hasHandlerThread = handlerThread != null;
        this.mInjector = injector;
        Context context = injector.getContext();
        this.mContext = context;
        this.mUiContext = null;
        this.mAppErrors = null;
        this.mPackageWatchdog = null;
        this.mAppOpsService = injector.getAppOpsService(null, null);
        this.mBatteryStatsService = null;
        MainHandler mainHandler = hasHandlerThread ? new MainHandler(handlerThread.getLooper()) : null;
        this.mHandler = mainHandler;
        this.mHandlerThread = handlerThread;
        if (Build.ENABLE_GB_MON_RECLAIM) {
            this.mGBMonitor = TranSystemServiceFactory.getInstance().makeTranGraphicBufferMonitor(context, this, pidMap);
        }
        if (!hasHandlerThread) {
            activityManagerConstants = null;
        } else {
            activityManagerConstants = new ActivityManagerConstants(context, this, mainHandler);
        }
        this.mConstants = activityManagerConstants;
        ActiveUids activeUids = new ActiveUids(this, false);
        this.mPlatformCompat = null;
        ProcessList processList = injector.getProcessList(this);
        this.mProcessList = processList;
        processList.init(this, activeUids, null);
        this.mAppProfiler = new AppProfiler(this, BackgroundThread.getHandler().getLooper(), null);
        this.mPhantomProcessList = new PhantomProcessList(this);
        if (!hasHandlerThread) {
            oomAdjuster = null;
        } else {
            oomAdjuster = new OomAdjuster(this, processList, activeUids, handlerThread);
        }
        this.mOomAdjuster = oomAdjuster;
        if (!hasHandlerThread) {
            intentFirewall = null;
        } else {
            intentFirewall = new IntentFirewall(new IntentFirewallInterface(), mainHandler);
        }
        this.mIntentFirewall = intentFirewall;
        this.mProcessStats = null;
        this.mCpHelper = new ContentProviderHelper(this, false);
        this.mServices = hasHandlerThread ? new ActiveServices(this) : null;
        this.mSystemThread = null;
        Handler uiHandler = injector.getUiHandler(null);
        this.mUiHandler = uiHandler;
        this.mUidObserverController = new UidObserverController(uiHandler);
        UserController userController = hasHandlerThread ? new UserController(this) : null;
        this.mUserController = userController;
        if (hasHandlerThread) {
            pendingIntentController = new PendingIntentController(handlerThread.getLooper(), userController, this.mConstants);
        } else {
            pendingIntentController = null;
        }
        this.mPendingIntentController = pendingIntentController;
        this.mAppRestrictionController = new AppRestrictionController(context, this);
        this.mProcStartHandlerThread = null;
        this.mProcStartHandler = null;
        this.mHiddenApiBlacklist = null;
        this.mSdkSandboxSettings = null;
        this.mFactoryTest = 0;
        this.mUgmInternal = (UriGrantsManagerInternal) LocalServices.getService(UriGrantsManagerInternal.class);
        this.mInternal = new LocalService();
        this.mPendingStartActivityUids = new PendingStartActivityUids(context);
        this.mUseFifoUiScheduling = false;
        this.mEnableOffloadQueue = false;
        this.mFgOffloadBroadcastQueue = null;
        this.mBgOffloadBroadcastQueue = null;
        this.mBgBroadcastQueue = null;
        this.mFgBroadcastQueue = null;
        this.mComponentAliasResolver = new ComponentAliasResolver(this);
        if (CAM_LOW_WARNING_SUPPORT) {
            mWarnContext = context;
        }
        ITranActivityManagerService.Instance().onConstruct(context);
    }

    public ActivityManagerService(Context systemContext, ActivityTaskManagerService atm) {
        this.mGBMonitor = null;
        this.ANR_DUMP_HEAP_TIME = 120000L;
        this.mInstrumentationReporter = new InstrumentationReporter();
        this.mActiveInstrumentation = new ArrayList<>();
        this.mOomAdjProfiler = new OomAdjProfiler();
        this.mGlobalLock = this;
        this.mProcLock = new ActivityManagerProcLock();
        this.mNotifyOverlayChangedWhenWmsSet = false;
        BroadcastQueue[] broadcastQueueArr = new BroadcastQueue[4];
        this.mBroadcastQueues = broadcastQueueArr;
        this.mDeviceOwnerUid = -1;
        this.mCompanionAppUidsMap = new ArrayMap();
        this.mProfileOwnerUids = null;
        this.mActiveCameraUids = new IntArray(4);
        this.mPriorityDumper = new PriorityDump.PriorityDumper() { // from class: com.android.server.am.ActivityManagerService.1
            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpCritical(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                if (asProto) {
                    return;
                }
                ActivityManagerService.this.doDump(fd, pw, new String[]{ActivityTaskManagerService.DUMP_ACTIVITIES_CMD}, asProto);
                ActivityManagerService.this.doDump(fd, pw, new String[]{HostingRecord.HOSTING_TYPE_SERVICE, "all-platform-critical"}, asProto);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dumpNormal(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, new String[]{"-a", "--normal-priority"}, asProto);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public void dump(FileDescriptor fd, PrintWriter pw, String[] args, boolean asProto) {
                ActivityManagerService.this.doDump(fd, pw, args, asProto);
            }
        };
        this.mAmsExt = MtkSystemServiceFactory.getInstance().makeAmsExt();
        this.mTranAmsExt = TranSystemServiceFactory.getInstance().makeTranAmsExt();
        this.mAnrManager = MtkSystemServiceFactory.getInstance().makeAnrManager();
        this.mBackgroundAppIdAllowlist = new int[]{1002};
        PidMap pidMap = new PidMap();
        this.mPidsSelfLocked = pidMap;
        this.mImportantProcesses = new SparseArray<>();
        this.mProcessesOnHold = new ArrayList<>();
        this.mPersistentStartingProcesses = new ArrayList<>();
        this.mActivityLaunchObserver = new ActivityMetricsLaunchObserver() { // from class: com.android.server.am.ActivityManagerService.2
            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public void onActivityLaunched(long id, ComponentName name, int temperature) {
                ActivityManagerService.this.mAppProfiler.onActivityLaunched();
            }
        };
        this.mBinderTransactionTrackingEnabled = false;
        this.mAlreadyLoggedViolatedStacks = new HashSet<>();
        this.mRegisteredReceivers = new HashMap<>();
        this.mReceiverResolver = new IntentResolver<BroadcastFilter, BroadcastFilter>() { // from class: com.android.server.am.ActivityManagerService.3
            /* JADX DEBUG: Method merged with bridge method */
            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public boolean allowFilterResult(BroadcastFilter filter, List<BroadcastFilter> dest) {
                IBinder target = filter.receiverList.receiver.asBinder();
                for (int i = dest.size() - 1; i >= 0; i--) {
                    if (dest.get(i).receiverList.receiver.asBinder() == target) {
                        return false;
                    }
                }
                return true;
            }

            /* JADX DEBUG: Method merged with bridge method */
            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public BroadcastFilter newResult(Computer computer, BroadcastFilter filter, int match, int userId, long customFlags) {
                if (userId == -1 || filter.owningUserId == -1 || userId == filter.owningUserId) {
                    return (BroadcastFilter) super.newResult(computer, (Computer) filter, match, userId, customFlags);
                }
                return null;
            }

            /* JADX DEBUG: Method merged with bridge method */
            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public IntentFilter getIntentFilter(BroadcastFilter input) {
                return input;
            }

            /* JADX DEBUG: Method merged with bridge method */
            /* JADX INFO: Access modifiers changed from: protected */
            /* JADX WARN: Can't rename method to resolve collision */
            @Override // com.android.server.IntentResolver
            public BroadcastFilter[] newArray(int size) {
                return new BroadcastFilter[size];
            }

            /* JADX DEBUG: Method merged with bridge method */
            /* JADX INFO: Access modifiers changed from: protected */
            @Override // com.android.server.IntentResolver
            public boolean isPackageForFilter(String packageName, BroadcastFilter filter) {
                return packageName.equals(filter.packageName);
            }
        };
        this.mStickyBroadcasts = new SparseArray<>();
        this.mAssociations = new SparseArray<>();
        this.mBackupTargets = new SparseArray<>();
        this.mDeviceIdleAllowlist = new int[0];
        this.mDeviceIdleExceptIdleAllowlist = new int[0];
        this.mDeviceIdleTempAllowlist = new int[0];
        this.mPendingTempAllowlist = new PendingTempAllowlists(this);
        this.mFgsStartTempAllowList = new FgsTempAllowList<>();
        this.mFgsWhileInUseTempAllowList = new FgsTempAllowList<>();
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mWakefulness = new AtomicInteger(1);
        this.mLastIdleTime = SystemClock.uptimeMillis();
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mCurResumedAppLock = new Object();
        this.mForegroundPackages = new ProcessMap<>();
        this.mForegroundServiceStateListeners = new ArrayList<>();
        this.mBroadcastEventListeners = new CopyOnWriteArrayList<>();
        this.mBindServiceEventListeners = new CopyOnWriteArrayList<>();
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mOomAdjObserverLock = new Object();
        this.mAnrHelper = new AnrHelper(this);
        this.mBooted = false;
        this.mUidNetworkBlockedReasons = new SparseIntArray();
        this.mLastBinderHeavyHitterAutoSamplerStart = 0L;
        this.mResForbidPss = false;
        this.mDropboxRateLimiter = new DropboxRateLimiter();
        this.mCallingPid = 0;
        this.mAvailabilityCallback = new CameraManager.AvailabilityCallback() { // from class: com.android.server.am.ActivityManagerService.21
            @Override // android.hardware.camera2.CameraManager.AvailabilityCallback
            public void onCameraAvailable(String cameraId) {
                ActivityManagerService.this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService.21.1
                    @Override // java.lang.Runnable
                    public void run() {
                        ActivityManagerService.sendLowWarningBroadCast(2);
                    }
                });
            }

            @Override // android.hardware.camera2.CameraManager.AvailabilityCallback
            public void onCameraUnavailable(String cameraId) {
                ActivityManagerService.this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService.21.2
                    @Override // java.lang.Runnable
                    public void run() {
                        ActivityManagerService.sendLowWarningBroadCast(1);
                    }
                });
            }
        };
        LockGuard.installLock(this, 7);
        Injector injector = new Injector(systemContext);
        this.mInjector = injector;
        this.mContext = systemContext;
        ITranActivityManagerService.Instance().onConstruct(systemContext);
        this.mFactoryTest = FactoryTest.getMode();
        ActivityThread currentActivityThread = ActivityThread.currentActivityThread();
        this.mSystemThread = currentActivityThread;
        ContextImpl systemUiContext = currentActivityThread.getSystemUiContext();
        this.mUiContext = systemUiContext;
        Slog.i(TAG, "Memory class: " + ActivityManager.staticGetMemoryClass());
        ServiceThread serviceThread = new ServiceThread(TAG, -2, false);
        this.mHandlerThread = serviceThread;
        serviceThread.start();
        MainHandler mainHandler = new MainHandler(serviceThread.getLooper());
        this.mHandler = mainHandler;
        Handler uiHandler = injector.getUiHandler(this);
        this.mUiHandler = uiHandler;
        ServiceThread serviceThread2 = new ServiceThread("ActivityManager:procStart", -2, false);
        this.mProcStartHandlerThread = serviceThread2;
        serviceThread2.start();
        this.mProcStartHandler = new ProcessList.ProcStartHandler(this, serviceThread2.getLooper());
        this.mConstants = new ActivityManagerConstants(systemContext, this, mainHandler);
        ActiveUids activeUids = new ActiveUids(this, true);
        PlatformCompat platformCompat = (PlatformCompat) ServiceManager.getService("platform_compat");
        this.mPlatformCompat = platformCompat;
        ProcessList processList = injector.getProcessList(this);
        this.mProcessList = processList;
        processList.init(this, activeUids, platformCompat);
        this.mAppProfiler = new AppProfiler(this, BackgroundThread.getHandler().getLooper(), new LowMemDetector(this));
        this.mPhantomProcessList = new PhantomProcessList(this);
        this.mOomAdjuster = new OomAdjuster(this, processList, activeUids);
        if (Build.ENABLE_GB_MON_RECLAIM) {
            this.mGBMonitor = TranSystemServiceFactory.getInstance().makeTranGraphicBufferMonitor(systemContext, this, pidMap);
        }
        BroadcastConstants foreConstants = new BroadcastConstants("bcast_fg_constants");
        foreConstants.TIMEOUT = BROADCAST_FG_TIMEOUT;
        BroadcastConstants backConstants = new BroadcastConstants("bcast_bg_constants");
        int i = BROADCAST_BG_TIMEOUT;
        backConstants.TIMEOUT = i;
        BroadcastConstants offloadConstants = new BroadcastConstants("bcast_offload_constants");
        offloadConstants.TIMEOUT = i;
        offloadConstants.SLOW_TIME = 2147483647L;
        this.mEnableOffloadQueue = SystemProperties.getBoolean("persist.device_config.activity_manager_native_boot.offload_queue_enabled", true);
        BroadcastQueue broadcastQueue = new BroadcastQueue(this, mainHandler, "foreground", foreConstants, false);
        this.mFgBroadcastQueue = broadcastQueue;
        BroadcastQueue broadcastQueue2 = new BroadcastQueue(this, mainHandler, "background", backConstants, true);
        this.mBgBroadcastQueue = broadcastQueue2;
        BroadcastQueue broadcastQueue3 = new BroadcastQueue(this, mainHandler, "offload_bg", offloadConstants, true);
        this.mBgOffloadBroadcastQueue = broadcastQueue3;
        BroadcastQueue broadcastQueue4 = new BroadcastQueue(this, mainHandler, "offload_fg", foreConstants, true);
        this.mFgOffloadBroadcastQueue = broadcastQueue4;
        broadcastQueueArr[0] = broadcastQueue;
        broadcastQueueArr[1] = broadcastQueue2;
        broadcastQueueArr[2] = broadcastQueue3;
        broadcastQueueArr[3] = broadcastQueue4;
        this.mServices = new ActiveServices(this);
        this.mCpHelper = new ContentProviderHelper(this, true);
        PackageWatchdog packageWatchdog = PackageWatchdog.getInstance(systemUiContext);
        this.mPackageWatchdog = packageWatchdog;
        this.mAppErrors = new AppErrors(systemUiContext, this, packageWatchdog);
        this.mUidObserverController = new UidObserverController(uiHandler);
        File systemDir = SystemServiceManager.ensureSystemDir();
        BackgroundThread.get();
        BatteryStatsService batteryStatsService = new BatteryStatsService(systemContext, systemDir, BackgroundThread.getHandler());
        this.mBatteryStatsService = batteryStatsService;
        batteryStatsService.getActiveStatistics().readLocked();
        batteryStatsService.scheduleWriteToDisk();
        this.mOnBattery = ActivityManagerDebugConfig.DEBUG_POWER ? true : batteryStatsService.getActiveStatistics().getIsOnBattery();
        batteryStatsService.getActiveStatistics().setCallback(this);
        this.mOomAdjProfiler.batteryPowerChanged(this.mOnBattery);
        this.mProcessStats = new ProcessStatsService(this, new File(systemDir, "procstats"));
        this.mAppOpsService = injector.getAppOpsService(new File(systemDir, "appops.xml"), mainHandler);
        this.mUgmInternal = (UriGrantsManagerInternal) LocalServices.getService(UriGrantsManagerInternal.class);
        UserController userController = new UserController(this);
        this.mUserController = userController;
        PendingIntentController pendingIntentController = new PendingIntentController(serviceThread.getLooper(), userController, this.mConstants);
        this.mPendingIntentController = pendingIntentController;
        this.mAppRestrictionController = new AppRestrictionController(systemContext, this);
        this.mUseFifoUiScheduling = SystemProperties.getInt("sys.use_fifo_ui", 0) != 0;
        this.mTrackingAssociations = "1".equals(SystemProperties.get("debug.track-associations"));
        IntentFirewall intentFirewall = new IntentFirewall(new IntentFirewallInterface(), mainHandler);
        this.mIntentFirewall = intentFirewall;
        this.mActivityTaskManager = atm;
        atm.initialize(intentFirewall, pendingIntentController, DisplayThread.get().getLooper());
        this.mAtmInternal = (ActivityTaskManagerInternal) LocalServices.getService(ActivityTaskManagerInternal.class);
        this.mHiddenApiBlacklist = new HiddenApiSettings(mainHandler, systemContext);
        this.mSdkSandboxSettings = new SdkSandboxSettings(systemContext);
        Watchdog.getInstance().addMonitor(this);
        Watchdog.getInstance().addThread(mainHandler);
        updateOomAdjLocked("updateOomAdj_meh");
        try {
            Process.setThreadGroupAndCpuset(BackgroundThread.get().getThreadId(), 2);
            Process.setThreadGroupAndCpuset(this.mOomAdjuster.mCachedAppOptimizer.mCachedAppOptimizerThread.getThreadId(), 2);
        } catch (Exception e) {
            Slog.w(TAG, "Setting background thread cpuset failed");
        }
        this.mInternal = new LocalService();
        this.mPendingStartActivityUids = new PendingStartActivityUids(this.mContext);
        this.mTraceErrorLogger = new TraceErrorLogger();
        this.mComponentAliasResolver = new ComponentAliasResolver(this);
        if (CAM_LOW_WARNING_SUPPORT) {
            mWarnContext = this.mContext;
        }
        ITranActivityManagerService.Instance().onCloudConfigInit(this.mContext);
    }

    public void setSystemServiceManager(SystemServiceManager mgr) {
        this.mSystemServiceManager = mgr;
    }

    public void setInstaller(Installer installer) {
        this.mInstaller = installer;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void start() {
        this.mBatteryStatsService.publish();
        this.mAppOpsService.publish();
        this.mProcessStats.publish();
        Slog.d("AppOps", "AppOpsService published");
        LocalServices.addService(ActivityManagerInternal.class, this.mInternal);
        LocalManagerRegistry.addManager(ActivityManagerLocal.class, this.mInternal);
        this.mActivityTaskManager.onActivityManagerInternalAdded();
        this.mPendingIntentController.onActivityManagerInternalAdded();
        this.mAppProfiler.onActivityManagerInternalAdded();
        this.mAnrManager.startAnrManagerService(MY_PID);
        this.mAmsExt.startDuraSpeedService(this.mContext);
        CriticalEventLog.init();
        ITranActivityManagerService.Instance().hookStart();
    }

    public void initPowerManagement() {
        this.mActivityTaskManager.onInitPowerManagement();
        this.mBatteryStatsService.initPowerManagement();
        this.mLocalPowerManager = (PowerManagerInternal) LocalServices.getService(PowerManagerInternal.class);
    }

    private ArraySet<String> getBackgroundLaunchBroadcasts() {
        if (this.mBackgroundLaunchBroadcasts == null) {
            this.mBackgroundLaunchBroadcasts = SystemConfig.getInstance().getAllowImplicitBroadcasts();
        }
        return this.mBackgroundLaunchBroadcasts;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void requireAllowedAssociationsLocked(String packageName) {
        ensureAllowedAssociations();
        if (this.mAllowedAssociations.get(packageName) == null) {
            this.mAllowedAssociations.put(packageName, new PackageAssociationInfo(packageName, new ArraySet(), false));
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean validateAssociationAllowedLocked(String pkg1, int uid1, String pkg2, int uid2) {
        ensureAllowedAssociations();
        if (uid1 == uid2 || UserHandle.getAppId(uid1) == 1000 || UserHandle.getAppId(uid2) == 1000) {
            return true;
        }
        PackageAssociationInfo pai = this.mAllowedAssociations.get(pkg1);
        if (pai != null && !pai.isPackageAssociationAllowed(pkg2)) {
            return false;
        }
        PackageAssociationInfo pai2 = this.mAllowedAssociations.get(pkg2);
        if (pai2 == null || pai2.isPackageAssociationAllowed(pkg1)) {
            return true;
        }
        return false;
    }

    private void ensureAllowedAssociations() {
        if (this.mAllowedAssociations == null) {
            ArrayMap<String, ArraySet<String>> allowedAssociations = SystemConfig.getInstance().getAllowedAssociations();
            this.mAllowedAssociations = new ArrayMap<>(allowedAssociations.size());
            getPackageManagerInternal();
            for (int i = 0; i < allowedAssociations.size(); i++) {
                String pkg = allowedAssociations.keyAt(i);
                ArraySet<String> asc = allowedAssociations.valueAt(i);
                boolean isDebuggable = false;
                try {
                    ApplicationInfo ai = AppGlobals.getPackageManager().getApplicationInfo(pkg, 131072L, 0);
                    if (ai != null) {
                        isDebuggable = (ai.flags & 2) != 0;
                    }
                } catch (RemoteException e) {
                }
                this.mAllowedAssociations.put(pkg, new PackageAssociationInfo(pkg, asc, isDebuggable));
            }
        }
    }

    private void updateAssociationForApp(ApplicationInfo appInfo) {
        ensureAllowedAssociations();
        PackageAssociationInfo pai = this.mAllowedAssociations.get(appInfo.packageName);
        if (pai != null) {
            pai.setDebuggable((appInfo.flags & 2) != 0);
        }
    }

    public boolean onTransact(int code, Parcel data, Parcel reply, int flags) throws RemoteException {
        if (code == 1599295570) {
            ArrayList<IBinder> procs = new ArrayList<>();
            synchronized (this.mProcLock) {
                try {
                    boostPriorityForProcLockedSection();
                    ArrayMap<String, SparseArray<ProcessRecord>> pmap = this.mProcessList.getProcessNamesLOSP().getMap();
                    int numOfNames = pmap.size();
                    for (int ip = 0; ip < numOfNames; ip++) {
                        SparseArray<ProcessRecord> apps = pmap.valueAt(ip);
                        int numOfApps = apps.size();
                        for (int ia = 0; ia < numOfApps; ia++) {
                            ProcessRecord app = apps.valueAt(ia);
                            IApplicationThread thread = app.getThread();
                            if (thread != null) {
                                procs.add(thread.asBinder());
                            }
                        }
                    }
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            int N = procs.size();
            for (int i = 0; i < N; i++) {
                Parcel data2 = Parcel.obtain();
                try {
                    try {
                        procs.get(i).transact(1599295570, data2, null, 1);
                    } catch (RemoteException e) {
                    }
                } catch (RemoteException e2) {
                }
                data2.recycle();
            }
        }
        if (code == 13152) {
            data.enforceInterface("android.app.IActivityManager");
            String str = readPackageNameFromProcfs(data.readInt());
            reply.writeString(str);
            return true;
        } else if (code == 13153) {
            exceptionReport();
            return true;
        } else if (code == 13146) {
            if (Binder.getCallingPid() != MY_PID) {
                Slog.w(TAG, "calling pid isn't system.");
                return false;
            }
            data.enforceInterface("android.app.IActivityManager");
            int pid = data.readInt();
            boolean javapid = data.readBoolean();
            ArrayList<Integer> javaPids = new ArrayList<>();
            if (javapid) {
                javaPids.add(Integer.valueOf(pid));
                dumpStackTraces(javaPids, null, null, null, null);
            } else {
                ArrayList<Integer> nativePids = new ArrayList<>();
                nativePids.add(Integer.valueOf(pid));
                dumpStackTraces(javaPids, null, null, nativePids, null);
            }
            int killProc = 1;
            synchronized (this.mPidsSelfLocked) {
                ProcessRecord proc = this.mPidsSelfLocked.get(pid);
                if (proc != null && !proc.isKilledByAm() && proc.mState.getSetAdj() == 0 && (proc.mState.hasForegroundActivities() || proc.mState.hasOverlayUi() || proc.mState.hasTopUi())) {
                    killProc = 0;
                    Slog.w(TAG, "foregroundActivities:" + proc.mState.hasForegroundActivities() + ",hasOverlayUi:" + proc.mState.hasOverlayUi());
                }
            }
            reply.writeInt(killProc);
            reply.writeNoException();
            return true;
        } else {
            try {
                return super.onTransact(code, data, reply, flags);
            } catch (RuntimeException e3) {
                if (!(e3 instanceof SecurityException) && !(e3 instanceof IllegalArgumentException) && !(e3 instanceof IllegalStateException)) {
                    if (this.mAmsExt.IsBuildInApp()) {
                        Slog.wtf(TAG, "Activity Manager Crash. UID:" + Binder.getCallingUid() + " PID:" + Binder.getCallingPid() + " TRANS:" + code, e3);
                    } else {
                        Slog.e(TAG, "Activity Manager Crash. UID:" + Binder.getCallingUid() + " PID:" + Binder.getCallingPid() + " TRANS:" + code, e3);
                    }
                }
                throw e3;
            }
        }
    }

    public void exceptionReport() {
        String rebootVInfo = SystemProperties.get(AEEV_DEBUG, "");
        String[] resultV = rebootVInfo.split(SliceClientPermissions.SliceAuthority.DELIMITER);
        String AEEV_OLD_ERROR = SystemProperties.get(AEEV_OLD_ERROR_PROP, "");
        ITranActivityManagerService.Instance().init(this.mContext);
        if (resultV != null && resultV.length > 4 && !AEEV_OLD_ERROR.equals(resultV[4])) {
            ITranActivityManagerService.Instance().reportReboot(resultV[4]);
            SystemProperties.set(AEEV_OLD_ERROR_PROP, resultV[4]);
        }
        String rebootInfo = SystemProperties.get(AEE_DEBUG, "");
        String[] result = rebootInfo.split(SliceClientPermissions.SliceAuthority.DELIMITER);
        String AEE_OLD_ERROR = SystemProperties.get(AEE_OLD_ERROR_PROP, "");
        if (result != null && result.length > 3 && !AEE_OLD_ERROR.equals(result[3])) {
            ITranActivityManagerService.Instance().reportReboot(result[3]);
            SystemProperties.set(AEE_OLD_ERROR_PROP, result[3]);
        }
    }

    public String readPackageNameFromProcfs(int pid) {
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord curProc = this.mPidsSelfLocked.get(pid);
            if (curProc.processName != null) {
                return curProc.processName;
            }
            return "";
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void updateCpuStats() {
        this.mAppProfiler.updateCpuStats();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void updateCpuStatsNow() {
        this.mAppProfiler.updateCpuStatsNow();
    }

    public void batteryNeedsCpuUpdate() {
        updateCpuStatsNow();
    }

    public void batteryPowerChanged(boolean onBattery) {
        updateCpuStatsNow();
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                this.mOnBattery = ActivityManagerDebugConfig.DEBUG_POWER ? true : onBattery;
                this.mOomAdjProfiler.batteryPowerChanged(onBattery);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public void batteryStatsReset() {
        this.mOomAdjProfiler.reset();
    }

    public void batterySendBroadcast(Intent intent) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                broadcastIntentLocked(null, null, null, intent, null, null, 0, null, null, null, null, null, -1, null, false, false, -1, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    private ArrayMap<String, IBinder> getCommonServicesLocked(boolean isolated) {
        if (isolated) {
            if (this.mIsolatedAppBindArgs == null) {
                ArrayMap<String, IBinder> arrayMap = new ArrayMap<>(1);
                this.mIsolatedAppBindArgs = arrayMap;
                addServiceToMap(arrayMap, "package");
                addServiceToMap(this.mIsolatedAppBindArgs, "permissionmgr");
            }
            return this.mIsolatedAppBindArgs;
        }
        if (this.mAppBindArgs == null) {
            ArrayMap<String, IBinder> arrayMap2 = new ArrayMap<>();
            this.mAppBindArgs = arrayMap2;
            addServiceToMap(arrayMap2, "package");
            addServiceToMap(this.mAppBindArgs, "permissionmgr");
            addServiceToMap(this.mAppBindArgs, "window");
            addServiceToMap(this.mAppBindArgs, "alarm");
            addServiceToMap(this.mAppBindArgs, "display");
            addServiceToMap(this.mAppBindArgs, "network_management");
            addServiceToMap(this.mAppBindArgs, "connectivity");
            addServiceToMap(this.mAppBindArgs, "accessibility");
            addServiceToMap(this.mAppBindArgs, "input_method");
            addServiceToMap(this.mAppBindArgs, "input");
            addServiceToMap(this.mAppBindArgs, "graphicsstats");
            addServiceToMap(this.mAppBindArgs, "appops");
            addServiceToMap(this.mAppBindArgs, ActivityTaskManagerInternal.ASSIST_KEY_CONTENT);
            addServiceToMap(this.mAppBindArgs, "jobscheduler");
            addServiceToMap(this.mAppBindArgs, "notification");
            addServiceToMap(this.mAppBindArgs, "vibrator");
            addServiceToMap(this.mAppBindArgs, "account");
            addServiceToMap(this.mAppBindArgs, "power");
            addServiceToMap(this.mAppBindArgs, "user");
            addServiceToMap(this.mAppBindArgs, "mount");
            addServiceToMap(this.mAppBindArgs, "platform_compat");
        }
        return this.mAppBindArgs;
    }

    private static void addServiceToMap(ArrayMap<String, IBinder> map, String name) {
        IBinder service = ServiceManager.getService(name);
        if (service != null) {
            map.put(name, service);
        }
    }

    public void setFocusedRootTask(int taskId) {
        this.mActivityTaskManager.setFocusedRootTask(taskId);
    }

    public void registerTaskStackListener(ITaskStackListener listener) {
        this.mActivityTaskManager.registerTaskStackListener(listener);
    }

    public void unregisterTaskStackListener(ITaskStackListener listener) {
        this.mActivityTaskManager.unregisterTaskStackListener(listener);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final void updateLruProcessLocked(ProcessRecord app, boolean activityChange, ProcessRecord client) {
        this.mProcessList.updateLruProcessLocked(app, activityChange, client);
    }

    final void removeLruProcessLocked(ProcessRecord app) {
        this.mProcessList.removeLruProcessLocked(app);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final ProcessRecord getProcessRecordLocked(String processName, int uid) {
        return this.mProcessList.getProcessRecordLocked(processName, uid);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final ProcessMap<ProcessRecord> getProcessNamesLOSP() {
        return this.mProcessList.getProcessNamesLOSP();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void notifyPackageUse(String packageName, int reason) {
        getPackageManagerInternal().notifyPackageUse(packageName, reason);
    }

    boolean startIsolatedProcess(String entryPoint, String[] entryPointArgs, String processName, String abiOverride, int uid, Runnable crashHandler) {
        boolean z;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ApplicationInfo info = new ApplicationInfo();
                info.uid = 1000;
                info.processName = processName;
                info.className = entryPoint;
                info.packageName = PackageManagerService.PLATFORM_PACKAGE_NAME;
                info.seInfoUser = SELinuxUtil.COMPLETE_STR;
                info.targetSdkVersion = Build.VERSION.SDK_INT;
                ProcessRecord proc = this.mProcessList.startProcessLocked(processName, info, false, 0, sNullHostingRecord, 0, true, true, uid, false, 0, null, abiOverride, entryPoint, entryPointArgs, crashHandler);
                z = proc != null;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final ProcessRecord startSdkSandboxProcessLocked(String processName, ApplicationInfo info, boolean knownToBeDead, int intentFlags, HostingRecord hostingRecord, int zygotePolicyFlags, int sdkSandboxUid, String sdkSandboxClientAppPackage) {
        return this.mProcessList.startProcessLocked(processName, info, knownToBeDead, intentFlags, hostingRecord, zygotePolicyFlags, false, false, 0, true, sdkSandboxUid, sdkSandboxClientAppPackage, null, null, null, null);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final ProcessRecord startProcessLocked(String processName, ApplicationInfo info, boolean knownToBeDead, int intentFlags, HostingRecord hostingRecord, int zygotePolicyFlags, boolean allowWhileBooting, boolean isolated) {
        return this.mProcessList.startProcessLocked(processName, info, knownToBeDead, intentFlags, hostingRecord, zygotePolicyFlags, allowWhileBooting, isolated, 0, false, 0, null, null, null, null, null);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean isAllowedWhileBooting(ApplicationInfo ai) {
        return (ai.flags & 8) != 0;
    }

    void updateBatteryStats(ComponentName activity, int uid, int userId, boolean resumed) {
        if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH) {
            Slog.d(TAG_SWITCH, "updateBatteryStats: comp=" + activity + "res=" + resumed);
        }
        this.mBatteryStatsService.updateBatteryStatsOnActivityUsage(activity.getPackageName(), activity.getShortClassName(), uid, userId, resumed);
    }

    public void updateActivityUsageStats(ComponentName activity, int userId, int event, IBinder appToken, ComponentName taskRoot) {
        if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH) {
            Slog.d(TAG_SWITCH, "updateActivityUsageStats: comp=" + activity + " hash=" + appToken.hashCode() + " event=" + event);
        }
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.reportEvent(activity, userId, event, appToken.hashCode(), taskRoot);
            if (event == 1) {
                this.mUsageStatsService.reportEvent(activity.getPackageName(), userId, 31);
            }
        }
        ContentCaptureManagerInternal contentCaptureService = this.mContentCaptureService;
        if (contentCaptureService != null && (event == 2 || event == 1 || event == 23 || event == 24)) {
            contentCaptureService.notifyActivityEvent(userId, activity, event);
        }
        if (this.mVoiceInteractionManagerProvider != null) {
            if (event == 2 || event == 1 || event == 23) {
                this.mVoiceInteractionManagerProvider.notifyActivityEventChanged();
            }
        }
    }

    public void updateActivityUsageStats(String packageName, int userId, int event) {
        if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH) {
            Slog.d(TAG_SWITCH, "updateActivityUsageStats: package=" + packageName + " event=" + event);
        }
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.reportEvent(packageName, userId, event);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void updateForegroundServiceUsageStats(ComponentName service, int userId, boolean started) {
        if (ActivityTaskManagerDebugConfig.DEBUG_SWITCH) {
            Slog.d(TAG_SWITCH, "updateForegroundServiceUsageStats: comp=" + service + " started=" + started);
        }
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.reportEvent(service, userId, started ? 19 : 20, 0, null);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public CompatibilityInfo compatibilityInfoForPackage(ApplicationInfo ai) {
        return this.mAtmInternal.compatibilityInfoForPackage(ai);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void enforceNotIsolatedCaller(String caller) {
        if (UserHandle.isIsolated(Binder.getCallingUid())) {
            throw new SecurityException("Isolated process not allowed to call " + caller);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void enforceNotIsolatedOrSdkSandboxCaller(String caller) {
        enforceNotIsolatedCaller(caller);
        if (Process.isSdkSandboxUid(Binder.getCallingUid())) {
            throw new SecurityException("SDK sandbox process not allowed to call " + caller);
        }
    }

    private void enforceAllowedToStartOrBindServiceIfSdkSandbox(Intent intent) {
        if (Process.isSdkSandboxUid(Binder.getCallingUid())) {
            SdkSandboxManagerLocal sdkSandboxManagerLocal = (SdkSandboxManagerLocal) LocalManagerRegistry.getManager(SdkSandboxManagerLocal.class);
            if (sdkSandboxManagerLocal != null) {
                sdkSandboxManagerLocal.enforceAllowedToStartOrBindService(intent);
                return;
            }
            throw new IllegalStateException("SdkSandboxManagerLocal not found when checking whether SDK sandbox uid may start or bind to a service.");
        }
    }

    public void setPackageScreenCompatMode(String packageName, int mode) {
        this.mActivityTaskManager.setPackageScreenCompatMode(packageName, mode);
    }

    private boolean hasUsageStatsPermission(String callingPackage, int callingUid, int callingPid) {
        int mode = this.mAppOpsService.noteOperation(43, callingUid, callingPackage, null, false, "", false).getOpMode();
        return mode == 3 ? checkPermission("android.permission.PACKAGE_USAGE_STATS", callingPid, callingUid) == 0 : mode == 0;
    }

    private boolean hasUsageStatsPermission(String callingPackage) {
        return hasUsageStatsPermission(callingPackage, Binder.getCallingUid(), Binder.getCallingPid());
    }

    private void enforceUsageStatsPermission(String callingPackage, int callingUid, int callingPid, String operation) {
        if (!hasUsageStatsPermission(callingPackage, callingUid, callingPid)) {
            String errorMsg = "Permission denial for <" + operation + "> from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " which requires PACKAGE_USAGE_STATS permission";
            throw new SecurityException(errorMsg);
        }
    }

    public int getPackageProcessState(final String packageName, String callingPackage) {
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getPackageProcessState");
        }
        final int[] procState = {20};
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                this.mProcessList.forEachLruProcessesLOSP(false, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda14
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.lambda$getPackageProcessState$0(procState, packageName, (ProcessRecord) obj);
                    }
                });
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return procState[0];
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ void lambda$getPackageProcessState$0(int[] procState, String packageName, ProcessRecord proc) {
        if (procState[0] > proc.mState.getSetProcState()) {
            if (proc.getPkgList().containsKey(packageName) || (proc.getPkgDeps() != null && proc.getPkgDeps().contains(packageName))) {
                procState[0] = proc.mState.getSetProcState();
            }
        }
    }

    public boolean setProcessMemoryTrimLevel(String process, int userId, int level) throws RemoteException {
        if (!isCallerShell()) {
            throw new SecurityException("Only shell can call it");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord app = findProcessLOSP(process, userId, "setProcessMemoryTrimLevel");
                if (app == null) {
                    throw new IllegalArgumentException("Unknown process: " + process);
                }
                IApplicationThread thread = app.getThread();
                if (thread == null) {
                    throw new IllegalArgumentException("Process has no app thread");
                }
                if (app.mProfile.getTrimMemoryLevel() >= level) {
                    throw new IllegalArgumentException("Unable to set a higher trim level than current level");
                }
                if (level >= 20 && app.mState.getCurProcState() <= 6) {
                    throw new IllegalArgumentException("Unable to set a background trim level on a foreground process");
                }
                thread.scheduleTrimMemory(level);
                synchronized (this.mProcLock) {
                    boostPriorityForProcLockedSection();
                    app.mProfile.setTrimMemoryLevel(level);
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return true;
    }

    void dispatchOomAdjObserver(String msg) {
        OomAdjObserver observer;
        synchronized (this.mOomAdjObserverLock) {
            observer = this.mCurOomAdjObserver;
        }
        if (observer != null) {
            observer.onOomAdjMessage(msg);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void setOomAdjObserver(int uid, OomAdjObserver observer) {
        synchronized (this.mOomAdjObserverLock) {
            this.mCurOomAdjUid = uid;
            this.mCurOomAdjObserver = observer;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void clearOomAdjObserver() {
        synchronized (this.mOomAdjObserverLock) {
            this.mCurOomAdjUid = -1;
            this.mCurOomAdjObserver = null;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void reportUidInfoMessageLocked(String tag, String msg, int uid) {
        Slog.i(TAG, msg);
        synchronized (this.mOomAdjObserverLock) {
            if (this.mCurOomAdjObserver != null && uid == this.mCurOomAdjUid) {
                this.mUiHandler.obtainMessage(70, msg).sendToTarget();
            }
        }
    }

    @Deprecated
    public int startActivity(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions) {
        return this.mActivityTaskManager.startActivity(caller, callingPackage, null, intent, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions);
    }

    public int startActivityWithFeature(IApplicationThread caller, String callingPackage, String callingFeatureId, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions) {
        return this.mActivityTaskManager.startActivity(caller, callingPackage, callingFeatureId, intent, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions);
    }

    @Deprecated
    public final int startActivityAsUser(IApplicationThread caller, String callingPackage, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {
        return startActivityAsUserWithFeature(caller, callingPackage, null, intent, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, userId);
    }

    public final int startActivityAsUserWithFeature(IApplicationThread caller, String callingPackage, String callingFeatureId, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {
        return this.mActivityTaskManager.startActivityAsUser(caller, callingPackage, callingFeatureId, intent, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, userId);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public WaitResult startActivityAndWait(IApplicationThread caller, String callingPackage, String callingFeatureId, Intent intent, String resolvedType, IBinder resultTo, String resultWho, int requestCode, int startFlags, ProfilerInfo profilerInfo, Bundle bOptions, int userId) {
        return this.mActivityTaskManager.startActivityAndWait(caller, callingPackage, callingFeatureId, intent, resolvedType, resultTo, resultWho, requestCode, startFlags, profilerInfo, bOptions, userId);
    }

    public final int startActivityFromRecents(int taskId, Bundle bOptions) {
        return this.mActivityTaskManager.startActivityFromRecents(taskId, bOptions);
    }

    public final boolean finishActivity(IBinder token, int resultCode, Intent resultData, int finishTask) {
        return ActivityClient.getInstance().finishActivity(token, resultCode, resultData, finishTask);
    }

    public void setRequestedOrientation(IBinder token, int requestedOrientation) {
        ActivityClient.getInstance().setRequestedOrientation(token, requestedOrientation);
    }

    public final void finishHeavyWeightApp() {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            String msg = "Permission Denial: finishHeavyWeightApp() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
        this.mAtmInternal.finishHeavyWeightApp();
    }

    public void crashApplicationWithType(int uid, int initialPid, String packageName, int userId, String message, boolean force, int exceptionTypeId) {
        crashApplicationWithTypeWithExtras(uid, initialPid, packageName, userId, message, force, exceptionTypeId, null);
    }

    public void crashApplicationWithTypeWithExtras(int uid, int initialPid, String packageName, int userId, String message, boolean force, int exceptionTypeId, Bundle extras) {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            String msg = "Permission Denial: crashApplication() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mAppErrors.scheduleAppCrashLocked(uid, initialPid, packageName, userId, message, force, exceptionTypeId, extras);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final void handleAppDiedLocked(final ProcessRecord app, int pid, boolean restarting, boolean allowRestart, boolean fromBinderDied) {
        boolean kept = cleanUpApplicationRecordLocked(app, pid, restarting, allowRestart, -1, false, fromBinderDied);
        this.mAmsExt.onNotifyAppCrash(pid, app.uid, app.info.packageName);
        if (!kept && !restarting) {
            removeLruProcessLocked(app);
            if (pid > 0) {
                ProcessList.remove(pid);
            }
        }
        this.mAppProfiler.onAppDiedLocked(app);
        this.mAtmInternal.handleAppDied(app.getWindowProcessController(), restarting, new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda5
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.m1047x12c13485(app);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$handleAppDiedLocked$1$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1047x12c13485(ProcessRecord app) {
        Slog.w(TAG, "Crash of app " + app.processName + " running instrumentation " + app.getActiveInstrumentation().mClass);
        Bundle info = new Bundle();
        info.putString("shortMsg", "Process crashed.");
        finishInstrumentationLocked(app, 0, info);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public ProcessRecord getRecordForAppLOSP(IApplicationThread thread) {
        if (thread == null) {
            return null;
        }
        ProcessRecord record = this.mProcessList.getLRURecordForAppLOSP(thread);
        if (record != null) {
            return record;
        }
        IBinder threadBinder = thread.asBinder();
        ArrayMap<String, SparseArray<ProcessRecord>> pmap = this.mProcessList.getProcessNamesLOSP().getMap();
        for (int i = pmap.size() - 1; i >= 0; i--) {
            SparseArray<ProcessRecord> procs = pmap.valueAt(i);
            for (int j = procs.size() - 1; j >= 0; j--) {
                ProcessRecord proc = procs.valueAt(j);
                IApplicationThread procThread = proc.getThread();
                if (procThread != null && procThread.asBinder() == threadBinder) {
                    Slog.wtf(TAG, "getRecordForApp: exists in name list but not in LRU list: " + proc);
                    return proc;
                }
            }
        }
        return null;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final void appDiedLocked(ProcessRecord app, String reason) {
        appDiedLocked(app, app.getPid(), app.getThread(), false, reason);
    }

    /* JADX WARN: Removed duplicated region for block: B:72:0x0289  */
    /* JADX WARN: Removed duplicated region for block: B:88:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    final void appDiedLocked(ProcessRecord app, int pid, IApplicationThread thread, boolean fromBinderDied, String reason) {
        ProcessRecord curProc;
        int setProcState;
        int i;
        synchronized (this.mPidsSelfLocked) {
            try {
                curProc = this.mPidsSelfLocked.get(pid);
            } catch (Throwable th) {
                th = th;
                while (true) {
                    try {
                        break;
                    } catch (Throwable th2) {
                        th = th2;
                    }
                }
                throw th;
            }
        }
        if (curProc != app) {
            if (!fromBinderDied || !this.mProcessList.handleDyingAppDeathLocked(app, pid)) {
                Slog.w(TAG, "Spurious death for " + app + ", curProc for " + pid + ": " + curProc);
                return;
            }
            return;
        }
        this.mBatteryStatsService.noteProcessDied(app.info.uid, pid);
        if (!app.isKilled()) {
            if (!fromBinderDied) {
                Process.killProcessQuiet(pid);
                this.mProcessList.noteAppKill(app, 13, 0, reason);
            }
            ProcessList.killProcessGroup(app.uid, pid);
            synchronized (this.mProcLock) {
                try {
                    boostPriorityForProcLockedSection();
                    app.setKilled(true);
                } catch (Throwable th3) {
                    resetPriorityAfterProcLockedSection();
                    throw th3;
                }
            }
            resetPriorityAfterProcLockedSection();
        }
        int setAdj = app.mState.getSetAdj();
        int setProcState2 = app.mState.getSetProcState();
        if (app.getPid() == pid) {
            IApplicationThread appThread = app.getThread();
            if (appThread == null) {
                setProcState = setProcState2;
                i = pid;
            } else if (appThread.asBinder() != thread.asBinder()) {
                setProcState = setProcState2;
                i = pid;
            } else {
                boolean doLowMem = app.getActiveInstrumentation() == null;
                if (!app.isKilledByAm()) {
                    reportUidInfoMessageLocked(TAG, "Process " + app.processName + " (pid " + pid + ") has died: " + ProcessList.makeOomAdjString(setAdj, true) + " " + ProcessList.makeProcStateString(setProcState2), app.info.uid);
                    this.mAppProfiler.setAllowLowerMemLevelLocked(true);
                    this.mAmsExt.onAppProcessDied(this.mContext, app, app.info, app.userId, this.mProcessList.mLruProcesses, ProcessList.makeOomAdjString(setAdj, true) + " " + ProcessList.makeProcStateString(setProcState2));
                } else {
                    this.mAppProfiler.setAllowLowerMemLevelLocked(false);
                    doLowMem = false;
                }
                ITranActivityManagerService.Instance().hookProcDied(app.processWrapper);
                ITranActivityManagerService.Instance().hookProcDied(app.mPid);
                EventLogTags.writeAmProcDied(app.userId, pid, app.processName, setAdj, setProcState2);
                if (ActivityTaskManagerDebugConfig.DEBUG_CLEANUP) {
                    Slog.v(TAG_CLEANUP, "Dying app: " + app + ", pid: " + pid + ", thread: " + thread.asBinder());
                }
                if (ITranGriffinFeature.Instance().isGriffinSupport()) {
                    boolean limitRestart = ITranActivityManagerService.Instance().hookLimitDiedProcessRestart(app, app != null ? app.processWrapper : null);
                    if (limitRestart) {
                        handleAppDiedLocked(app, pid, false, false, fromBinderDied);
                    } else {
                        handleAppDiedLocked(app, pid, false, true, fromBinderDied);
                    }
                } else {
                    handleAppDiedLocked(app, pid, false, true, fromBinderDied);
                }
                if (doLowMem) {
                    updateOomAdjLocked("updateOomAdj_processEnd");
                }
                if (doLowMem) {
                    this.mAppProfiler.doLowMemReportIfNeededLocked(app);
                }
                ITranPowerManagerService.Instance().notifySourceConnectDied(app.info.uid, app.processName);
                if (MemoryStatUtil.hasMemcg()) {
                    FrameworkStatsLog.write(65, SystemClock.elapsedRealtime());
                    return;
                }
                return;
            }
        } else {
            setProcState = setProcState2;
            i = pid;
        }
        if (app.getPid() != i) {
            reportUidInfoMessageLocked(TAG, "Process " + app.processName + " (pid " + i + ") has died and restarted (pid " + app.getPid() + ").", app.info.uid);
            ITranActivityManagerService.Instance().hookProcDied(app.processWrapper);
            ITranActivityManagerService.Instance().hookProcDied(app.mPid);
            EventLogTags.writeAmProcDied(app.userId, app.getPid(), app.processName, setAdj, setProcState);
        } else if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
            Slog.d(TAG_PROCESSES, "Received spurious death notification for thread " + thread.asBinder());
        }
        ITranPowerManagerService.Instance().notifySourceConnectDied(app.info.uid, app.processName);
        if (MemoryStatUtil.hasMemcg()) {
        }
    }

    public static File dumpStackTraces(ArrayList<Integer> firstPids, ProcessCpuTracker processCpuTracker, SparseArray<Boolean> lastPids, ArrayList<Integer> nativePids, StringWriter logExceptionCreatingFile) {
        return dumpStackTraces(firstPids, processCpuTracker, lastPids, nativePids, logExceptionCreatingFile, null, null, null);
    }

    public static File dumpStackTraces(ArrayList<Integer> firstPids, ProcessCpuTracker processCpuTracker, SparseArray<Boolean> lastPids, ArrayList<Integer> nativePids, StringWriter logExceptionCreatingFile, String subject, String criticalEventSection) {
        return dumpStackTraces(firstPids, processCpuTracker, lastPids, nativePids, logExceptionCreatingFile, null, subject, criticalEventSection);
    }

    public static File dumpStackTraces(ArrayList<Integer> firstPids, ProcessCpuTracker processCpuTracker, SparseArray<Boolean> lastPids, ArrayList<Integer> nativePids, StringWriter logExceptionCreatingFile, long[] firstPidOffsets, String subject, String criticalEventSection) {
        ArrayList<Integer> extraPids = null;
        Slog.i(TAG, "dumpStackTraces pids=" + lastPids + " nativepids=" + nativePids);
        if (processCpuTracker != null) {
            processCpuTracker.init();
            try {
                Thread.sleep(NETWORK_ACCESS_TIMEOUT_DEFAULT_MS);
            } catch (InterruptedException e) {
            }
            processCpuTracker.update();
            int N = processCpuTracker.countWorkingStats();
            extraPids = new ArrayList<>();
            for (int i = 0; i < N && extraPids.size() < 5; i++) {
                ProcessCpuTracker.Stats stats = processCpuTracker.getWorkingStats(i);
                if (lastPids.indexOfKey(stats.pid) >= 0) {
                    if (ActivityManagerDebugConfig.DEBUG_ANR) {
                        Slog.d(TAG, "Collecting stacks for extra pid " + stats.pid);
                    }
                    extraPids.add(Integer.valueOf(stats.pid));
                } else {
                    Slog.i(TAG, "Skipping next CPU consuming process, not a java proc: " + stats.pid);
                }
            }
        }
        File tracesDir = new File(ANR_TRACE_DIR);
        maybePruneOldTraces(tracesDir);
        try {
            File tracesFile = createAnrDumpFile(tracesDir);
            if (subject != null || criticalEventSection != null) {
                try {
                    FileOutputStream fos = new FileOutputStream(tracesFile, true);
                    if (subject != null) {
                        String header = "Subject: " + subject + "\n\n";
                        fos.write(header.getBytes(StandardCharsets.UTF_8));
                    }
                    if (criticalEventSection != null) {
                        fos.write(criticalEventSection.getBytes(StandardCharsets.UTF_8));
                    }
                    fos.close();
                } catch (IOException e2) {
                    Slog.w(TAG, "Exception writing to ANR dump file:", e2);
                }
            }
            Pair<Long, Long> offsets = dumpStackTraces(tracesFile.getAbsolutePath(), firstPids, nativePids, extraPids);
            if (firstPidOffsets != null) {
                if (offsets == null) {
                    firstPidOffsets[1] = -1;
                    firstPidOffsets[0] = -1;
                } else {
                    firstPidOffsets[0] = ((Long) offsets.first).longValue();
                    firstPidOffsets[1] = ((Long) offsets.second).longValue();
                }
            }
            return tracesFile;
        } catch (IOException e3) {
            Slog.w(TAG, "Exception creating ANR dump file:", e3);
            if (logExceptionCreatingFile != null) {
                logExceptionCreatingFile.append("----- Exception creating ANR dump file -----\n");
                e3.printStackTrace(new PrintWriter(logExceptionCreatingFile));
                return null;
            }
            return null;
        }
    }

    private static synchronized File createAnrDumpFile(File tracesDir) throws IOException {
        File anrFile;
        synchronized (ActivityManagerService.class) {
            boostPriorityForLockedSection();
            File[] traceList = tracesDir.listFiles();
            if (traceList.length >= 12) {
                for (File file : traceList) {
                    String fileName = file.getName();
                    if ((fileName.startsWith(ANR_FILE_PREFIX) || fileName.startsWith("dumptrace_") || fileName.startsWith("trace_")) && !file.delete()) {
                        Slog.d(TAG, "failed to delete anr trace!!!!!");
                    }
                }
            }
            if (sAnrFileDateFormat == null) {
                sAnrFileDateFormat = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss-SSS");
            }
            String formattedDate = sAnrFileDateFormat.format(new Date());
            anrFile = new File(tracesDir, ANR_FILE_PREFIX + formattedDate);
            if (anrFile.createNewFile()) {
                FileUtils.setPermissions(anrFile.getAbsolutePath(), 438, -1, -1);
                resetPriorityAfterLockedSection();
            } else {
                throw new IOException("Unable to create ANR dump file: createNewFile failed");
            }
        }
        return anrFile;
    }

    private static void maybePruneOldTraces(File tracesDir) {
        File[] files = tracesDir.listFiles();
        if (files == null) {
            return;
        }
        int max = SystemProperties.getInt("tombstoned.max_anr_count", 64);
        long now = System.currentTimeMillis();
        try {
            Arrays.sort(files, Comparator.comparingLong(new ToLongFunction() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda16
                @Override // java.util.function.ToLongFunction
                public final long applyAsLong(Object obj) {
                    return ((File) obj).lastModified();
                }
            }).reversed());
            for (int i = 0; i < files.length; i++) {
                if ((i > max || now - files[i].lastModified() > 86400000) && !files[i].delete()) {
                    Slog.w(TAG, "Unable to prune stale trace file: " + files[i]);
                }
            }
        } catch (IllegalArgumentException e) {
            Slog.w(TAG, "tombstone modification times changed while sorting; not pruning", e);
        }
    }

    private static long dumpJavaTracesTombstoned(int pid, String fileName, long timeoutMs) {
        long timeStart = SystemClock.elapsedRealtime();
        boolean javaSuccess = Debug.dumpJavaBacktraceToFileTimeout(pid, fileName, (int) (timeoutMs / 1000));
        if (javaSuccess) {
            try {
                long size = new File(fileName).length();
                if (size < 100) {
                    Slog.w(TAG, "Successfully created Java ANR file is empty!");
                    javaSuccess = false;
                }
            } catch (Exception e) {
                Slog.w(TAG, "Unable to get ANR file size", e);
                javaSuccess = false;
            }
        }
        if (!javaSuccess) {
            Slog.w(TAG, "Dumping Java threads failed, initiating native stack dump.");
            if (!Debug.dumpNativeBacktraceToFileTimeout(pid, fileName, NATIVE_DUMP_TIMEOUT_MS / 1000)) {
                Slog.w(TAG, "Native stack dump failed!");
            }
        }
        return SystemClock.elapsedRealtime() - timeStart;
    }

    public static Pair<Long, Long> dumpStackTraces(String tracesFile, ArrayList<Integer> firstPids, ArrayList<Integer> nativePids, ArrayList<Integer> extraPids) {
        String str;
        long remainingTime;
        long timeTaken;
        String str2;
        ArrayList<Integer> arrayList;
        String str3 = tracesFile;
        ArrayList<Integer> arrayList2 = firstPids;
        Slog.i(TAG, "Dumping to " + str3);
        long remainingTime2 = Build.HW_TIMEOUT_MULTIPLIER * 20000;
        long firstPidStart = -1;
        long firstPidEnd = -1;
        String str4 = "ms";
        if (arrayList2 == null) {
            str = "ms";
        } else {
            int num = firstPids.size();
            int i = 0;
            while (i < num) {
                int pid = arrayList2.get(i).intValue();
                boolean firstPid = i == 0 && MY_PID != pid;
                File tf = null;
                if (firstPid) {
                    tf = new File(str3);
                    firstPidStart = tf.exists() ? tf.length() : 0L;
                }
                int num2 = num;
                String str5 = str4;
                Slog.i(TAG, "Collecting stacks for pid " + pid);
                long timeTaken2 = dumpJavaTracesTombstoned(pid, str3, remainingTime2);
                long remainingTime3 = remainingTime2 - timeTaken2;
                if (remainingTime3 <= 0) {
                    Slog.e(TAG, "Aborting stack trace dump (current firstPid=" + pid + "); deadline exceeded.");
                    if (firstPidStart >= 0) {
                        return new Pair<>(Long.valueOf(firstPidStart), Long.valueOf(firstPidEnd));
                    }
                    return null;
                }
                if (firstPid) {
                    firstPidEnd = tf.length();
                }
                if (!ActivityManagerDebugConfig.DEBUG_ANR) {
                    timeTaken = remainingTime3;
                    str2 = str5;
                    arrayList = firstPids;
                } else {
                    arrayList = firstPids;
                    timeTaken = remainingTime3;
                    str2 = str5;
                    Slog.d(TAG, "Done with pid " + arrayList.get(i) + " in " + timeTaken2 + str2);
                }
                i++;
                arrayList2 = arrayList;
                str4 = str2;
                remainingTime2 = timeTaken;
                num = num2;
            }
            str = str4;
        }
        if (nativePids != null) {
            Iterator<Integer> it = nativePids.iterator();
            while (it.hasNext()) {
                int pid2 = it.next().intValue();
                Slog.i(TAG, "Collecting stacks for native pid " + pid2);
                long nativeDumpTimeoutMs = Math.min(NATIVE_DUMP_TIMEOUT_MS, remainingTime2);
                long start = SystemClock.elapsedRealtime();
                Iterator<Integer> it2 = it;
                Debug.dumpNativeBacktraceToFileTimeout(pid2, str3, (int) (nativeDumpTimeoutMs / 1000));
                long timeTaken3 = SystemClock.elapsedRealtime() - start;
                long remainingTime4 = remainingTime2 - timeTaken3;
                if (remainingTime4 <= 0) {
                    Slog.e(TAG, "Aborting stack trace dump (current native pid=" + pid2 + "); deadline exceeded.");
                    if (firstPidStart >= 0) {
                        return new Pair<>(Long.valueOf(firstPidStart), Long.valueOf(firstPidEnd));
                    }
                    return null;
                }
                if (!ActivityManagerDebugConfig.DEBUG_ANR) {
                    remainingTime = remainingTime4;
                } else {
                    remainingTime = remainingTime4;
                    Slog.d(TAG, "Done with native pid " + pid2 + " in " + timeTaken3 + str);
                }
                it = it2;
                remainingTime2 = remainingTime;
            }
        }
        if (extraPids != null) {
            Iterator<Integer> it3 = extraPids.iterator();
            while (it3.hasNext()) {
                int pid3 = it3.next().intValue();
                Slog.i(TAG, "Collecting stacks for extra pid " + pid3);
                long timeTaken4 = dumpJavaTracesTombstoned(pid3, str3, remainingTime2);
                remainingTime2 -= timeTaken4;
                if (remainingTime2 <= 0) {
                    Slog.e(TAG, "Aborting stack trace dump (current extra pid=" + pid3 + "); deadline exceeded.");
                    if (firstPidStart >= 0) {
                        return new Pair<>(Long.valueOf(firstPidStart), Long.valueOf(firstPidEnd));
                    }
                    return null;
                }
                if (ActivityManagerDebugConfig.DEBUG_ANR) {
                    Slog.d(TAG, "Done with extra pid " + pid3 + " in " + timeTaken4 + str);
                }
                str3 = tracesFile;
            }
        }
        Slog.i(TAG, "Done dumping");
        if (firstPidStart >= 0) {
            return new Pair<>(Long.valueOf(firstPidStart), Long.valueOf(firstPidEnd));
        }
        return null;
    }

    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [4219=7] */
    public boolean clearApplicationUserData(String packageName, boolean keepState, final IPackageDataObserver observer, int userId) {
        long callingId;
        IPackageManager pm;
        boolean permitted;
        boolean permitted2;
        ApplicationInfo applicationInfo;
        ApplicationInfo appInfo;
        enforceNotIsolatedCaller("clearApplicationUserData");
        final int uid = Binder.getCallingUid();
        final int pid = Binder.getCallingPid();
        final int resolvedUserId = this.mUserController.handleIncomingUser(pid, uid, userId, false, 2, "clearApplicationUserData", null);
        long callingId2 = Binder.clearCallingIdentity();
        try {
            pm = AppGlobals.getPackageManager();
            if (getPackageManagerInternal().isPackageDataProtected(resolvedUserId, packageName)) {
                try {
                    if (ActivityManager.checkUidPermission("android.permission.MANAGE_USERS", uid) == 0) {
                        throw new SecurityException("Cannot clear data for a protected package: " + packageName);
                    }
                    permitted = false;
                } catch (Throwable th) {
                    th = th;
                    callingId = callingId2;
                    Binder.restoreCallingIdentity(callingId);
                    throw th;
                }
            } else {
                permitted = true;
            }
            ApplicationInfo applicationInfo2 = null;
            if (permitted) {
                try {
                    applicationInfo2 = pm.getApplicationInfo(packageName, 8192L, resolvedUserId);
                } catch (RemoteException e) {
                }
                boolean permitted3 = (applicationInfo2 != null && applicationInfo2.uid == uid) || checkComponentPermission("android.permission.CLEAR_APP_USER_DATA", pid, uid, -1, true) == 0;
                permitted2 = permitted3;
                applicationInfo = applicationInfo2;
            } else {
                permitted2 = permitted;
                applicationInfo = null;
            }
        } catch (Throwable th2) {
            th = th2;
            callingId = callingId2;
        }
        try {
            if (!permitted2) {
                throw new SecurityException("PID " + pid + " does not have permission android.permission.CLEAR_APP_USER_DATA to clear data of package " + packageName);
            }
            final ApplicationInfo appInfo2 = applicationInfo;
            boolean hasInstantMetadata = getPackageManagerInternal().hasInstantApplicationMetadata(packageName, resolvedUserId);
            boolean isUninstalledAppWithoutInstantMetadata = appInfo2 == null && !hasInstantMetadata;
            final boolean isInstantApp = (appInfo2 != null && appInfo2.isInstantApp()) || hasInstantMetadata;
            boolean canAccessInstantApps = checkComponentPermission("android.permission.ACCESS_INSTANT_APPS", pid, uid, -1, true) == 0;
            try {
                if (isUninstalledAppWithoutInstantMetadata) {
                    appInfo = appInfo2;
                    callingId = callingId2;
                } else if (!isInstantApp || canAccessInstantApps) {
                    try {
                        synchronized (this) {
                            try {
                                boostPriorityForLockedSection();
                                if (appInfo2 != null) {
                                    try {
                                        forceStopPackageLocked(packageName, appInfo2.uid, "clear data");
                                        this.mAtmInternal.removeRecentTasksByPackageName(packageName, resolvedUserId);
                                    } catch (Throwable th3) {
                                        th = th3;
                                        while (true) {
                                            try {
                                                break;
                                            } catch (Throwable th4) {
                                                th = th4;
                                            }
                                        }
                                        resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                }
                                resetPriorityAfterLockedSection();
                                callingId = callingId2;
                                try {
                                    try {
                                        pm.clearApplicationUserData(packageName, new IPackageDataObserver.Stub() { // from class: com.android.server.am.ActivityManagerService.6
                                            public void onRemoveCompleted(String packageName2, boolean succeeded) throws RemoteException {
                                                if (appInfo2 != null) {
                                                    synchronized (ActivityManagerService.this) {
                                                        try {
                                                            ActivityManagerService.boostPriorityForLockedSection();
                                                            ActivityManagerService.this.finishForceStopPackageLocked(packageName2, appInfo2.uid);
                                                        } catch (Throwable th5) {
                                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                                            throw th5;
                                                        }
                                                    }
                                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                                }
                                                if (succeeded) {
                                                    Intent intent = new Intent("android.intent.action.PACKAGE_DATA_CLEARED", Uri.fromParts("package", packageName2, null));
                                                    intent.addFlags(16777216);
                                                    ApplicationInfo applicationInfo3 = appInfo2;
                                                    intent.putExtra("android.intent.extra.UID", applicationInfo3 != null ? applicationInfo3.uid : -1);
                                                    intent.putExtra("android.intent.extra.user_handle", resolvedUserId);
                                                    if (isInstantApp) {
                                                        intent.putExtra("android.intent.extra.PACKAGE_NAME", packageName2);
                                                    }
                                                    int[] visibilityAllowList = ActivityManagerService.this.mPackageManagerInt.getVisibilityAllowList(packageName2, resolvedUserId);
                                                    ActivityManagerService.this.broadcastIntentInPackage(PackageManagerService.PLATFORM_PACKAGE_NAME, null, 1000, uid, pid, intent, null, null, 0, null, null, isInstantApp ? "android.permission.ACCESS_INSTANT_APPS" : null, null, false, false, resolvedUserId, false, null, visibilityAllowList);
                                                }
                                                IPackageDataObserver iPackageDataObserver = observer;
                                                if (iPackageDataObserver != null) {
                                                    iPackageDataObserver.onRemoveCompleted(packageName2, succeeded);
                                                }
                                            }
                                        }, resolvedUserId);
                                        if (appInfo2 != null) {
                                            if (!keepState) {
                                                this.mUgmInternal.removeUriPermissionsForPackage(packageName, resolvedUserId, true, false);
                                                INotificationManager inm = NotificationManager.getService();
                                                try {
                                                    inm.clearData(packageName, appInfo2.uid, uid == appInfo2.uid);
                                                } catch (RemoteException e2) {
                                                }
                                            }
                                            JobSchedulerInternal js = (JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class);
                                            js.cancelJobsForUid(appInfo2.uid, 13, 8, "clear data");
                                            AlarmManagerInternal ami = (AlarmManagerInternal) LocalServices.getService(AlarmManagerInternal.class);
                                            ami.removeAlarmsForUid(appInfo2.uid);
                                        }
                                    } catch (RemoteException e3) {
                                    }
                                    Binder.restoreCallingIdentity(callingId);
                                    return true;
                                } catch (Throwable th5) {
                                    th = th5;
                                    Binder.restoreCallingIdentity(callingId);
                                    throw th;
                                }
                            } catch (Throwable th6) {
                                th = th6;
                            }
                        }
                    } catch (Throwable th7) {
                        th = th7;
                        callingId = callingId2;
                    }
                } else {
                    appInfo = appInfo2;
                    callingId = callingId2;
                }
                Slog.w(TAG, "Invalid packageName: " + packageName);
                if (observer != null) {
                    try {
                        observer.onRemoveCompleted(packageName, false);
                    } catch (RemoteException e4) {
                        Slog.i(TAG, "Observer no longer exists.");
                    }
                }
                Binder.restoreCallingIdentity(callingId);
                return false;
            } catch (Throwable th8) {
                th = th8;
            }
        } catch (Throwable th9) {
            th = th9;
            Binder.restoreCallingIdentity(callingId);
            throw th;
        }
    }

    /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:55:? -> B:39:0x00f6). Please submit an issue!!! */
    public void killBackgroundProcesses(String packageName, int userId) {
        int appId;
        ActivityManagerGlobalLock activityManagerGlobalLock;
        int i;
        int i2;
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") != 0 && checkCallingPermission("android.permission.RESTART_PACKAGES") != 0) {
            String msg = "Permission Denial: killBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.KILL_BACKGROUND_PROCESSES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
        int[] userIds = this.mUserController.expandUserId(this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 2, "killBackgroundProcesses", null));
        long callingId = Binder.clearCallingIdentity();
        try {
            IPackageManager pm = AppGlobals.getPackageManager();
            int length = userIds.length;
            int i3 = 0;
            while (i3 < length) {
                int targetUserId = userIds[i3];
                try {
                    int appId2 = UserHandle.getAppId(pm.getPackageUid(packageName, 268435456L, targetUserId));
                    appId = appId2;
                } catch (RemoteException e) {
                    appId = -1;
                }
                if (appId == -1) {
                    Slog.w(TAG, "Invalid packageName: " + packageName);
                    return;
                }
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        ActivityManagerGlobalLock activityManagerGlobalLock2 = this.mProcLock;
                        synchronized (activityManagerGlobalLock2) {
                            try {
                                boostPriorityForProcLockedSection();
                                activityManagerGlobalLock = activityManagerGlobalLock2;
                                i = i3;
                                i2 = length;
                                try {
                                    this.mProcessList.killPackageProcessesLSP(packageName, appId, targetUserId, 500, 10, 24, "kill background");
                                    try {
                                        resetPriorityAfterProcLockedSection();
                                    } catch (Throwable th) {
                                        th = th;
                                        resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                } catch (Throwable th2) {
                                    th = th2;
                                    resetPriorityAfterProcLockedSection();
                                    throw th;
                                }
                            } catch (Throwable th3) {
                                th = th3;
                                activityManagerGlobalLock = activityManagerGlobalLock2;
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                    } catch (Throwable th4) {
                        th = th4;
                    }
                }
                resetPriorityAfterLockedSection();
                i3 = i + 1;
                length = i2;
            }
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    public void killAllBackgroundProcesses() {
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") != 0) {
            String msg = "Permission Denial: killAllBackgroundProcesses() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.KILL_BACKGROUND_PROCESSES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
        int callingUid = Binder.getCallingUid();
        long callingId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mAppProfiler.setAllowLowerMemLevelLocked(true);
                if (callingUid == 2000) {
                    this.mProcessList.setKillAllBackgroundProcessesByShell();
                }
                synchronized (this.mProcLock) {
                    boostPriorityForProcLockedSection();
                    this.mProcessList.killPackageProcessesLSP(null, -1, -1, 900, 10, 24, "kill all background");
                }
                resetPriorityAfterProcLockedSection();
                this.mAppProfiler.doLowMemReportIfNeededLocked(null);
            }
            resetPriorityAfterLockedSection();
        } finally {
            this.mProcessList.reSetKillAllBackgroundProcessesByShell();
            Binder.restoreCallingIdentity(callingId);
        }
    }

    void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState) {
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") != 0) {
            String msg = "Permission Denial: killAllBackgroundProcessesExcept() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.KILL_BACKGROUND_PROCESSES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
        long callingId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                synchronized (this.mProcLock) {
                    try {
                        boostPriorityForProcLockedSection();
                        this.mProcessList.killAllBackgroundProcessesExceptLSP(minTargetSdk, maxProcState);
                    } catch (Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    public void stopAppForUser(String packageName, int userId) {
        if (checkCallingPermission("android.permission.MANAGE_ACTIVITY_TASKS") != 0) {
            String msg = "Permission Denial: stopAppForUser() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.MANAGE_ACTIVITY_TASKS";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
        int callingPid = Binder.getCallingPid();
        int userId2 = this.mUserController.handleIncomingUser(callingPid, Binder.getCallingUid(), userId, true, 2, "stopAppForUser", null);
        long callingId = Binder.clearCallingIdentity();
        try {
            stopAppForUserInternal(packageName, userId2);
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    public boolean registerForegroundServiceObserver(IForegroundServiceObserver callback) {
        boolean registerForegroundServiceObserverLocked;
        int callingUid = Binder.getCallingUid();
        int permActivityTasks = checkCallingPermission("android.permission.MANAGE_ACTIVITY_TASKS");
        int permAcrossUsersFull = checkCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL");
        if (permActivityTasks != 0 || permAcrossUsersFull != 0) {
            String msg = "Permission Denial: registerForegroundServiceObserver() from pid=" + Binder.getCallingPid() + ", uid=" + callingUid + " requires android.permission.MANAGE_ACTIVITY_TASKS and android.permission.INTERACT_ACROSS_USERS_FULL";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                registerForegroundServiceObserverLocked = this.mServices.registerForegroundServiceObserverLocked(callingUid, callback);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return registerForegroundServiceObserverLocked;
    }

    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [4446=4, 4448=4] */
    public void forceStopPackage(String packageName, int userId) {
        int callingPid;
        int[] users;
        int[] users2;
        int length;
        int i;
        int pkgUid;
        int i2;
        int i3;
        int callingPid2;
        int[] users3;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            String msg = "Permission Denial: forceStopPackage() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
        int callingPid3 = Binder.getCallingPid();
        int userId2 = this.mUserController.handleIncomingUser(callingPid3, Binder.getCallingUid(), userId, true, 2, "forceStopPackage", null);
        long callingId = Binder.clearCallingIdentity();
        try {
            IPackageManager pm = AppGlobals.getPackageManager();
            try {
                try {
                } catch (Throwable th) {
                    th = th;
                    Binder.restoreCallingIdentity(callingId);
                    throw th;
                }
            } catch (Throwable th2) {
                th = th2;
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    callingPid = -1;
                    if (userId2 == -1) {
                        try {
                            users = this.mUserController.getUsers();
                        } catch (Throwable th3) {
                            th = th3;
                        }
                    } else {
                        users = new int[]{userId2};
                    }
                    users2 = users;
                    length = users2.length;
                    i = 0;
                } catch (Throwable th4) {
                    th = th4;
                }
                while (i < length) {
                    int user = users2[i];
                    if (getPackageManagerInternal().isPackageStateProtected(packageName, user)) {
                        Slog.w(TAG, "Ignoring request to force stop protected package " + packageName + " u" + user);
                        resetPriorityAfterLockedSection();
                        Binder.restoreCallingIdentity(callingId);
                        return;
                    }
                    try {
                        int pkgUid2 = pm.getPackageUid(packageName, 268435456L, user);
                        pkgUid = pkgUid2;
                    } catch (RemoteException e) {
                        pkgUid = -1;
                    }
                    if (pkgUid == callingPid) {
                        Slog.w(TAG, "Invalid packageName: " + packageName);
                        i2 = i;
                        i3 = length;
                        callingPid2 = callingPid3;
                        users3 = users2;
                    } else {
                        try {
                            pm.setPackageStoppedState(packageName, true, user);
                        } catch (RemoteException e2) {
                        } catch (IllegalArgumentException e3) {
                            Slog.w(TAG, "Failed trying to unstop package " + packageName + ": " + e3);
                        }
                        if (this.mUserController.isUserRunning(user, 0)) {
                            this.mAmsExt.addToSuppressRestartList(packageName);
                            i2 = i;
                            i3 = length;
                            callingPid2 = callingPid3;
                            users3 = users2;
                            if (needKillBackgroundProcess(packageName, userId2, callingPid3, callingId)) {
                                killBackgroundProcesses(packageName, userId2);
                            } else {
                                forceStopPackageLocked(packageName, pkgUid, "from pid " + callingPid2);
                                finishForceStopPackageLocked(packageName, pkgUid);
                            }
                        } else {
                            i2 = i;
                            i3 = length;
                            callingPid2 = callingPid3;
                            users3 = users2;
                        }
                    }
                    i = i2 + 1;
                    callingPid3 = callingPid2;
                    length = i3;
                    users2 = users3;
                    callingPid = -1;
                    th = th3;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
                resetPriorityAfterLockedSection();
                Binder.restoreCallingIdentity(callingId);
            }
        } catch (Throwable th5) {
            th = th5;
        }
    }

    public void addPackageDependency(String packageName) {
        ProcessRecord proc;
        int callingPid = Binder.getCallingPid();
        if (callingPid == Process.myPid()) {
            return;
        }
        synchronized (this.mPidsSelfLocked) {
            proc = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        if (proc != null) {
            ArraySet<String> pkgDeps = proc.getPkgDeps();
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    synchronized (this.mProcLock) {
                        boostPriorityForProcLockedSection();
                        if (pkgDeps == null) {
                            ArraySet<String> arraySet = new ArraySet<>(1);
                            pkgDeps = arraySet;
                            proc.setPkgDeps(arraySet);
                        }
                        pkgDeps.add(packageName);
                    }
                    resetPriorityAfterProcLockedSection();
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    public void killApplication(String pkg, int appId, int userId, String reason) {
        if (pkg == null) {
            return;
        }
        if (appId < 0) {
            Slog.w(TAG, "Invalid appid specified for pkg : " + pkg);
            return;
        }
        int callerUid = Binder.getCallingUid();
        if (UserHandle.getAppId(callerUid) == 1000) {
            Message msg = this.mHandler.obtainMessage(22);
            msg.arg1 = appId;
            msg.arg2 = userId;
            Bundle bundle = new Bundle();
            bundle.putString("pkg", pkg);
            bundle.putString(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY, reason);
            msg.obj = bundle;
            this.mHandler.sendMessage(msg);
            return;
        }
        throw new SecurityException(callerUid + " cannot kill pkg: " + pkg);
    }

    public void closeSystemDialogs(String reason) {
        this.mAtmInternal.closeSystemDialogs(reason);
    }

    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [4540=4] */
    /* JADX WARN: Code restructure failed: missing block: B:18:0x005b, code lost:
        if (r17.mSourceUid == 0) goto L173;
     */
    /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:174:? -> B:106:0x01d8). Please submit an issue!!! */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public Debug.MemoryInfo[] getProcessMemoryInfo(int[] pids) {
        boolean z;
        int callingPid;
        final ProcessRecord proc;
        ProcessProfileRecord profile;
        Debug.MemoryInfo[] infos;
        int oomAdj;
        int callingUid;
        long lastNow;
        boolean allUsers;
        int callingUserId;
        ActivityManagerService activityManagerService = this;
        int[] iArr = pids;
        activityManagerService.enforceNotIsolatedCaller("getProcessMemoryInfo");
        long now = SystemClock.uptimeMillis();
        long lastNow2 = now - activityManagerService.mConstants.MEMORY_INFO_THROTTLE_TIME;
        int callingPid2 = Binder.getCallingPid();
        int callingUid2 = Binder.getCallingUid();
        int callingUserId2 = UserHandle.getUserId(callingUid2);
        boolean allUsers2 = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid2) == 0;
        boolean allUids = activityManagerService.mAtmInternal.isGetTasksAllowed("getProcessMemoryInfo", callingPid2, callingUid2);
        boolean isCallerInstrumentedFromShell = false;
        synchronized (activityManagerService.mProcLock) {
            try {
                try {
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerService.mPidsSelfLocked) {
                        try {
                            ProcessRecord caller = activityManagerService.mPidsSelfLocked.get(callingPid2);
                            if (caller != null) {
                                try {
                                    ActiveInstrumentation instr = caller.getActiveInstrumentation();
                                    if (instr != null) {
                                        if (instr.mSourceUid != 2000) {
                                            try {
                                            } catch (Throwable th) {
                                                th = th;
                                                while (true) {
                                                    try {
                                                        break;
                                                    } catch (Throwable th2) {
                                                        th = th2;
                                                    }
                                                }
                                                throw th;
                                            }
                                        }
                                        z = true;
                                        isCallerInstrumentedFromShell = z;
                                    }
                                    z = false;
                                    isCallerInstrumentedFromShell = z;
                                } catch (Throwable th3) {
                                    th = th3;
                                }
                            }
                            try {
                                try {
                                    resetPriorityAfterProcLockedSection();
                                    Debug.MemoryInfo[] infos2 = new Debug.MemoryInfo[iArr.length];
                                    int i = iArr.length - 1;
                                    while (i >= 0) {
                                        final Debug.MemoryInfo mi = new Debug.MemoryInfo();
                                        infos2[i] = mi;
                                        synchronized (activityManagerService.mAppProfiler.mProfilerLock) {
                                            try {
                                                try {
                                                    synchronized (activityManagerService.mPidsSelfLocked) {
                                                        try {
                                                            callingPid = callingPid2;
                                                            try {
                                                                proc = activityManagerService.mPidsSelfLocked.get(iArr[i]);
                                                                if (proc != null) {
                                                                    try {
                                                                        ProcessProfileRecord profile2 = proc.mProfile;
                                                                        profile = profile2;
                                                                        infos = infos2;
                                                                        oomAdj = profile2.getSetAdj();
                                                                    } catch (Throwable th4) {
                                                                        th = th4;
                                                                        while (true) {
                                                                            try {
                                                                                break;
                                                                            } catch (Throwable th5) {
                                                                                th = th5;
                                                                            }
                                                                        }
                                                                        throw th;
                                                                    }
                                                                } else {
                                                                    profile = null;
                                                                    infos = infos2;
                                                                    oomAdj = 0;
                                                                }
                                                                try {
                                                                } catch (Throwable th6) {
                                                                    th = th6;
                                                                    while (true) {
                                                                        break;
                                                                        break;
                                                                    }
                                                                    throw th;
                                                                }
                                                            } catch (Throwable th7) {
                                                                th = th7;
                                                            }
                                                        } catch (Throwable th8) {
                                                            th = th8;
                                                        }
                                                    }
                                                } catch (Throwable th9) {
                                                    th = th9;
                                                }
                                            } catch (Throwable th10) {
                                                th = th10;
                                            }
                                            try {
                                            } catch (Throwable th11) {
                                                th = th11;
                                                throw th;
                                            }
                                        }
                                        int targetUid = proc != null ? proc.uid : -1;
                                        int targetUserId = proc != null ? UserHandle.getUserId(targetUid) : -1;
                                        if (callingUid2 != targetUid) {
                                            if (!allUids) {
                                                lastNow = lastNow2;
                                                callingUid = callingUid2;
                                                callingUserId = callingUserId2;
                                                allUsers = allUsers2;
                                            } else if (!allUsers2 && targetUserId != callingUserId2) {
                                                lastNow = lastNow2;
                                                callingUid = callingUid2;
                                                callingUserId = callingUserId2;
                                                allUsers = allUsers2;
                                            }
                                            i--;
                                            activityManagerService = this;
                                            iArr = pids;
                                            callingPid2 = callingPid;
                                            infos2 = infos;
                                            callingUserId2 = callingUserId;
                                            callingUid2 = callingUid;
                                            lastNow2 = lastNow;
                                            allUsers2 = allUsers;
                                        }
                                        if (proc != null) {
                                            callingUid = callingUid2;
                                            synchronized (activityManagerService.mAppProfiler.mProfilerLock) {
                                                if (profile.getLastMemInfoTime() >= lastNow2 && profile.getLastMemInfo() != null && !isCallerInstrumentedFromShell) {
                                                    mi.set(profile.getLastMemInfo());
                                                    lastNow = lastNow2;
                                                    callingUserId = callingUserId2;
                                                    allUsers = allUsers2;
                                                }
                                            }
                                            i--;
                                            activityManagerService = this;
                                            iArr = pids;
                                            callingPid2 = callingPid;
                                            infos2 = infos;
                                            callingUserId2 = callingUserId;
                                            callingUid2 = callingUid;
                                            lastNow2 = lastNow;
                                            allUsers2 = allUsers;
                                        } else {
                                            callingUid = callingUid2;
                                        }
                                        long startTime = SystemClock.currentThreadTimeMillis();
                                        Debug.MemoryInfo memInfo = new Debug.MemoryInfo();
                                        Debug.getMemoryInfo(iArr[i], memInfo);
                                        final long duration = SystemClock.currentThreadTimeMillis() - startTime;
                                        mi.set(memInfo);
                                        if (proc != null) {
                                            synchronized (activityManagerService.mAppProfiler.mProfilerLock) {
                                                final ProcessProfileRecord profile3 = profile;
                                                try {
                                                    profile3.setLastMemInfo(memInfo);
                                                    lastNow = lastNow2;
                                                    try {
                                                        long lastNow3 = SystemClock.uptimeMillis();
                                                        profile3.setLastMemInfoTime(lastNow3);
                                                        if (profile3.getThread() == null || profile3.getSetAdj() != oomAdj) {
                                                            callingUserId = callingUserId2;
                                                            allUsers = allUsers2;
                                                        } else {
                                                            callingUserId = callingUserId2;
                                                            try {
                                                                allUsers = allUsers2;
                                                            } catch (Throwable th12) {
                                                                th = th12;
                                                                throw th;
                                                            }
                                                            try {
                                                                profile3.addPss(mi.getTotalPss(), mi.getTotalUss(), mi.getTotalRss(), false, 4, duration);
                                                                proc.getPkgList().forEachPackageProcessStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda0
                                                                    @Override // java.util.function.Consumer
                                                                    public final void accept(Object obj) {
                                                                        ActivityManagerService.lambda$getProcessMemoryInfo$2(ProcessRecord.this, mi, duration, profile3, (ProcessStats.ProcessStateHolder) obj);
                                                                    }
                                                                });
                                                            } catch (Throwable th13) {
                                                                th = th13;
                                                                throw th;
                                                            }
                                                        }
                                                    } catch (Throwable th14) {
                                                        th = th14;
                                                    }
                                                } catch (Throwable th15) {
                                                    th = th15;
                                                }
                                            }
                                        } else {
                                            lastNow = lastNow2;
                                            allUsers = allUsers2;
                                            callingUserId = callingUserId2;
                                        }
                                        i--;
                                        activityManagerService = this;
                                        iArr = pids;
                                        callingPid2 = callingPid;
                                        infos2 = infos;
                                        callingUserId2 = callingUserId;
                                        callingUid2 = callingUid;
                                        lastNow2 = lastNow;
                                        allUsers2 = allUsers;
                                    }
                                    return infos2;
                                } catch (Throwable th16) {
                                    th = th16;
                                    resetPriorityAfterProcLockedSection();
                                    throw th;
                                }
                            } catch (Throwable th17) {
                                th = th17;
                                while (true) {
                                    break;
                                    break;
                                }
                                throw th;
                            }
                        } catch (Throwable th18) {
                            th = th18;
                        }
                    }
                } catch (Throwable th19) {
                    th = th19;
                }
            } catch (Throwable th20) {
                th = th20;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ void lambda$getProcessMemoryInfo$2(ProcessRecord proc, Debug.MemoryInfo mi, long duration, ProcessProfileRecord profile, ProcessStats.ProcessStateHolder holder) {
        ProcessState state = holder.state;
        FrameworkStatsLog.write(18, proc.info.uid, state != null ? state.getName() : proc.processName, state != null ? state.getPackage() : proc.info.packageName, mi.getTotalPss(), mi.getTotalUss(), mi.getTotalRss(), 4, duration, holder.appVersion, profile.getCurrentHostingComponentTypes(), profile.getHistoricalHostingComponentTypes());
    }

    /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:59:? -> B:43:0x00cc). Please submit an issue!!! */
    public long[] getProcessPss(int[] pids) {
        final ProcessRecord proc;
        int oomAdj;
        Object obj;
        enforceNotIsolatedCaller("getProcessPss");
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        int userId = UserHandle.getUserId(callingUid);
        int i = 0;
        boolean allUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean allUids = this.mAtmInternal.isGetTasksAllowed("getProcessPss", callingPid, callingUid);
        long[] pss = new long[pids.length];
        int i2 = pids.length - 1;
        while (i2 >= 0) {
            synchronized (this.mProcLock) {
                try {
                    boostPriorityForProcLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        proc = this.mPidsSelfLocked.get(pids[i2]);
                        oomAdj = proc != null ? proc.mState.getSetAdj() : i;
                    }
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            if (allUids && (allUsers || UserHandle.getUserId(proc.uid) == userId)) {
                final long[] tmpUss = new long[3];
                long startTime = SystemClock.currentThreadTimeMillis();
                final long pi = Debug.getPss(pids[i2], tmpUss, null);
                pss[i2] = pi;
                final long duration = SystemClock.currentThreadTimeMillis() - startTime;
                if (proc != null) {
                    final ProcessProfileRecord profile = proc.mProfile;
                    Object obj2 = this.mAppProfiler.mProfilerLock;
                    synchronized (obj2) {
                        try {
                            if (profile.getThread() == null || profile.getSetAdj() != oomAdj) {
                                obj = obj2;
                            } else {
                                profile.addPss(pi, tmpUss[i], tmpUss[2], false, 3, duration);
                                obj = obj2;
                                try {
                                    proc.getPkgList().forEachPackageProcessStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda37
                                        @Override // java.util.function.Consumer
                                        public final void accept(Object obj3) {
                                            ProcessRecord processRecord = ProcessRecord.this;
                                            FrameworkStatsLog.write(18, processRecord.info.uid, r7.state.getName(), r7.state.getPackage(), pi, r3[0], tmpUss[2], 3, duration, ((ProcessStats.ProcessStateHolder) obj3).appVersion, r6.getCurrentHostingComponentTypes(), profile.getHistoricalHostingComponentTypes());
                                        }
                                    });
                                } catch (Throwable th2) {
                                    th = th2;
                                    throw th;
                                }
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            obj = obj2;
                            throw th;
                        }
                    }
                }
            }
            i2--;
            i = 0;
        }
        return pss;
    }

    public void killApplicationProcess(String processName, int uid) {
        if (processName == null) {
            return;
        }
        int callerUid = Binder.getCallingUid();
        if (callerUid == 1000) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    ProcessRecord app = getProcessRecordLocked(processName, uid);
                    if (app != null) {
                        IApplicationThread thread = app.getThread();
                        if (thread != null) {
                            try {
                                thread.scheduleSuicide();
                            } catch (RemoteException e) {
                            }
                        }
                    }
                    Slog.w(TAG, "Process/uid not found attempting kill of " + processName + " / " + uid);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            return;
        }
        throw new SecurityException(callerUid + " cannot kill app process: " + processName);
    }

    private void forceStopPackageLocked(String packageName, int uid, String reason) {
        forceStopPackageLocked(packageName, UserHandle.getAppId(uid), false, false, true, false, false, UserHandle.getUserId(uid), reason);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void finishForceStopPackageLocked(String packageName, int uid) {
        if (this.mAmsExt.notRemoveAlarm(packageName)) {
            Slog.d(TAG, "finishForceStopPackageLocked notRemoveAlarm packageName:" + packageName);
            return;
        }
        Intent intent = new Intent("android.intent.action.PACKAGE_RESTARTED", Uri.fromParts("package", packageName, null));
        if (!this.mProcessesReady) {
            intent.addFlags(1342177280);
        }
        intent.putExtra("android.intent.extra.UID", uid);
        intent.putExtra("android.intent.extra.user_handle", UserHandle.getUserId(uid));
        broadcastIntentLocked(null, null, null, intent, null, null, 0, null, null, null, null, null, -1, null, false, false, MY_PID, 1000, Binder.getCallingUid(), Binder.getCallingPid(), UserHandle.getUserId(uid));
    }

    private void cleanupDisabledPackageComponentsLocked(String packageName, int userId, String[] changedClasses) {
        Set<String> disabledClasses;
        int i;
        IPackageManager pm = AppGlobals.getPackageManager();
        if (changedClasses == null) {
            return;
        }
        int i2 = changedClasses.length - 1;
        int enabled = 0;
        int enabled2 = 0;
        Set<String> disabledClasses2 = null;
        while (true) {
            if (i2 < 0) {
                disabledClasses = disabledClasses2;
                i = enabled2;
                break;
            }
            String changedClass = changedClasses[i2];
            if (changedClass.equals(packageName)) {
                try {
                    enabled = pm.getApplicationEnabledSetting(packageName, userId != -1 ? userId : 0);
                    if (enabled != 1 && enabled != 0) {
                        r7 = 1;
                    }
                    enabled2 = r7;
                    if (enabled2 != 0) {
                        disabledClasses = null;
                        i = enabled2;
                        break;
                    }
                } catch (Exception e) {
                    return;
                }
            } else {
                try {
                    int enabled3 = pm.getComponentEnabledSetting(new ComponentName(packageName, changedClass), userId != -1 ? userId : 0);
                    if (enabled3 == 1 || enabled3 == 0) {
                        enabled = enabled3;
                    } else {
                        if (disabledClasses2 == null) {
                            disabledClasses2 = new ArraySet<>(changedClasses.length);
                        }
                        disabledClasses2.add(changedClass);
                        enabled = enabled3;
                    }
                } catch (Exception e2) {
                    return;
                }
            }
            i2--;
        }
        if (i != 0 || disabledClasses != null) {
            this.mAtmInternal.cleanupDisabledPackageComponents(packageName, disabledClasses, userId, this.mBooted);
            Set<String> set = disabledClasses;
            this.mServices.bringDownDisabledPackageServicesLocked(packageName, set, userId, false, false, true);
            ArrayList<ContentProviderRecord> providers = new ArrayList<>();
            this.mCpHelper.getProviderMap().collectPackageProvidersLocked(packageName, set, true, false, userId, providers);
            for (int i3 = providers.size() - 1; i3 >= 0; i3--) {
                this.mCpHelper.removeDyingProviderLocked(null, providers.get(i3), true);
            }
            for (int i4 = this.mBroadcastQueues.length - 1; i4 >= 0; i4--) {
                this.mBroadcastQueues[i4].cleanupDisabledPackageReceiversLocked(packageName, disabledClasses, userId, true);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final boolean clearBroadcastQueueForUserLocked(int userId) {
        boolean didSomething = false;
        for (int i = this.mBroadcastQueues.length - 1; i >= 0; i--) {
            didSomething |= this.mBroadcastQueues[i].cleanupDisabledPackageReceiversLocked(null, null, userId, true);
        }
        return didSomething;
    }

    final void forceStopAppZygoteLocked(String packageName, int appId, int userId) {
        if (packageName == null) {
            return;
        }
        if (appId < 0) {
            appId = UserHandle.getAppId(getPackageManagerInternal().getPackageUid(packageName, 272629760L, 0));
        }
        this.mProcessList.killAppZygotesLocked(packageName, appId, userId, true);
    }

    void stopAppForUserInternal(String packageName, int userId) {
        int uid = getPackageManagerInternal().getPackageUid(packageName, 272629760L, userId);
        if (uid < 0) {
            Slog.w(TAG, "Asked to stop " + packageName + "/u" + userId + " but does not exist in that user");
        } else if (getPackageManagerInternal().isPackageStateProtected(packageName, userId)) {
            Slog.w(TAG, "Asked to stop " + packageName + "/u" + userId + " but it is protected");
        } else {
            Slog.i(TAG, "Stopping app for user: " + packageName + SliceClientPermissions.SliceAuthority.DELIMITER + userId);
            int appId = UserHandle.getAppId(uid);
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    try {
                        synchronized (this.mProcLock) {
                            try {
                                boostPriorityForProcLockedSection();
                                this.mAtmInternal.onForceStopPackage(packageName, true, false, userId);
                                this.mProcessList.killPackageProcessesLSP(packageName, appId, userId, -10000, true, false, true, false, true, false, 10, 23, "fully stop " + packageName + SliceClientPermissions.SliceAuthority.DELIMITER + userId + " by user request");
                                resetPriorityAfterProcLockedSection();
                                this.mServices.bringDownDisabledPackageServicesLocked(packageName, null, userId, false, true, true);
                                if (this.mBooted) {
                                    this.mAtmInternal.resumeTopActivities(true);
                                }
                            } catch (Throwable th) {
                                th = th;
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                    } catch (Throwable th2) {
                        th = th2;
                    }
                } catch (Throwable th3) {
                    resetPriorityAfterLockedSection();
                    throw th3;
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final boolean forceStopPackageLocked(String packageName, int appId, boolean callerWillRestart, boolean purgeCache, boolean doit, boolean evenPersistent, boolean uninstalling, int userId, String reason) {
        int appId2;
        ActivityManagerGlobalLock activityManagerGlobalLock;
        String str;
        boolean z;
        int i;
        AttributeCache ac;
        if (userId == -1 && packageName == null) {
            Slog.w(TAG, "Can't force stop all processes of all users, that is insane!");
        }
        if (appId < 0 && packageName != null) {
            appId2 = UserHandle.getAppId(getPackageManagerInternal().getPackageUid(packageName, 272629760L, 0));
        } else {
            appId2 = appId;
        }
        if (doit) {
            if (packageName != null) {
                Slog.i(TAG, "Force stopping " + packageName + " appid=" + appId2 + " user=" + userId + ": " + reason);
            } else {
                Slog.i(TAG, "Force stopping u" + userId + ": " + reason);
            }
            this.mAppErrors.resetProcessCrashTime(packageName == null, appId2, userId);
        }
        ActivityManagerGlobalLock activityManagerGlobalLock2 = this.mProcLock;
        synchronized (activityManagerGlobalLock2) {
            try {
                boostPriorityForProcLockedSection();
                boolean didSomething = this.mAtmInternal.onForceStopPackage(packageName, doit, evenPersistent, userId);
                ProcessList processList = this.mProcessList;
                int i2 = packageName == null ? 11 : 10;
                StringBuilder sb = new StringBuilder();
                if (packageName != null) {
                    str = "stop " + packageName;
                } else {
                    try {
                        str = "stop user " + userId;
                    } catch (Throwable th) {
                        th = th;
                        activityManagerGlobalLock = activityManagerGlobalLock2;
                        while (true) {
                            try {
                                break;
                            } catch (Throwable th2) {
                                th = th2;
                            }
                        }
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                activityManagerGlobalLock = activityManagerGlobalLock2;
                int appId3 = appId2;
                try {
                    boolean didSomething2 = didSomething | processList.killPackageProcessesLSP(packageName, appId2, userId, -10000, callerWillRestart, false, doit, evenPersistent, true, uninstalling, i2, 21, sb.append(str).append(" due to ").append(reason).toString());
                    resetPriorityAfterProcLockedSection();
                    if (!this.mServices.bringDownDisabledPackageServicesLocked(packageName, null, userId, evenPersistent, true, doit)) {
                        z = doit;
                    } else {
                        z = doit;
                        if (!z) {
                            return true;
                        }
                        didSomething2 = true;
                    }
                    if (packageName != null) {
                        i = userId;
                    } else {
                        i = userId;
                        this.mStickyBroadcasts.remove(i);
                    }
                    ArrayList<ContentProviderRecord> providers = new ArrayList<>();
                    if (this.mCpHelper.getProviderMap().collectPackageProvidersLocked(packageName, (Set<String>) null, doit, evenPersistent, userId, providers)) {
                        if (!z) {
                            return true;
                        }
                        didSomething2 = true;
                    }
                    for (int i3 = providers.size() - 1; i3 >= 0; i3--) {
                        this.mCpHelper.removeDyingProviderLocked(null, providers.get(i3), true);
                    }
                    this.mUgmInternal.removeUriPermissionsForPackage(packageName, i, false, false);
                    if (z) {
                        for (int i4 = this.mBroadcastQueues.length - 1; i4 >= 0; i4--) {
                            didSomething2 |= this.mBroadcastQueues[i4].cleanupDisabledPackageReceiversLocked(packageName, null, i, z);
                        }
                    }
                    if (packageName == null || uninstalling) {
                        didSomething2 |= this.mPendingIntentController.removePendingIntentsForPackage(packageName, i, appId3, z);
                    }
                    if (z) {
                        if (purgeCache && packageName != null && (ac = AttributeCache.instance()) != null) {
                            ac.removePackage(packageName);
                        }
                        if (this.mBooted) {
                            this.mAtmInternal.resumeTopActivities(true);
                        }
                    }
                    return didSomething2;
                } catch (Throwable th3) {
                    th = th3;
                    while (true) {
                        break;
                        break;
                    }
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            } catch (Throwable th4) {
                th = th4;
                activityManagerGlobalLock = activityManagerGlobalLock2;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void handleProcessStartOrKillTimeoutLocked(ProcessRecord app, boolean isKillTimeout) {
        ProcessRecord successor;
        int pid = app.getPid();
        boolean gone = isKillTimeout || removePidIfNoThreadLocked(app);
        if (gone) {
            if (isKillTimeout) {
                successor = app.mSuccessor;
                if (successor == null) {
                    return;
                }
                Slog.wtf(TAG, app.toString() + " " + app.getDyingPid() + " refused to die while trying to launch " + successor + ", cancelling the process start");
                app.mSuccessorStartRunnable = null;
                app.mSuccessor = null;
                successor.mPredecessor = null;
            } else {
                String msg = "Process " + app + " failed to attach";
                Slog.w(TAG, msg);
                EventLogTags.writeAmProcessStartTimeout(app.userId, pid, app.uid, app.processName);
                if (app.getActiveInstrumentation() != null) {
                    Bundle info = new Bundle();
                    info.putString("shortMsg", "failed to attach");
                    info.putString("longMsg", msg);
                    finishInstrumentationLocked(app, 0, info);
                }
                successor = app;
            }
            synchronized (this.mProcLock) {
                try {
                    boostPriorityForProcLockedSection();
                    this.mProcessList.removeProcessNameLocked(successor.processName, successor.uid);
                    this.mAtmInternal.clearHeavyWeightProcessIfEquals(successor.getWindowProcessController());
                    ITranActivityManagerService.Instance().hookProcDied(successor.processWrapper);
                    ITranActivityManagerService.Instance().hookProcDied(successor.mPid);
                    this.mCpHelper.cleanupAppInLaunchingProvidersLocked(successor, true);
                    this.mServices.processStartTimedOutLocked(successor);
                    if (!isKillTimeout) {
                        this.mBatteryStatsService.noteProcessFinish(successor.processName, successor.info.uid);
                        successor.killLocked("start timeout", 7, true);
                        removeLruProcessLocked(successor);
                    }
                    if (successor.isolated) {
                        this.mBatteryStatsService.removeIsolatedUid(successor.uid, successor.info.uid);
                        this.mProcessList.mAppExitInfoTracker.mIsolatedUidRecords.removeIsolatedUid(successor.uid, successor.info.uid);
                        getPackageManagerInternal().removeIsolatedUid(successor.uid);
                    }
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            BackupRecord backupTarget = this.mBackupTargets.get(successor.userId);
            if (!isKillTimeout && backupTarget != null && backupTarget.app.getPid() == pid) {
                Slog.w(TAG, "Unattached app died before backup, skipping");
                final int userId = successor.userId;
                final String packageName = successor.info.packageName;
                this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService.7
                    @Override // java.lang.Runnable
                    public void run() {
                        try {
                            IBackupManager bm = IBackupManager.Stub.asInterface(ServiceManager.getService(HostingRecord.HOSTING_TYPE_BACKUP));
                            bm.agentDisconnectedForUser(userId, packageName);
                        } catch (RemoteException e) {
                        }
                    }
                });
            }
            if (!isKillTimeout) {
                if (isPendingBroadcastProcessLocked(pid)) {
                    Slog.w(TAG, "Unattached app died before broadcast acknowledged, skipping");
                    skipPendingBroadcastLocked(pid);
                }
            } else if (isPendingBroadcastProcessLocked(successor)) {
                skipCurrentReceiverLocked(successor);
            }
            return;
        }
        Slog.w(TAG, "Spurious process start timeout - pid not known for " + app);
    }

    /* JADX DEBUG: Another duplicated slice has different insns count: {[MOVE, CONST]}, finally: {[MOVE] complete} */
    /* JADX DEBUG: Another duplicated slice has different insns count: {[MOVE, INVOKE]}, finally: {[MOVE] complete} */
    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [5358=9] */
    /* JADX DEBUG: Incorrect finally slice size: {[MOVE, INVOKE] complete}, expected: {[MOVE] complete} */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:139:0x031d A[Catch: Exception -> 0x02b6, TRY_ENTER, TRY_LEAVE, TryCatch #7 {Exception -> 0x02b6, blocks: (B:95:0x02a6, B:97:0x02ad, B:121:0x02f0, B:123:0x02fa, B:125:0x0300, B:127:0x0305, B:129:0x030a, B:139:0x031d), top: B:363:0x02a6 }] */
    /* JADX WARN: Removed duplicated region for block: B:145:0x032d  */
    /* JADX WARN: Removed duplicated region for block: B:156:0x036b  */
    /* JADX WARN: Removed duplicated region for block: B:158:0x0370 A[Catch: Exception -> 0x0373, TRY_LEAVE, TryCatch #9 {Exception -> 0x0373, blocks: (B:151:0x034e, B:158:0x0370, B:165:0x0391, B:167:0x0397, B:173:0x03ac, B:175:0x03b6, B:184:0x03db, B:186:0x03e5, B:193:0x0402, B:198:0x0429, B:201:0x044d), top: B:366:0x034e }] */
    /* JADX WARN: Removed duplicated region for block: B:173:0x03ac A[Catch: Exception -> 0x0373, TRY_ENTER, TryCatch #9 {Exception -> 0x0373, blocks: (B:151:0x034e, B:158:0x0370, B:165:0x0391, B:167:0x0397, B:173:0x03ac, B:175:0x03b6, B:184:0x03db, B:186:0x03e5, B:193:0x0402, B:198:0x0429, B:201:0x044d), top: B:366:0x034e }] */
    /* JADX WARN: Removed duplicated region for block: B:178:0x03ca  */
    /* JADX WARN: Removed duplicated region for block: B:184:0x03db A[Catch: Exception -> 0x0373, TRY_ENTER, TryCatch #9 {Exception -> 0x0373, blocks: (B:151:0x034e, B:158:0x0370, B:165:0x0391, B:167:0x0397, B:173:0x03ac, B:175:0x03b6, B:184:0x03db, B:186:0x03e5, B:193:0x0402, B:198:0x0429, B:201:0x044d), top: B:366:0x034e }] */
    /* JADX WARN: Removed duplicated region for block: B:193:0x0402 A[Catch: Exception -> 0x0373, TRY_ENTER, TRY_LEAVE, TryCatch #9 {Exception -> 0x0373, blocks: (B:151:0x034e, B:158:0x0370, B:165:0x0391, B:167:0x0397, B:173:0x03ac, B:175:0x03b6, B:184:0x03db, B:186:0x03e5, B:193:0x0402, B:198:0x0429, B:201:0x044d), top: B:366:0x034e }] */
    /* JADX WARN: Removed duplicated region for block: B:195:0x040a  */
    /* JADX WARN: Removed duplicated region for block: B:198:0x0429 A[Catch: Exception -> 0x0373, TRY_ENTER, TRY_LEAVE, TryCatch #9 {Exception -> 0x0373, blocks: (B:151:0x034e, B:158:0x0370, B:165:0x0391, B:167:0x0397, B:173:0x03ac, B:175:0x03b6, B:184:0x03db, B:186:0x03e5, B:193:0x0402, B:198:0x0429, B:201:0x044d), top: B:366:0x034e }] */
    /* JADX WARN: Removed duplicated region for block: B:201:0x044d A[Catch: Exception -> 0x0373, TRY_ENTER, TRY_LEAVE, TryCatch #9 {Exception -> 0x0373, blocks: (B:151:0x034e, B:158:0x0370, B:165:0x0391, B:167:0x0397, B:173:0x03ac, B:175:0x03b6, B:184:0x03db, B:186:0x03e5, B:193:0x0402, B:198:0x0429, B:201:0x044d), top: B:366:0x034e }] */
    /* JADX WARN: Removed duplicated region for block: B:203:0x0466  */
    /* JADX WARN: Removed duplicated region for block: B:231:0x056e A[Catch: Exception -> 0x04e4, TRY_ENTER, TRY_LEAVE, TryCatch #17 {Exception -> 0x04e4, blocks: (B:231:0x056e, B:208:0x0472, B:214:0x0488), top: B:380:0x0472 }] */
    /* JADX WARN: Removed duplicated region for block: B:233:0x0574  */
    /* JADX WARN: Removed duplicated region for block: B:292:0x06f5  */
    /* JADX WARN: Removed duplicated region for block: B:294:0x0707  */
    /* JADX WARN: Removed duplicated region for block: B:361:0x02cb A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:382:0x0578 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:384:0x0332 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:394:0x037b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private boolean attachApplicationLocked(IApplicationThread thread, int pid, int callingUid, long startSeq) {
        long startTime;
        ProcessRecord app;
        int i;
        boolean z;
        boolean z2;
        boolean enableTrackAllocation;
        int i2;
        boolean isRestrictedBackupMode;
        ActiveInstrumentation instr;
        int i3;
        String protoLogParam0;
        String protoLogParam1;
        boolean z3;
        ApplicationInfo applicationInfo;
        ProfilerInfo profilerInfo;
        AutofillOptions autofillOptions;
        AutofillOptions autofillOptions2;
        ContentCaptureOptions contentCaptureOptions;
        FontManagerInternal fm;
        SharedMemory serializedSystemFontMap;
        PlatformCompat platformCompat;
        String str;
        String str2;
        BackupRecord backupTarget;
        ComponentName componentName;
        long startTime2;
        boolean z4;
        boolean z5;
        boolean didSomething;
        boolean badApp;
        long startTime3;
        boolean z6;
        int i4;
        boolean badApp2;
        ContentCaptureManagerInternal ccm;
        ProcessRecord pending;
        ProcessRecord app2;
        ProcessRecord pending2;
        long startTime4 = SystemClock.uptimeMillis();
        int i5 = MY_PID;
        if (pid == i5 || pid < 0) {
            startTime = startTime4;
            app = null;
        } else {
            synchronized (this.mPidsSelfLocked) {
                try {
                    app2 = this.mPidsSelfLocked.get(pid);
                } catch (Throwable th) {
                    th = th;
                    while (true) {
                        try {
                            break;
                        } catch (Throwable th2) {
                            th = th2;
                        }
                    }
                    throw th;
                }
            }
            if (app2 == null) {
                app = app2;
                startTime = startTime4;
            } else if (app2.getStartUid() == callingUid && app2.getStartSeq() == startSeq) {
                app = app2;
                startTime = startTime4;
            } else {
                String msg = "attachApplicationLocked process:" + (this.mProcessList.mPendingStarts.get(startSeq) != null ? pending2.processName : null) + " startSeq:" + startSeq + " pid:" + pid + " belongs to another existing app:" + app2.processName + " startSeq:" + app2.getStartSeq();
                Slog.wtf(TAG, msg);
                EventLog.writeEvent(1397638484, "131105245", Integer.valueOf(app2.getStartUid()), msg);
                startTime = startTime4;
                cleanUpApplicationRecordLocked(app2, pid, false, false, -1, true, false);
                removePidLocked(pid, app2);
                app = null;
            }
        }
        ProcessRecord app3 = (app == null && startSeq > 0 && (pending = this.mProcessList.mPendingStarts.get(startSeq)) != null && pending.getStartUid() == callingUid && pending.getStartSeq() == startSeq && this.mProcessList.handleProcessStartedLocked(pending, pid, pending.isUsingWrapper(), startSeq, true)) ? pending : app;
        if (app3 == null) {
            Slog.w(TAG, "No pending application record for pid " + pid + " (IApplicationThread " + thread + "); dropping process");
            EventLogTags.writeAmDropProcess(pid);
            if (pid > 0 && pid != i5) {
                Process.killProcessQuiet(pid);
                return false;
            }
            try {
                thread.scheduleExit();
                return false;
            } catch (Exception e) {
                return false;
            }
        }
        if (app3.getThread() != null) {
            handleAppDiedLocked(app3, pid, true, true, false);
        }
        if (ActivityManagerDebugConfig.DEBUG_ALL) {
            Slog.v(TAG, "Binding process pid " + pid + " to record " + app3);
        }
        String processName = app3.processName;
        try {
            AppDeathRecipient adr = new AppDeathRecipient(app3, pid, thread);
            thread.asBinder().linkToDeath(adr, 0);
            app3.setDeathRecipient(adr);
            EventLogTags.writeAmProcBound(app3.userId, pid, app3.processName);
            synchronized (this.mProcLock) {
                try {
                    boostPriorityForProcLockedSection();
                    app3.mState.setCurAdj(-10000);
                    app3.mState.setSetAdj(-10000);
                    app3.mState.setVerifiedAdj(-10000);
                    this.mOomAdjuster.setAttachingSchedGroupLSP(app3);
                    app3.mState.setForcingToImportant(null);
                    updateProcessForegroundLocked(app3, false, 0, false);
                    app3.mState.setHasShownUi(false);
                    app3.mState.setCached(false);
                    app3.setDebugging(false);
                    app3.setKilledByAm(false);
                    app3.setKilled(false);
                    app3.setUnlocked(StorageManager.isUserKeyUnlocked(app3.userId));
                } catch (Throwable th3) {
                    e = th3;
                    while (true) {
                        try {
                            break;
                        } catch (Throwable th4) {
                            e = th4;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                    throw e;
                }
            }
            resetPriorityAfterProcLockedSection();
            this.mHandler.removeMessages(20, app3);
            boolean normalMode = this.mProcessesReady || isAllowedWhileBooting(app3.info);
            List<ProviderInfo> providers = normalMode ? this.mCpHelper.generateApplicationProvidersLocked(app3) : null;
            if (providers != null && this.mCpHelper.checkAppInLaunchingProvidersLocked(app3)) {
                Message msg2 = this.mHandler.obtainMessage(57);
                msg2.obj = app3;
                this.mHandler.sendMessageDelayed(msg2, ContentResolver.CONTENT_PROVIDER_PUBLISH_TIMEOUT_MILLIS);
            }
            long startTime5 = startTime;
            checkTime(startTime5, "attachApplicationLocked: before bindApplication");
            if (!normalMode) {
                Slog.i(TAG, "Launching preboot mode app: " + app3);
            }
            if (ActivityManagerDebugConfig.DEBUG_ALL) {
                Slog.v(TAG, "New app record " + app3 + " thread=" + thread.asBinder() + " pid=" + pid);
            }
            BackupRecord backupTarget2 = this.mBackupTargets.get(app3.userId);
            int testMode = 0;
            try {
                String str3 = this.mDebugApp;
                try {
                    try {
                        if (str3 != null) {
                            try {
                                if (str3.equals(processName)) {
                                    testMode = this.mWaitForDebugger ? 2 : 1;
                                    z2 = true;
                                    try {
                                        app3.setDebugging(true);
                                        if (this.mDebugTransient) {
                                            this.mDebugApp = this.mOrigDebugApp;
                                            this.mWaitForDebugger = this.mOrigWaitForDebugger;
                                        }
                                        int testMode2 = testMode;
                                        synchronized (this.mProcLock) {
                                            try {
                                                boostPriorityForProcLockedSection();
                                                String str4 = this.mTrackAllocationApp;
                                                try {
                                                    try {
                                                        if (str4 != null) {
                                                            try {
                                                                if (str4.equals(processName)) {
                                                                    this.mTrackAllocationApp = null;
                                                                    enableTrackAllocation = true;
                                                                    resetPriorityAfterProcLockedSection();
                                                                    if (backupTarget2 == null && backupTarget2.appInfo.packageName.equals(processName)) {
                                                                        if (backupTarget2.appInfo.uid >= 10000) {
                                                                            i2 = 2;
                                                                            isRestrictedBackupMode = (backupTarget2.backupMode == 2 || backupTarget2.backupMode == 3 || backupTarget2.backupMode == z2) ? z2 : false;
                                                                        } else {
                                                                            i2 = 2;
                                                                        }
                                                                    } else {
                                                                        i2 = 2;
                                                                        isRestrictedBackupMode = false;
                                                                    }
                                                                    instr = app3.getActiveInstrumentation();
                                                                    if (instr == null) {
                                                                        i3 = 7;
                                                                        try {
                                                                            notifyPackageUse(instr.mClass.getPackageName(), 7);
                                                                        } catch (Exception e2) {
                                                                            e = e2;
                                                                            i = 7;
                                                                            z = true;
                                                                            Slog.wtf(TAG, "Exception thrown during bind of " + app3, e);
                                                                            app3.resetPackageList(this.mProcessStats);
                                                                            app3.unlinkDeathRecipient();
                                                                            app3.killLocked("error during bind", i, z);
                                                                            handleAppDiedLocked(app3, pid, false, true, false);
                                                                            return false;
                                                                        }
                                                                    } else {
                                                                        i3 = 7;
                                                                    }
                                                                    if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled) {
                                                                        z3 = true;
                                                                    } else {
                                                                        try {
                                                                            protoLogParam0 = String.valueOf(processName);
                                                                            protoLogParam1 = String.valueOf(app3.getWindowProcessController().getConfiguration());
                                                                        } catch (Exception e3) {
                                                                            e = e3;
                                                                            i = i3;
                                                                            z = true;
                                                                        }
                                                                        try {
                                                                            ProtoLogGroup protoLogGroup = ProtoLogGroup.WM_DEBUG_CONFIGURATION;
                                                                            Object[] objArr = new Object[i2];
                                                                            objArr[0] = protoLogParam0;
                                                                            z3 = true;
                                                                            try {
                                                                                objArr[1] = protoLogParam1;
                                                                                ProtoLogImpl.v(protoLogGroup, -593535526, 0, (String) null, objArr);
                                                                            } catch (Exception e4) {
                                                                                e = e4;
                                                                                z = z3;
                                                                                i = 7;
                                                                                Slog.wtf(TAG, "Exception thrown during bind of " + app3, e);
                                                                                app3.resetPackageList(this.mProcessStats);
                                                                                app3.unlinkDeathRecipient();
                                                                                app3.killLocked("error during bind", i, z);
                                                                                handleAppDiedLocked(app3, pid, false, true, false);
                                                                                return false;
                                                                            }
                                                                        } catch (Exception e5) {
                                                                            e = e5;
                                                                            z = true;
                                                                            i = 7;
                                                                            Slog.wtf(TAG, "Exception thrown during bind of " + app3, e);
                                                                            app3.resetPackageList(this.mProcessStats);
                                                                            app3.unlinkDeathRecipient();
                                                                            app3.killLocked("error during bind", i, z);
                                                                            handleAppDiedLocked(app3, pid, false, true, false);
                                                                            return false;
                                                                        }
                                                                    }
                                                                    if (instr == null) {
                                                                        applicationInfo = instr.mTargetInfo;
                                                                    } else {
                                                                        try {
                                                                            applicationInfo = app3.info;
                                                                        } catch (Exception e6) {
                                                                            e = e6;
                                                                            z = z3;
                                                                            i = 7;
                                                                            Slog.wtf(TAG, "Exception thrown during bind of " + app3, e);
                                                                            app3.resetPackageList(this.mProcessStats);
                                                                            app3.unlinkDeathRecipient();
                                                                            app3.killLocked("error during bind", i, z);
                                                                            handleAppDiedLocked(app3, pid, false, true, false);
                                                                            return false;
                                                                        }
                                                                    }
                                                                    ApplicationInfo appInfo = applicationInfo;
                                                                    app3.setCompat(compatibilityInfoForPackage(appInfo));
                                                                    profilerInfo = this.mAppProfiler.setupProfilerInfoLocked(thread, app3, instr);
                                                                    String buildSerial = (!appInfo.isInstantApp() || appInfo.targetSdkVersion >= 28) ? UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN : sTheRealBuildSerial;
                                                                    if (UserHandle.getAppId(app3.info.uid) < 10000) {
                                                                        AutofillManagerInternal afm = (AutofillManagerInternal) LocalServices.getService(AutofillManagerInternal.class);
                                                                        if (afm != null) {
                                                                            autofillOptions2 = afm.getAutofillOptions(app3.info.packageName, app3.info.longVersionCode, app3.userId);
                                                                            if (UserHandle.getAppId(app3.info.uid) >= 10000 || (ccm = (ContentCaptureManagerInternal) LocalServices.getService(ContentCaptureManagerInternal.class)) == null) {
                                                                                contentCaptureOptions = null;
                                                                            } else {
                                                                                ContentCaptureOptions contentCaptureOptions2 = ccm.getOptionsForPackage(app3.userId, app3.info.packageName);
                                                                                contentCaptureOptions = contentCaptureOptions2;
                                                                            }
                                                                            fm = (FontManagerInternal) LocalServices.getService(FontManagerInternal.class);
                                                                            if (fm != null) {
                                                                                SharedMemory serializedSystemFontMap2 = fm.getSerializedSystemFontMap();
                                                                                serializedSystemFontMap = serializedSystemFontMap2;
                                                                            } else {
                                                                                serializedSystemFontMap = null;
                                                                            }
                                                                            checkTime(startTime5, "attachApplicationLocked: immediately before bindApplication");
                                                                            long bindApplicationTimeMillis = SystemClock.uptimeMillis();
                                                                            this.mAtmInternal.preBindApplication(app3.getWindowProcessController());
                                                                            ActiveInstrumentation instr2 = app3.getActiveInstrumentation();
                                                                            platformCompat = this.mPlatformCompat;
                                                                            if (platformCompat != null) {
                                                                                platformCompat.resetReporting(app3.info);
                                                                            }
                                                                            ProviderInfoList providerList = ProviderInfoList.fromList(providers);
                                                                            Bundle coreSettings = this.mCoreSettingsObserver.getCoreSettingsLocked();
                                                                            IActivityManagerServiceLice.Instance().onAttachApplicationLocked(this.mContext, appInfo, coreSettings);
                                                                            if (app3.getIsolatedEntryPoint() != null) {
                                                                                thread.runIsolatedEntryPoint(app3.getIsolatedEntryPoint(), app3.getIsolatedEntryPointArgs());
                                                                                backupTarget = backupTarget2;
                                                                                startTime2 = startTime5;
                                                                            } else if (instr2 != null) {
                                                                                try {
                                                                                    str = app3.sdkSandboxClientAppVolumeUuid;
                                                                                    str2 = app3.sdkSandboxClientAppPackage;
                                                                                    backupTarget = backupTarget2;
                                                                                    try {
                                                                                        componentName = instr2.mClass;
                                                                                        startTime2 = startTime5;
                                                                                    } catch (Exception e7) {
                                                                                        e = e7;
                                                                                        z = z3;
                                                                                        i = 7;
                                                                                        Slog.wtf(TAG, "Exception thrown during bind of " + app3, e);
                                                                                        app3.resetPackageList(this.mProcessStats);
                                                                                        app3.unlinkDeathRecipient();
                                                                                        app3.killLocked("error during bind", i, z);
                                                                                        handleAppDiedLocked(app3, pid, false, true, false);
                                                                                        return false;
                                                                                    }
                                                                                } catch (Exception e8) {
                                                                                    e = e8;
                                                                                    z = z3;
                                                                                    i = 7;
                                                                                }
                                                                                try {
                                                                                    Bundle bundle = instr2.mArguments;
                                                                                    IInstrumentationWatcher iInstrumentationWatcher = instr2.mWatcher;
                                                                                    IUiAutomationConnection iUiAutomationConnection = instr2.mUiAutomationConnection;
                                                                                    AutofillOptions autofillOptions3 = autofillOptions2;
                                                                                    boolean z7 = this.mBinderTransactionTrackingEnabled;
                                                                                    if (!isRestrictedBackupMode && normalMode) {
                                                                                        z4 = false;
                                                                                        thread.bindApplication(processName, appInfo, str, str2, providerList, componentName, profilerInfo, bundle, iInstrumentationWatcher, iUiAutomationConnection, testMode2, z7, enableTrackAllocation, z4, app3.isPersistent(), new Configuration(app3.getWindowProcessController().getConfiguration()), app3.getCompat(), getCommonServicesLocked(app3.isolated), coreSettings, buildSerial, autofillOptions3, contentCaptureOptions, app3.getDisabledCompatChanges(), serializedSystemFontMap, app3.getStartElapsedTime(), app3.getStartUptime());
                                                                                    }
                                                                                    z4 = z3;
                                                                                    thread.bindApplication(processName, appInfo, str, str2, providerList, componentName, profilerInfo, bundle, iInstrumentationWatcher, iUiAutomationConnection, testMode2, z7, enableTrackAllocation, z4, app3.isPersistent(), new Configuration(app3.getWindowProcessController().getConfiguration()), app3.getCompat(), getCommonServicesLocked(app3.isolated), coreSettings, buildSerial, autofillOptions3, contentCaptureOptions, app3.getDisabledCompatChanges(), serializedSystemFontMap, app3.getStartElapsedTime(), app3.getStartUptime());
                                                                                } catch (Exception e9) {
                                                                                    e = e9;
                                                                                    z = z3;
                                                                                    startTime5 = startTime2;
                                                                                    i = 7;
                                                                                    Slog.wtf(TAG, "Exception thrown during bind of " + app3, e);
                                                                                    app3.resetPackageList(this.mProcessStats);
                                                                                    app3.unlinkDeathRecipient();
                                                                                    app3.killLocked("error during bind", i, z);
                                                                                    handleAppDiedLocked(app3, pid, false, true, false);
                                                                                    return false;
                                                                                }
                                                                            } else {
                                                                                boolean isRestrictedBackupMode2 = isRestrictedBackupMode;
                                                                                AutofillOptions autofillOptions4 = autofillOptions2;
                                                                                backupTarget = backupTarget2;
                                                                                startTime2 = startTime5;
                                                                                try {
                                                                                    String str5 = app3.sdkSandboxClientAppVolumeUuid;
                                                                                    String str6 = app3.sdkSandboxClientAppPackage;
                                                                                    boolean z8 = this.mBinderTransactionTrackingEnabled;
                                                                                    if (!isRestrictedBackupMode2 && normalMode) {
                                                                                        z5 = false;
                                                                                        thread.bindApplication(processName, appInfo, str5, str6, providerList, (ComponentName) null, profilerInfo, (Bundle) null, (IInstrumentationWatcher) null, (IUiAutomationConnection) null, testMode2, z8, enableTrackAllocation, z5, app3.isPersistent(), new Configuration(app3.getWindowProcessController().getConfiguration()), app3.getCompat(), getCommonServicesLocked(app3.isolated), coreSettings, buildSerial, autofillOptions4, contentCaptureOptions, app3.getDisabledCompatChanges(), serializedSystemFontMap, app3.getStartElapsedTime(), app3.getStartUptime());
                                                                                    }
                                                                                    z5 = z3;
                                                                                    thread.bindApplication(processName, appInfo, str5, str6, providerList, (ComponentName) null, profilerInfo, (Bundle) null, (IInstrumentationWatcher) null, (IUiAutomationConnection) null, testMode2, z8, enableTrackAllocation, z5, app3.isPersistent(), new Configuration(app3.getWindowProcessController().getConfiguration()), app3.getCompat(), getCommonServicesLocked(app3.isolated), coreSettings, buildSerial, autofillOptions4, contentCaptureOptions, app3.getDisabledCompatChanges(), serializedSystemFontMap, app3.getStartElapsedTime(), app3.getStartUptime());
                                                                                } catch (Exception e10) {
                                                                                    e = e10;
                                                                                    z = z3;
                                                                                    startTime5 = startTime2;
                                                                                    i = 7;
                                                                                    Slog.wtf(TAG, "Exception thrown during bind of " + app3, e);
                                                                                    app3.resetPackageList(this.mProcessStats);
                                                                                    app3.unlinkDeathRecipient();
                                                                                    app3.killLocked("error during bind", i, z);
                                                                                    handleAppDiedLocked(app3, pid, false, true, false);
                                                                                    return false;
                                                                                }
                                                                            }
                                                                            if (profilerInfo != null) {
                                                                                profilerInfo.closeFd();
                                                                            }
                                                                            synchronized (this.mProcLock) {
                                                                                try {
                                                                                    boostPriorityForProcLockedSection();
                                                                                    app3.makeActive(thread, this.mProcessStats);
                                                                                    startTime5 = startTime2;
                                                                                    try {
                                                                                        checkTime(startTime5, "attachApplicationLocked: immediately after bindApplication");
                                                                                        try {
                                                                                            resetPriorityAfterProcLockedSection();
                                                                                            updateLruProcessLocked(app3, false, null);
                                                                                            checkTime(startTime5, "attachApplicationLocked: after updateLruProcessLocked");
                                                                                            long now = SystemClock.uptimeMillis();
                                                                                            synchronized (this.mAppProfiler.mProfilerLock) {
                                                                                                app3.mProfile.setLastRequestedGc(now);
                                                                                                app3.mProfile.setLastLowMemory(now);
                                                                                            }
                                                                                            this.mPersistentStartingProcesses.remove(app3);
                                                                                            if (ActivityManagerDebugConfig.DEBUG_PROCESSES && this.mProcessesOnHold.contains(app3)) {
                                                                                                Slog.v(TAG_PROCESSES, "Attach application locked removing on hold: " + app3);
                                                                                            }
                                                                                            this.mProcessesOnHold.remove(app3);
                                                                                            boolean badApp3 = false;
                                                                                            boolean didSomething2 = false;
                                                                                            if (normalMode) {
                                                                                                try {
                                                                                                    didSomething2 = this.mAtmInternal.attachApplication(app3.getWindowProcessController());
                                                                                                } catch (Exception e11) {
                                                                                                    Slog.wtf(TAG, "Exception thrown launching activities in " + app3, e11);
                                                                                                    badApp3 = true;
                                                                                                }
                                                                                            }
                                                                                            if (!badApp3) {
                                                                                                try {
                                                                                                    didSomething2 |= this.mServices.attachApplicationLocked(app3, processName);
                                                                                                    checkTime(startTime5, "attachApplicationLocked: after mServices.attachApplicationLocked");
                                                                                                } catch (Exception e12) {
                                                                                                    Slog.wtf(TAG, "Exception thrown starting services in " + app3, e12);
                                                                                                    badApp3 = true;
                                                                                                }
                                                                                            }
                                                                                            if (!badApp3) {
                                                                                                updateUidReadyForBootCompletedBroadcastLocked(app3.uid);
                                                                                            }
                                                                                            if (!badApp3 && isPendingBroadcastProcessLocked(pid)) {
                                                                                                try {
                                                                                                    didSomething2 |= sendPendingBroadcastsLocked(app3);
                                                                                                    checkTime(startTime5, "attachApplicationLocked: after sendPendingBroadcastsLocked");
                                                                                                    badApp = badApp3;
                                                                                                    didSomething = didSomething2;
                                                                                                } catch (Exception e13) {
                                                                                                    Slog.wtf(TAG, "Exception thrown dispatching broadcasts in " + app3, e13);
                                                                                                    badApp = true;
                                                                                                    didSomething = didSomething2;
                                                                                                }
                                                                                                if (!badApp || backupTarget == null) {
                                                                                                    startTime3 = startTime5;
                                                                                                    z6 = z3;
                                                                                                    i4 = 7;
                                                                                                } else {
                                                                                                    BackupRecord backupTarget3 = backupTarget;
                                                                                                    if (backupTarget3.app == app3) {
                                                                                                        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                                                                                                            Slog.v(TAG_BACKUP, "New app is backup target, launching agent for " + app3);
                                                                                                        }
                                                                                                        notifyPackageUse(backupTarget3.appInfo.packageName, 5);
                                                                                                        try {
                                                                                                            z6 = z3;
                                                                                                            i4 = 7;
                                                                                                            startTime3 = startTime5;
                                                                                                        } catch (Exception e14) {
                                                                                                            e = e14;
                                                                                                            startTime3 = startTime5;
                                                                                                            z6 = z3;
                                                                                                            i4 = 7;
                                                                                                        }
                                                                                                        try {
                                                                                                            thread.scheduleCreateBackupAgent(backupTarget3.appInfo, compatibilityInfoForPackage(backupTarget3.appInfo), backupTarget3.backupMode, backupTarget3.userId, backupTarget3.operationType);
                                                                                                        } catch (Exception e15) {
                                                                                                            e = e15;
                                                                                                            Slog.wtf(TAG, "Exception thrown creating backup agent in " + app3, e);
                                                                                                            badApp2 = true;
                                                                                                            if (badApp2) {
                                                                                                            }
                                                                                                        }
                                                                                                    } else {
                                                                                                        startTime3 = startTime5;
                                                                                                        z6 = z3;
                                                                                                        i4 = 7;
                                                                                                    }
                                                                                                }
                                                                                                badApp2 = badApp;
                                                                                                if (badApp2) {
                                                                                                    app3.killLocked("error during init", i4, z6);
                                                                                                    handleAppDiedLocked(app3, pid, false, true, false);
                                                                                                    return false;
                                                                                                }
                                                                                                if (!didSomething) {
                                                                                                    updateOomAdjLocked(app3, "updateOomAdj_processBegin");
                                                                                                    checkTime(startTime3, "attachApplicationLocked: after updateOomAdjLocked");
                                                                                                }
                                                                                                HostingRecord hostingRecord = app3.getHostingRecord();
                                                                                                String shortAction = getShortAction(hostingRecord.getAction());
                                                                                                FrameworkStatsLog.write(169, app3.info.uid, pid, app3.info.packageName, 3, app3.getStartElapsedTime(), (int) (bindApplicationTimeMillis - app3.getStartUptime()), (int) (SystemClock.uptimeMillis() - app3.getStartUptime()), hostingRecord.getType(), hostingRecord.getName(), shortAction, HostingRecord.getHostingTypeIdStatsd(hostingRecord.getType()));
                                                                                                return true;
                                                                                            }
                                                                                            badApp = badApp3;
                                                                                            didSomething = didSomething2;
                                                                                            if (badApp) {
                                                                                            }
                                                                                            startTime3 = startTime5;
                                                                                            z6 = z3;
                                                                                            i4 = 7;
                                                                                            badApp2 = badApp;
                                                                                            if (badApp2) {
                                                                                            }
                                                                                        } catch (Exception e16) {
                                                                                            e = e16;
                                                                                            z = z3;
                                                                                            i = 7;
                                                                                            Slog.wtf(TAG, "Exception thrown during bind of " + app3, e);
                                                                                            app3.resetPackageList(this.mProcessStats);
                                                                                            app3.unlinkDeathRecipient();
                                                                                            app3.killLocked("error during bind", i, z);
                                                                                            handleAppDiedLocked(app3, pid, false, true, false);
                                                                                            return false;
                                                                                        }
                                                                                    } catch (Throwable th5) {
                                                                                        th = th5;
                                                                                        while (true) {
                                                                                            try {
                                                                                                break;
                                                                                            } catch (Throwable th6) {
                                                                                                th = th6;
                                                                                            }
                                                                                        }
                                                                                        resetPriorityAfterProcLockedSection();
                                                                                        throw th;
                                                                                    }
                                                                                } catch (Throwable th7) {
                                                                                    th = th7;
                                                                                }
                                                                            }
                                                                        } else {
                                                                            autofillOptions = null;
                                                                        }
                                                                    } else {
                                                                        autofillOptions = null;
                                                                    }
                                                                    autofillOptions2 = autofillOptions;
                                                                    if (UserHandle.getAppId(app3.info.uid) >= 10000) {
                                                                    }
                                                                    contentCaptureOptions = null;
                                                                    fm = (FontManagerInternal) LocalServices.getService(FontManagerInternal.class);
                                                                    if (fm != null) {
                                                                    }
                                                                    checkTime(startTime5, "attachApplicationLocked: immediately before bindApplication");
                                                                    long bindApplicationTimeMillis2 = SystemClock.uptimeMillis();
                                                                    this.mAtmInternal.preBindApplication(app3.getWindowProcessController());
                                                                    ActiveInstrumentation instr22 = app3.getActiveInstrumentation();
                                                                    platformCompat = this.mPlatformCompat;
                                                                    if (platformCompat != null) {
                                                                    }
                                                                    ProviderInfoList providerList2 = ProviderInfoList.fromList(providers);
                                                                    Bundle coreSettings2 = this.mCoreSettingsObserver.getCoreSettingsLocked();
                                                                    IActivityManagerServiceLice.Instance().onAttachApplicationLocked(this.mContext, appInfo, coreSettings2);
                                                                    if (app3.getIsolatedEntryPoint() != null) {
                                                                    }
                                                                    if (profilerInfo != null) {
                                                                    }
                                                                    synchronized (this.mProcLock) {
                                                                    }
                                                                }
                                                            } catch (Throwable th8) {
                                                                th = th8;
                                                                while (true) {
                                                                    try {
                                                                        break;
                                                                    } catch (Throwable th9) {
                                                                        th = th9;
                                                                    }
                                                                }
                                                                resetPriorityAfterProcLockedSection();
                                                                throw th;
                                                            }
                                                        }
                                                        if (ProtoLogCache.WM_DEBUG_CONFIGURATION_enabled) {
                                                        }
                                                        if (instr == null) {
                                                        }
                                                        ApplicationInfo appInfo2 = applicationInfo;
                                                        app3.setCompat(compatibilityInfoForPackage(appInfo2));
                                                        profilerInfo = this.mAppProfiler.setupProfilerInfoLocked(thread, app3, instr);
                                                        String buildSerial2 = (!appInfo2.isInstantApp() || appInfo2.targetSdkVersion >= 28) ? UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN : sTheRealBuildSerial;
                                                        if (UserHandle.getAppId(app3.info.uid) < 10000) {
                                                        }
                                                        autofillOptions2 = autofillOptions;
                                                        if (UserHandle.getAppId(app3.info.uid) >= 10000) {
                                                        }
                                                        contentCaptureOptions = null;
                                                        fm = (FontManagerInternal) LocalServices.getService(FontManagerInternal.class);
                                                        if (fm != null) {
                                                        }
                                                        checkTime(startTime5, "attachApplicationLocked: immediately before bindApplication");
                                                        long bindApplicationTimeMillis22 = SystemClock.uptimeMillis();
                                                        this.mAtmInternal.preBindApplication(app3.getWindowProcessController());
                                                        ActiveInstrumentation instr222 = app3.getActiveInstrumentation();
                                                        platformCompat = this.mPlatformCompat;
                                                        if (platformCompat != null) {
                                                        }
                                                        ProviderInfoList providerList22 = ProviderInfoList.fromList(providers);
                                                        Bundle coreSettings22 = this.mCoreSettingsObserver.getCoreSettingsLocked();
                                                        IActivityManagerServiceLice.Instance().onAttachApplicationLocked(this.mContext, appInfo2, coreSettings22);
                                                        if (app3.getIsolatedEntryPoint() != null) {
                                                        }
                                                        if (profilerInfo != null) {
                                                        }
                                                        synchronized (this.mProcLock) {
                                                        }
                                                    } catch (Exception e17) {
                                                        e = e17;
                                                        i = i3;
                                                        z = true;
                                                        Slog.wtf(TAG, "Exception thrown during bind of " + app3, e);
                                                        app3.resetPackageList(this.mProcessStats);
                                                        app3.unlinkDeathRecipient();
                                                        app3.killLocked("error during bind", i, z);
                                                        handleAppDiedLocked(app3, pid, false, true, false);
                                                        return false;
                                                    }
                                                    resetPriorityAfterProcLockedSection();
                                                    if (backupTarget2 == null) {
                                                    }
                                                    i2 = 2;
                                                    isRestrictedBackupMode = false;
                                                    instr = app3.getActiveInstrumentation();
                                                    if (instr == null) {
                                                    }
                                                } catch (Throwable th10) {
                                                    th = th10;
                                                    while (true) {
                                                        break;
                                                        break;
                                                    }
                                                    resetPriorityAfterProcLockedSection();
                                                    throw th;
                                                }
                                                enableTrackAllocation = false;
                                            } catch (Throwable th11) {
                                                th = th11;
                                            }
                                        }
                                    } catch (Exception e18) {
                                        e = e18;
                                        z = z2;
                                        i = 7;
                                        Slog.wtf(TAG, "Exception thrown during bind of " + app3, e);
                                        app3.resetPackageList(this.mProcessStats);
                                        app3.unlinkDeathRecipient();
                                        app3.killLocked("error during bind", i, z);
                                        handleAppDiedLocked(app3, pid, false, true, false);
                                        return false;
                                    }
                                }
                            } catch (Exception e19) {
                                e = e19;
                                i = 7;
                                z = true;
                                Slog.wtf(TAG, "Exception thrown during bind of " + app3, e);
                                app3.resetPackageList(this.mProcessStats);
                                app3.unlinkDeathRecipient();
                                app3.killLocked("error during bind", i, z);
                                handleAppDiedLocked(app3, pid, false, true, false);
                                return false;
                            }
                        }
                        synchronized (this.mProcLock) {
                        }
                    }
                } catch (Exception e20) {
                    e = e20;
                    z = z2;
                }
                z2 = true;
                int testMode22 = testMode;
            } catch (Exception e21) {
                e = e21;
                i = 7;
            }
        } catch (RemoteException e22) {
            app3.resetPackageList(this.mProcessStats);
            this.mProcessList.startProcessLocked(app3, new HostingRecord(HostingRecord.HOSTING_TYPE_LINK_FAIL, processName), 0);
            return false;
        }
    }

    public final void attachApplication(IApplicationThread thread, long startSeq) {
        if (thread == null) {
            throw new SecurityException("Invalid application interface");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int callingPid = Binder.getCallingPid();
                int callingUid = Binder.getCallingUid();
                long origId = Binder.clearCallingIdentity();
                attachApplicationLocked(thread, callingPid, callingUid, startSeq);
                Binder.restoreCallingIdentity(origId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static String getShortAction(String action) {
        int index;
        if (action == null || (index = action.lastIndexOf(46)) == -1 || index == action.length() - 1) {
            return action;
        }
        String shortAction = action.substring(index + 1);
        return shortAction;
    }

    void checkTime(long startTime, String where) {
        long now = SystemClock.uptimeMillis();
        if (now - startTime > 50) {
            Slog.w(TAG, "Slow operation: " + (now - startTime) + "ms so far, now at " + where);
        }
    }

    public void showBootMessage(CharSequence msg, boolean always) {
        if (Binder.getCallingUid() != Process.myUid()) {
            throw new SecurityException();
        }
        this.mWindowManager.showBootMessage(msg, always);
    }

    /* JADX DEBUG: Another duplicated slice has different insns count: {[]}, finally: {[INVOKE] complete} */
    final void finishBooting() {
        TimingsTraceAndSlog t = new TimingsTraceAndSlog("ActivityManagerTiming", 64L);
        t.traceBegin("FinishBooting");
        ITranSruManager.Instance().sendShutdownOrBootEvent(1, null);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!this.mBootAnimationComplete) {
                    this.mCallFinishBooting = true;
                    return;
                }
                this.mCallFinishBooting = false;
                resetPriorityAfterLockedSection();
                Process.ZYGOTE_PROCESS.bootCompleted();
                VMRuntime.bootCompleted();
                IntentFilter pkgFilter = new IntentFilter();
                pkgFilter.addAction("android.intent.action.QUERY_PACKAGE_RESTART");
                pkgFilter.addDataScheme("package");
                this.mContext.registerReceiver(new BroadcastReceiver() { // from class: com.android.server.am.ActivityManagerService.8
                    @Override // android.content.BroadcastReceiver
                    public void onReceive(Context context, Intent intent) {
                        ActivityManagerService activityManagerService;
                        String[] pkgs = intent.getStringArrayExtra("android.intent.extra.PACKAGES");
                        if (pkgs != null) {
                            for (String pkg : pkgs) {
                                ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                                synchronized (activityManagerService2) {
                                    try {
                                        ActivityManagerService.boostPriorityForLockedSection();
                                        activityManagerService = activityManagerService2;
                                        try {
                                            if (ActivityManagerService.this.forceStopPackageLocked(pkg, -1, false, false, false, false, false, 0, "query restart")) {
                                                setResultCode(-1);
                                                ActivityManagerService.resetPriorityAfterLockedSection();
                                                return;
                                            }
                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                        } catch (Throwable th) {
                                            th = th;
                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                            throw th;
                                        }
                                    } catch (Throwable th2) {
                                        th = th2;
                                        activityManagerService = activityManagerService2;
                                    }
                                }
                            }
                        }
                    }
                }, pkgFilter);
                try {
                    Slog.i(TAG, "About to commit checkpoint");
                    IStorageManager storageManager = InstallLocationUtils.getStorageManager();
                    storageManager.commitChanges();
                } catch (Exception e) {
                    PowerManager pm = (PowerManager) this.mInjector.getContext().getSystemService("power");
                    pm.reboot("Checkpoint commit failed");
                }
                this.mSystemServiceManager.startBootPhase(t, 1000);
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        int NP = this.mProcessesOnHold.size();
                        if (NP > 0) {
                            ArrayList<ProcessRecord> procs = new ArrayList<>(this.mProcessesOnHold);
                            for (int ip = 0; ip < NP; ip++) {
                                if (ActivityManagerDebugConfig.DEBUG_PROCESSES) {
                                    Slog.v(TAG_PROCESSES, "Starting process on hold: " + procs.get(ip));
                                }
                                this.mProcessList.startProcessLocked(procs.get(ip), new HostingRecord(HostingRecord.HOSTING_TYPE_ON_HOLD), 2);
                            }
                        }
                        if (this.mFactoryTest == 1) {
                            return;
                        }
                        Message nmsg = this.mHandler.obtainMessage(27);
                        this.mHandler.sendMessageDelayed(nmsg, this.mConstants.POWER_CHECK_INTERVAL);
                        if (((Boolean) InitProperties.userspace_reboot_in_progress().orElse(false)).booleanValue()) {
                            UserspaceRebootLogger.noteUserspaceRebootSuccess();
                        }
                        SystemProperties.set("sys.boot_completed", "1");
                        if (!"trigger_restart_min_framework".equals(VoldProperties.decrypt().orElse("")) || "".equals(VoldProperties.encrypt_progress().orElse(""))) {
                            SystemProperties.set("dev.bootcomplete", "1");
                        }
                        this.mUserController.sendBootCompleted(new IIntentReceiver.Stub() { // from class: com.android.server.am.ActivityManagerService.9
                            public void performReceive(Intent intent, int resultCode, String data, Bundle extras, boolean ordered, boolean sticky, int sendingUser) {
                                synchronized (ActivityManagerService.this.mProcLock) {
                                    try {
                                        ActivityManagerService.boostPriorityForProcLockedSection();
                                        ActivityManagerService.this.mAppProfiler.requestPssAllProcsLPr(SystemClock.uptimeMillis(), true, false);
                                        ITranActivityManagerService.Instance().onBootCompleted();
                                    } catch (Throwable th) {
                                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                                        throw th;
                                    }
                                }
                                ActivityManagerService.resetPriorityAfterProcLockedSection();
                            }
                        });
                        maybeLogUserspaceRebootEvent();
                        this.mUserController.scheduleStartProfiles();
                        resetPriorityAfterLockedSection();
                        ITranActivityManagerService.Instance().onFinishBooting(this.mContext);
                        showConsoleNotificationIfActive();
                        showMteOverrideNotificationIfActive();
                        ITranActivityManagerService.Instance().hookPmOnBootCompleted();
                        t.traceEnd();
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    private void showConsoleNotificationIfActive() {
        if (!SystemProperties.get("init.svc.console").equals(INetd.IF_FLAG_RUNNING)) {
            return;
        }
        String title = this.mContext.getString(17040079);
        String message = this.mContext.getString(17040078);
        Notification notification = new Notification.Builder(this.mContext, SystemNotificationChannels.DEVELOPER).setSmallIcon(17303614).setWhen(0L).setOngoing(true).setTicker(title).setDefaults(0).setColor(this.mContext.getColor(17170460)).setContentTitle(title).setContentText(message).setVisibility(1).build();
        NotificationManager notificationManager = (NotificationManager) this.mContext.getSystemService(NotificationManager.class);
        notificationManager.notifyAsUser(null, 55, notification, UserHandle.ALL);
        this.mAnrManager.writeEvent(AnrManager.EVENT_BOOT_COMPLETED);
    }

    private void showMteOverrideNotificationIfActive() {
        if (!SystemProperties.getBoolean("ro.arm64.memtag.bootctl_supported", false) || !Zygote.nativeSupportsMemoryTagging()) {
            return;
        }
        String title = this.mContext.getString(17040836);
        String message = this.mContext.getString(17040835);
        Notification notification = new Notification.Builder(this.mContext, SystemNotificationChannels.DEVELOPER).setSmallIcon(17303614).setOngoing(true).setTicker(title).setDefaults(0).setColor(this.mContext.getColor(17170460)).setContentTitle(title).setContentText(message).setVisibility(1).build();
        NotificationManager notificationManager = (NotificationManager) this.mContext.getSystemService(NotificationManager.class);
        notificationManager.notifyAsUser(null, 69, notification, UserHandle.ALL);
    }

    public void bootAnimationComplete() {
        boolean callFinishBooting;
        if (ActivityManagerDebugConfig.DEBUG_ALL) {
            Slog.d(TAG, "bootAnimationComplete: Callers=" + Debug.getCallers(4));
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                Slog.d(TAG, "bootAnimationComplete, mCallFinishBooting = " + this.mCallFinishBooting);
                callFinishBooting = this.mCallFinishBooting;
                this.mBootAnimationComplete = true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        if (callFinishBooting) {
            finishBooting();
        }
    }

    final void ensureBootCompleted() {
        boolean booting;
        boolean enableScreen;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                booting = this.mBooting;
                this.mBooting = false;
                enableScreen = this.mBooted ? false : true;
                this.mBooted = true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        if (booting) {
            finishBooting();
        }
        if (enableScreen) {
            this.mAtmInternal.enableScreenAfterBoot(this.mBooted);
        }
    }

    @Deprecated
    public IIntentSender getIntentSender(int type, String packageName, IBinder token, String resultWho, int requestCode, Intent[] intents, String[] resolvedTypes, int flags, Bundle bOptions, int userId) {
        return getIntentSenderWithFeature(type, packageName, null, token, resultWho, requestCode, intents, resolvedTypes, flags, bOptions, userId);
    }

    public IIntentSender getIntentSenderWithFeature(int type, String packageName, String featureId, IBinder token, String resultWho, int requestCode, Intent[] intents, String[] resolvedTypes, int flags, Bundle bOptions, int userId) {
        enforceNotIsolatedCaller("getIntentSender");
        return getIntentSenderWithFeatureAsApp(type, packageName, featureId, token, resultWho, requestCode, intents, resolvedTypes, flags, bOptions, userId, Binder.getCallingUid());
    }

    public IIntentSender getIntentSenderWithFeatureAsApp(int type, String packageName, String featureId, IBinder token, String resultWho, int requestCode, Intent[] intents, String[] resolvedTypes, int flags, Bundle bOptions, int userId, int owningUid) {
        int userId2;
        if (intents != null) {
            if (intents.length < 1) {
                throw new IllegalArgumentException("Intents array length must be >= 1");
            }
            for (int i = 0; i < intents.length; i++) {
                Intent intent = intents[i];
                if (intent != null) {
                    if (intent.hasFileDescriptors()) {
                        throw new IllegalArgumentException("File descriptors passed in Intent");
                    }
                    if (type == 1 && (intent.getFlags() & 33554432) != 0) {
                        throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
                    }
                    intents[i] = new Intent(intent);
                }
            }
            if (resolvedTypes != null && resolvedTypes.length != intents.length) {
                throw new IllegalArgumentException("Intent array length does not match resolvedTypes length");
            }
        }
        if (bOptions != null && bOptions.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in options");
        }
        int userId3 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), owningUid, userId, type == 1, 0, "getIntentSender", null);
        if (userId != -2) {
            userId2 = userId3;
        } else {
            userId2 = -2;
        }
        if (owningUid != 0 && owningUid != 1000) {
            try {
                int uid = AppGlobals.getPackageManager().getPackageUid(packageName, 268435456L, UserHandle.getUserId(owningUid));
                if (!UserHandle.isSameApp(owningUid, uid)) {
                    String msg = "Permission Denial: getIntentSender() from pid=" + Binder.getCallingPid() + ", uid=" + owningUid + ", (need uid=" + uid + ") is not allowed to send as package " + packageName;
                    Slog.w(TAG, msg);
                    throw new SecurityException(msg);
                }
            } catch (RemoteException e) {
                e = e;
                throw new SecurityException(e);
            }
        }
        try {
            if (type != 3) {
                return this.mPendingIntentController.getIntentSender(type, packageName, featureId, owningUid, userId2, token, resultWho, requestCode, intents, resolvedTypes, flags, bOptions);
            }
            try {
                return this.mAtmInternal.getIntentSender(type, packageName, featureId, owningUid, userId2, token, resultWho, requestCode, intents, resolvedTypes, flags, bOptions);
            } catch (RemoteException e2) {
                e = e2;
                throw new SecurityException(e);
            }
        } catch (RemoteException e3) {
            e = e3;
        }
    }

    public int sendIntentSender(IIntentSender target, IBinder allowlistToken, int code, Intent intent, String resolvedType, IIntentReceiver finishedReceiver, String requiredPermission, Bundle options) {
        Intent intent2;
        int creatorId = -1;
        try {
            ActivityManager.PendingIntentInfo pendingIntentInfo = getInfoForIntentSender(target);
            creatorId = pendingIntentInfo.getCreatorUid();
        } catch (IllegalArgumentException e) {
        }
        Integer ret = ITranActivityManagerService.Instance().sendIntentSender(target, allowlistToken, code, intent, resolvedType, finishedReceiver, requiredPermission, options, UserHandle.getUserId(creatorId));
        if (ret != null) {
            return ret.intValue();
        }
        if (target instanceof PendingIntentRecord) {
            return ((PendingIntentRecord) target).sendWithResult(code, intent, resolvedType, allowlistToken, finishedReceiver, requiredPermission, options);
        }
        if (intent != null) {
            intent2 = intent;
        } else {
            Slog.wtf(TAG, "Can't use null intent with direct IIntentSender call");
            intent2 = new Intent("android.intent.action.MAIN");
        }
        try {
            target.send(code, intent2, resolvedType, allowlistToken, (IIntentReceiver) null, requiredPermission, options);
        } catch (RemoteException e2) {
        }
        if (finishedReceiver != null) {
            try {
                finishedReceiver.performReceive(intent2, 0, (String) null, (Bundle) null, false, false, UserHandle.getCallingUserId());
                return 0;
            } catch (RemoteException e3) {
                return 0;
            }
        }
        return 0;
    }

    public void cancelIntentSender(IIntentSender sender) {
        this.mPendingIntentController.cancelIntentSender(sender);
    }

    public boolean registerIntentSenderCancelListenerEx(IIntentSender sender, IResultReceiver receiver) {
        return this.mPendingIntentController.registerIntentSenderCancelListener(sender, receiver);
    }

    public void unregisterIntentSenderCancelListener(IIntentSender sender, IResultReceiver receiver) {
        this.mPendingIntentController.unregisterIntentSenderCancelListener(sender, receiver);
    }

    public ActivityManager.PendingIntentInfo getInfoForIntentSender(IIntentSender sender) {
        if (sender instanceof PendingIntentRecord) {
            PendingIntentRecord res = (PendingIntentRecord) sender;
            String packageName = res.key.packageName;
            int uid = res.uid;
            boolean shouldFilter = getPackageManagerInternal().filterAppAccess(packageName, Binder.getCallingUid(), UserHandle.getUserId(uid));
            return new ActivityManager.PendingIntentInfo(shouldFilter ? null : packageName, shouldFilter ? -1 : uid, (res.key.flags & 67108864) != 0, res.key.type);
        }
        return new ActivityManager.PendingIntentInfo((String) null, -1, false, 0);
    }

    public boolean isIntentSenderTargetedToPackage(IIntentSender pendingResult) {
        if (pendingResult instanceof PendingIntentRecord) {
            try {
                PendingIntentRecord res = (PendingIntentRecord) pendingResult;
                if (res.key.allIntents == null) {
                    return false;
                }
                for (int i = 0; i < res.key.allIntents.length; i++) {
                    Intent intent = res.key.allIntents[i];
                    if (intent.getPackage() != null && intent.getComponent() != null) {
                        return false;
                    }
                }
                return true;
            } catch (ClassCastException e) {
                return false;
            }
        }
        return false;
    }

    public boolean isIntentSenderAnActivity(IIntentSender pendingResult) {
        if (pendingResult instanceof PendingIntentRecord) {
            try {
                PendingIntentRecord res = (PendingIntentRecord) pendingResult;
                return res.key.type == 2;
            } catch (ClassCastException e) {
                return false;
            }
        }
        return false;
    }

    public Intent getIntentForIntentSender(IIntentSender pendingResult) {
        enforceCallingPermission("android.permission.GET_INTENT_SENDER_INTENT", "getIntentForIntentSender()");
        if (pendingResult instanceof PendingIntentRecord) {
            try {
                PendingIntentRecord res = (PendingIntentRecord) pendingResult;
                if (res.key.requestIntent != null) {
                    return new Intent(res.key.requestIntent);
                }
                return null;
            } catch (ClassCastException e) {
                return null;
            }
        }
        return null;
    }

    public ParceledListSlice<ResolveInfo> queryIntentComponentsForIntentSender(IIntentSender pendingResult, int matchFlags) {
        enforceCallingPermission("android.permission.GET_INTENT_SENDER_INTENT", "queryIntentComponentsForIntentSender()");
        Objects.requireNonNull(pendingResult);
        try {
            PendingIntentRecord res = (PendingIntentRecord) pendingResult;
            Intent intent = res.key.requestIntent;
            if (intent == null) {
                return null;
            }
            int userId = res.key.userId;
            int uid = res.uid;
            String resolvedType = res.key.requestResolvedType;
            switch (res.key.type) {
                case 1:
                    return new ParceledListSlice<>(this.mPackageManagerInt.queryIntentReceivers(intent, resolvedType, matchFlags, uid, userId, false));
                case 2:
                    return new ParceledListSlice<>(this.mPackageManagerInt.queryIntentActivities(intent, resolvedType, matchFlags, uid, userId));
                case 3:
                default:
                    throw new IllegalStateException("Unsupported intent sender type: " + res.key.type);
                case 4:
                case 5:
                    return new ParceledListSlice<>(this.mPackageManagerInt.queryIntentServices(intent, matchFlags, uid, userId));
            }
        } catch (ClassCastException e) {
            return null;
        }
    }

    public String getTagForIntentSender(IIntentSender pendingResult, String prefix) {
        String tagForIntentSenderLocked;
        if (pendingResult instanceof PendingIntentRecord) {
            try {
                PendingIntentRecord res = (PendingIntentRecord) pendingResult;
                synchronized (this) {
                    boostPriorityForLockedSection();
                    tagForIntentSenderLocked = getTagForIntentSenderLocked(res, prefix);
                }
                resetPriorityAfterLockedSection();
                return tagForIntentSenderLocked;
            } catch (ClassCastException e) {
                return null;
            }
        }
        return null;
    }

    String getTagForIntentSenderLocked(PendingIntentRecord res, String prefix) {
        Intent intent = res.key.requestIntent;
        if (intent != null) {
            if (res.lastTag != null && res.lastTagPrefix == prefix && (res.lastTagPrefix == null || res.lastTagPrefix.equals(prefix))) {
                return res.lastTag;
            }
            res.lastTagPrefix = prefix;
            StringBuilder sb = new StringBuilder(128);
            if (prefix != null) {
                sb.append(prefix);
            }
            if (intent.getAction() != null) {
                sb.append(intent.getAction());
            } else if (intent.getComponent() != null) {
                intent.getComponent().appendShortString(sb);
            } else {
                sb.append("?");
            }
            String sb2 = sb.toString();
            res.lastTag = sb2;
            return sb2;
        }
        return null;
    }

    public void setProcessLimit(int max) {
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessLimit()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mConstants.setOverrideMaxCachedProcesses(max);
                trimApplicationsLocked(true, "updateOomAdj_processEnd");
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public int getProcessLimit() {
        int overrideMaxCachedProcesses;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                overrideMaxCachedProcesses = this.mConstants.getOverrideMaxCachedProcesses();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return overrideMaxCachedProcesses;
    }

    void importanceTokenDied(ImportanceToken token) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    ImportanceToken cur = this.mImportantProcesses.get(token.pid);
                    if (cur != token) {
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    this.mImportantProcesses.remove(token.pid);
                    ProcessRecord pr = this.mPidsSelfLocked.get(token.pid);
                    if (pr == null) {
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    pr.mState.setForcingToImportant(null);
                    updateProcessForegroundLocked(pr, false, 0, false);
                    updateOomAdjLocked(pr, "updateOomAdj_uiVisibility");
                    resetPriorityAfterLockedSection();
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void setProcessImportant(IBinder token, int pid, boolean isForeground, String reason) {
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessImportant()");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                boolean changed = false;
                synchronized (this.mPidsSelfLocked) {
                    ProcessRecord pr = this.mPidsSelfLocked.get(pid);
                    if (pr == null && isForeground) {
                        Slog.w(TAG, "setProcessForeground called on unknown pid: " + pid);
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    ImportanceToken oldToken = this.mImportantProcesses.get(pid);
                    if (oldToken != null) {
                        oldToken.token.unlinkToDeath(oldToken, 0);
                        this.mImportantProcesses.remove(pid);
                        if (pr != null) {
                            pr.mState.setForcingToImportant(null);
                        }
                        changed = true;
                    }
                    if (isForeground && token != null) {
                        ImportanceToken newToken = new ImportanceToken(pid, token, reason) { // from class: com.android.server.am.ActivityManagerService.10
                            @Override // android.os.IBinder.DeathRecipient
                            public void binderDied() {
                                ActivityManagerService.this.importanceTokenDied(this);
                            }
                        };
                        try {
                            token.linkToDeath(newToken, 0);
                            this.mImportantProcesses.put(pid, newToken);
                            pr.mState.setForcingToImportant(newToken);
                            changed = true;
                        } catch (RemoteException e) {
                        }
                    }
                    if (changed) {
                        updateOomAdjLocked(pr, "updateOomAdj_uiVisibility");
                    }
                    resetPriorityAfterLockedSection();
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isAppForeground(int uid) {
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                UidRecord uidRec = this.mProcessList.mActiveUids.get(uid);
                if (uidRec != null && !uidRec.isIdle()) {
                    boolean z = uidRec.getCurProcState() <= 6;
                    resetPriorityAfterProcLockedSection();
                    return z;
                }
                resetPriorityAfterProcLockedSection();
                return false;
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isAppBad(String processName, int uid) {
        return this.mAppErrors.isBadProcess(processName, uid);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public int getUidState(int uid) {
        int uidProcStateLOSP;
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                uidProcStateLOSP = this.mProcessList.getUidProcStateLOSP(uid);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return uidProcStateLOSP;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public int getUidStateLocked(int uid) {
        return this.mProcessList.getUidProcStateLOSP(uid);
    }

    /* loaded from: classes.dex */
    static class ProcessInfoService extends IProcessInfoService.Stub {
        final ActivityManagerService mActivityManagerService;

        ProcessInfoService(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public void getProcessStatesFromPids(int[] pids, int[] states) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(pids, states, null);
        }

        public void getProcessStatesAndOomScoresFromPids(int[] pids, int[] states, int[] scores) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(pids, states, scores);
        }
    }

    public void getProcessStatesAndOomScoresForPIDs(int[] pids, int[] states, int[] scores) {
        if (scores != null) {
            enforceCallingPermission("android.permission.GET_PROCESS_STATE_AND_OOM_SCORE", "getProcessStatesAndOomScoresForPIDs()");
        }
        if (pids == null) {
            throw new NullPointerException("pids");
        }
        if (states == null) {
            throw new NullPointerException("states");
        }
        if (pids.length != states.length) {
            throw new IllegalArgumentException("pids and states arrays have different lengths!");
        }
        if (scores != null && pids.length != scores.length) {
            throw new IllegalArgumentException("pids and scores arrays have different lengths!");
        }
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    int newestTimeIndex = -1;
                    long newestTime = Long.MIN_VALUE;
                    for (int i = 0; i < pids.length; i++) {
                        ProcessRecord pr = this.mPidsSelfLocked.get(pids[i]);
                        if (pr != null) {
                            long pendingTopTime = this.mPendingStartActivityUids.getPendingTopPidTime(pr.uid, pids[i]);
                            if (pendingTopTime != 0) {
                                states[i] = 2;
                                if (scores != null) {
                                    scores[i] = -1;
                                }
                                if (pendingTopTime > newestTime) {
                                    newestTimeIndex = i;
                                    newestTime = pendingTopTime;
                                }
                            } else {
                                states[i] = pr.mState.getCurProcState();
                                if (scores != null) {
                                    scores[i] = pr.mState.getCurAdj();
                                }
                            }
                        } else {
                            states[i] = 20;
                            if (scores != null) {
                                scores[i] = -10000;
                            }
                        }
                    }
                    if (newestTimeIndex != -1 && scores != null) {
                        scores[newestTimeIndex] = -2;
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* loaded from: classes.dex */
    static class PermissionController extends IPermissionController.Stub {
        ActivityManagerService mActivityManagerService;

        PermissionController(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public boolean checkPermission(String permission, int pid, int uid) {
            return this.mActivityManagerService.checkPermission(permission, pid, uid) == 0;
        }

        public int noteOp(String op, int uid, String packageName) {
            return this.mActivityManagerService.mAppOpsService.noteOperation(AppOpsManager.strOpToOp(op), uid, packageName, null, false, "", false).getOpMode();
        }

        public String[] getPackagesForUid(int uid) {
            return this.mActivityManagerService.mContext.getPackageManager().getPackagesForUid(uid);
        }

        public boolean isRuntimePermission(String permission) {
            try {
                PermissionInfo info = this.mActivityManagerService.mContext.getPackageManager().getPermissionInfo(permission, 0);
                return (info.protectionLevel & 15) == 1;
            } catch (PackageManager.NameNotFoundException nnfe) {
                Slog.e(ActivityManagerService.TAG, "No such permission: " + permission, nnfe);
                return false;
            }
        }

        public int getPackageUid(String packageName, int flags) {
            try {
                return this.mActivityManagerService.mContext.getPackageManager().getPackageUid(packageName, flags);
            } catch (PackageManager.NameNotFoundException e) {
                return -1;
            }
        }
    }

    /* loaded from: classes.dex */
    class IntentFirewallInterface implements IntentFirewall.AMSInterface {
        IntentFirewallInterface() {
        }

        @Override // com.android.server.firewall.IntentFirewall.AMSInterface
        public int checkComponentPermission(String permission, int pid, int uid, int owningUid, boolean exported) {
            return ActivityManagerService.checkComponentPermission(permission, pid, uid, owningUid, exported);
        }

        @Override // com.android.server.firewall.IntentFirewall.AMSInterface
        public Object getAMSLock() {
            return ActivityManagerService.this;
        }
    }

    public static int checkComponentPermission(String permission, int pid, int uid, int owningUid, boolean exported) {
        if (pid == MY_PID) {
            return 0;
        }
        if (permission != null) {
            SparseArray<ProcessInfo> sparseArray = sActiveProcessInfoSelfLocked;
            synchronized (sparseArray) {
                ProcessInfo procInfo = sparseArray.get(pid);
                if (procInfo != null && procInfo.deniedPermissions != null && procInfo.deniedPermissions.contains(permission)) {
                    return -1;
                }
            }
        }
        return ActivityManager.checkComponentPermission(permission, uid, owningUid, exported);
    }

    private void enforceDebuggable(ProcessRecord proc) {
        if (!ActivityManagerDebugConfig.DEBUG_DUMPHEAP && !Build.IS_DEBUGGABLE && !proc.isDebuggable()) {
            throw new SecurityException("Process not debuggable: " + proc.info.packageName);
        }
    }

    private void enforceDebuggable(ApplicationInfo info) {
        if (!ActivityManagerDebugConfig.DEBUG_DUMPHEAP && !Build.IS_DEBUGGABLE && (info.flags & 2) == 0) {
            throw new SecurityException("Process not debuggable: " + info.packageName);
        }
    }

    private boolean isSystemApp(String packageName, int userId) {
        ApplicationInfo appInfo = this.mPackageManagerInt.getApplicationInfo(packageName, 8192L, 1000, userId);
        if (appInfo != null) {
            return (appInfo.flags & 1) > 0 || appInfo.uid <= 1000 || (appInfo.privateFlags & 1048576) > 0;
        }
        Slog.d(TAG, "The application " + packageName + " is not present on this device");
        return false;
    }

    public int checkPermission(String permission, int pid, int uid) {
        String[] packages;
        if (permission == null) {
            return -1;
        }
        if (("android.permission.INSTALL_PACKAGES".equals(permission) || "android.permission.DELETE_PACKAGES".equals(permission)) && (packages = this.mContext.getPackageManager().getPackagesForUid(uid)) != null && packages.length > 0 && "com.transsion.dualapp".equals(packages[0])) {
            boolean isSystemApp = isSystemApp(packages[0], UserHandle.getCallingUserId());
            if (isSystemApp) {
                return 0;
            }
            Slog.d(TAG, "is not system app : " + packages[0]);
        }
        return checkComponentPermission(permission, pid, uid, -1, true);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public int checkCallingPermission(String permission) {
        return checkPermission(permission, Binder.getCallingPid(), Binder.getCallingUid());
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void enforceCallingPermission(String permission, String func) {
        if (checkCallingPermission(permission) == 0) {
            return;
        }
        String msg = "Permission Denial: " + func + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires " + permission;
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void enforcePermission(String permission, int pid, int uid, String func) {
        if (checkPermission(permission, pid, uid) == 0) {
            return;
        }
        String msg = "Permission Denial: " + func + " from pid=" + pid + ", uid=" + uid + " requires " + permission;
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    public boolean isAppStartModeDisabled(int uid, String packageName) {
        boolean z;
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                z = getAppStartModeLOSP(uid, packageName, 0, -1, false, true, false) == 3;
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return z;
    }

    private boolean isInRestrictedBucket(int userId, String packageName, long nowElapsed) {
        return 45 <= this.mUsageStatsService.getAppStandbyBucket(packageName, userId, nowElapsed);
    }

    int appRestrictedInBackgroundLOSP(int uid, String packageName, int packageTargetSdk) {
        if (ITranActivityManagerService.Instance().isAgaresEnable()) {
            boolean pass = ITranActivityManagerService.Instance().filterAppRestrictedInBg(packageName);
            if (pass) {
                Slog.d(TAG, "appRestrictedInBackgroundLOSP agares return");
                return 0;
            }
        }
        if (packageTargetSdk >= 26) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "App " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " targets O+, restricted");
            }
            return 2;
        } else if (this.mOnBattery && this.mConstants.FORCE_BACKGROUND_CHECK_ON_RESTRICTED_APPS && isInRestrictedBucket(UserHandle.getUserId(uid), packageName, SystemClock.elapsedRealtime())) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "Legacy app " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " in RESTRICTED bucket");
            }
            return 1;
        } else {
            int appop = getAppOpsManager().noteOpNoThrow(63, uid, packageName, (String) null, "");
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "Legacy app " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " bg appop " + appop);
            }
            switch (appop) {
                case 0:
                    if (!this.mForceBackgroundCheck || UserHandle.isCore(uid) || isOnDeviceIdleAllowlistLOSP(uid, true)) {
                        return 0;
                    }
                    if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                        Slog.i(TAG, "Force background check: " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " restricted");
                    }
                    return 1;
                case 1:
                    return 1;
                default:
                    return 2;
            }
        }
    }

    int appServicesRestrictedInBackgroundLOSP(int uid, String packageName, int packageTargetSdk) {
        if (this.mPackageManagerInt.isPackagePersistent(packageName)) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "App " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " is persistent; not restricted in background");
            }
            return 0;
        } else if (uidOnBackgroundAllowlistLOSP(uid)) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "App " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " on background allowlist; not restricted in background");
            }
            return 0;
        } else if (isOnDeviceIdleAllowlistLOSP(uid, false)) {
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.i(TAG, "App " + uid + SliceClientPermissions.SliceAuthority.DELIMITER + packageName + " on idle allowlist; not restricted in background");
            }
            return 0;
        } else {
            return appRestrictedInBackgroundLOSP(uid, packageName, packageTargetSdk);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public int getAppStartModeLOSP(int uid, String packageName, int packageTargetSdk, int callingPid, boolean alwaysRestrict, boolean disabledOnly, boolean forcedStandby) {
        boolean ephemeral;
        int startMode;
        ProcessRecord proc;
        if (this.mInternal.isPendingTopUid(uid)) {
            return 0;
        }
        UidRecord uidRec = this.mProcessList.getUidRecordLOSP(uid);
        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
            Slog.d(TAG, "checkAllowBackground: uid=" + uid + " pkg=" + packageName + " rec=" + uidRec + " always=" + alwaysRestrict + " idle=" + (uidRec != null ? uidRec.isIdle() : false));
        }
        if (uidRec == null || alwaysRestrict || forcedStandby || uidRec.isIdle()) {
            if (uidRec == null) {
                ephemeral = getPackageManagerInternal().isPackageEphemeral(UserHandle.getUserId(uid), packageName);
            } else {
                ephemeral = uidRec.isEphemeral();
            }
            if (ephemeral) {
                return 3;
            }
            if (disabledOnly) {
                return 0;
            }
            if (alwaysRestrict) {
                startMode = appRestrictedInBackgroundLOSP(uid, packageName, packageTargetSdk);
            } else {
                startMode = appServicesRestrictedInBackgroundLOSP(uid, packageName, packageTargetSdk);
            }
            if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                Slog.d(TAG, "checkAllowBackground: uid=" + uid + " pkg=" + packageName + " startMode=" + startMode + " onallowlist=" + isOnDeviceIdleAllowlistLOSP(uid, false) + " onallowlist(ei)=" + isOnDeviceIdleAllowlistLOSP(uid, true));
            }
            if (startMode == 1 && callingPid >= 0) {
                synchronized (this.mPidsSelfLocked) {
                    proc = this.mPidsSelfLocked.get(callingPid);
                }
                if (proc != null && !ActivityManager.isProcStateBackground(proc.mState.getCurProcState())) {
                    return 0;
                }
            }
            return startMode;
        }
        return 0;
    }

    boolean isOnDeviceIdleAllowlistLOSP(int uid, boolean allowExceptIdleToo) {
        int[] allowlist;
        int appId = UserHandle.getAppId(uid);
        if (allowExceptIdleToo) {
            allowlist = this.mDeviceIdleExceptIdleAllowlist;
        } else {
            allowlist = this.mDeviceIdleAllowlist;
        }
        return Arrays.binarySearch(allowlist, appId) >= 0 || Arrays.binarySearch(this.mDeviceIdleTempAllowlist, appId) >= 0 || this.mPendingTempAllowlist.get(uid) != null;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public FgsTempAllowListItem isAllowlistedForFgsStartLOSP(int uid) {
        if (Arrays.binarySearch(this.mDeviceIdleExceptIdleAllowlist, UserHandle.getAppId(uid)) >= 0) {
            return FAKE_TEMP_ALLOW_LIST_ITEM;
        }
        Pair<Long, FgsTempAllowListItem> entry = this.mFgsStartTempAllowList.get(uid);
        if (entry == null) {
            return null;
        }
        return (FgsTempAllowListItem) entry.second;
    }

    String getPendingTempAllowlistTagForUidLOSP(int uid) {
        PendingTempAllowlist ptw = this.mPendingTempAllowlist.get(uid);
        if (ptw != null) {
            return ptw.tag;
        }
        return null;
    }

    public void grantImplicitAccess(int userId, Intent intent, int visibleUid, int recipientAppId) {
        getPackageManagerInternal().grantImplicitAccess(userId, intent, recipientAppId, visibleUid, true);
    }

    public int checkUriPermission(Uri uri, int pid, int uid, int modeFlags, int userId, IBinder callerToken) {
        enforceNotIsolatedCaller("checkUriPermission");
        if (pid == MY_PID) {
            return 0;
        }
        return ((uid == 0 || !this.mPackageManagerInt.filterAppAccess(uid, Binder.getCallingUid())) && this.mUgmInternal.checkUriPermission(new GrantUri(userId, uri, modeFlags), uid, modeFlags)) ? 0 : -1;
    }

    public int[] checkUriPermissions(List<Uri> uris, int pid, int uid, int modeFlags, int userId, IBinder callerToken) {
        int size = uris.size();
        int[] res = new int[size];
        Arrays.fill(res, -1);
        for (int i = 0; i < size; i++) {
            Uri uri = uris.get(i);
            int userIdFromUri = ContentProvider.getUserIdFromUri(uri, userId);
            res[i] = checkUriPermission(ContentProvider.getUriWithoutUserId(uri), pid, uid, modeFlags, userIdFromUri, callerToken);
        }
        return res;
    }

    public void grantUriPermission(IApplicationThread caller, String targetPkg, Uri uri, int modeFlags, int userId) {
        enforceNotIsolatedCaller("grantUriPermission");
        GrantUri grantUri = new GrantUri(userId, uri, modeFlags);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord r = getRecordForAppLOSP(caller);
                if (r == null) {
                    throw new SecurityException("Unable to find app for caller " + caller + " when granting permission to uri " + grantUri);
                }
                if (targetPkg == null) {
                    throw new IllegalArgumentException("null target");
                }
                int callingUserId = UserHandle.getUserId(r.uid);
                if (this.mPackageManagerInt.filterAppAccess(targetPkg, r.uid, callingUserId)) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                Preconditions.checkFlagsArgument(modeFlags, 195);
                Intent intent = new Intent();
                intent.setData(uri);
                intent.setFlags(modeFlags);
                NeededUriGrants needed = this.mUgmInternal.checkGrantUriPermissionFromIntent(intent, r.uid, targetPkg, callingUserId);
                this.mUgmInternal.grantUriPermissionUncheckedFromIntent(needed, null);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void revokeUriPermission(IApplicationThread caller, String targetPackage, Uri uri, int modeFlags, int userId) {
        enforceNotIsolatedCaller("revokeUriPermission");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord r = getRecordForAppLOSP(caller);
                if (r == null) {
                    throw new SecurityException("Unable to find app for caller " + caller + " when revoking permission to uri " + uri);
                }
                if (uri == null) {
                    Slog.w(TAG, "revokeUriPermission: null uri");
                    resetPriorityAfterLockedSection();
                } else if (!Intent.isAccessUriMode(modeFlags)) {
                    resetPriorityAfterLockedSection();
                } else {
                    String authority = uri.getAuthority();
                    ProviderInfo pi = this.mCpHelper.getProviderInfoLocked(authority, userId, 786432);
                    if (pi == null) {
                        Slog.w(TAG, "No content provider found for permission revoke: " + uri.toSafeString());
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    this.mUgmInternal.revokeUriPermission(targetPackage, r.uid, new GrantUri(userId, uri, modeFlags), modeFlags);
                    resetPriorityAfterLockedSection();
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void showWaitingForDebugger(IApplicationThread who, boolean waiting) {
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                ProcessRecord app = who != null ? getRecordForAppLOSP(who) : null;
                if (app == null) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                Message msg = Message.obtain();
                msg.what = 6;
                msg.obj = app;
                msg.arg1 = waiting ? 1 : 0;
                this.mUiHandler.sendMessage(msg);
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public void getMemoryInfo(ActivityManager.MemoryInfo outInfo) {
        this.mProcessList.getMemoryInfo(outInfo);
    }

    public List<ActivityManager.RunningTaskInfo> getTasks(int maxNum) {
        return this.mActivityTaskManager.getTasks(maxNum);
    }

    public void cancelTaskWindowTransition(int taskId) {
        this.mActivityTaskManager.cancelTaskWindowTransition(taskId);
    }

    public void setTaskResizeable(int taskId, int resizeableMode) {
        this.mActivityTaskManager.setTaskResizeable(taskId, resizeableMode);
    }

    public void resizeTask(int taskId, Rect bounds, int resizeMode) {
        this.mActivityTaskManager.resizeTask(taskId, bounds, resizeMode);
    }

    public Rect getTaskBounds(int taskId) {
        return this.mActivityTaskManager.getTaskBounds(taskId);
    }

    public boolean removeTask(int taskId) {
        return this.mActivityTaskManager.removeTask(taskId);
    }

    public void moveTaskToFront(IApplicationThread appThread, String callingPackage, int taskId, int flags, Bundle bOptions) {
        this.mActivityTaskManager.moveTaskToFront(appThread, callingPackage, taskId, flags, bOptions);
    }

    public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot) {
        return ActivityClient.getInstance().moveActivityTaskToBack(token, nonRoot);
    }

    public void moveTaskToRootTask(int taskId, int rootTaskId, boolean toTop) {
        this.mActivityTaskManager.moveTaskToRootTask(taskId, rootTaskId, toTop);
    }

    public ParceledListSlice<ActivityManager.RecentTaskInfo> getRecentTasks(int maxNum, int flags, int userId) {
        return this.mActivityTaskManager.getRecentTasks(maxNum, flags, userId);
    }

    public List<ActivityTaskManager.RootTaskInfo> getAllRootTaskInfos() {
        return this.mActivityTaskManager.getAllRootTaskInfos();
    }

    public int getTaskForActivity(IBinder token, boolean onlyRoot) {
        return ActivityClient.getInstance().getTaskForActivity(token, onlyRoot);
    }

    public void updateLockTaskPackages(int userId, String[] packages) {
        this.mActivityTaskManager.updateLockTaskPackages(userId, packages);
    }

    public boolean isInLockTaskMode() {
        return this.mActivityTaskManager.isInLockTaskMode();
    }

    public int getLockTaskModeState() {
        return this.mActivityTaskManager.getLockTaskModeState();
    }

    public void startSystemLockTaskMode(int taskId) throws RemoteException {
        this.mActivityTaskManager.startSystemLockTaskMode(taskId);
    }

    public IPackageManager getPackageManager() {
        return AppGlobals.getPackageManager();
    }

    public PackageManagerInternal getPackageManagerInternal() {
        if (this.mPackageManagerInt == null) {
            this.mPackageManagerInt = (PackageManagerInternal) LocalServices.getService(PackageManagerInternal.class);
        }
        return this.mPackageManagerInt;
    }

    private PermissionManagerServiceInternal getPermissionManagerInternal() {
        if (this.mPermissionManagerInt == null) {
            this.mPermissionManagerInt = (PermissionManagerServiceInternal) LocalServices.getService(PermissionManagerServiceInternal.class);
        }
        return this.mPermissionManagerInt;
    }

    private TestUtilityService getTestUtilityServiceLocked() {
        if (this.mTestUtilityService == null) {
            this.mTestUtilityService = (TestUtilityService) LocalServices.getService(TestUtilityService.class);
        }
        return this.mTestUtilityService;
    }

    public void appNotResponding(String reason) {
        int callingPid = Binder.getCallingPid();
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord app = this.mPidsSelfLocked.get(callingPid);
            if (app == null) {
                throw new SecurityException("Unknown process: " + callingPid);
            }
            this.mAnrHelper.appNotResponding(app, null, app.info, null, null, false, "App requested: " + reason);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void startPersistentApps(int matchFlags) {
        ProcessRecord proc;
        if (this.mFactoryTest == 1) {
            return;
        }
        synchronized (this) {
            try {
                try {
                    boostPriorityForLockedSection();
                    List<ApplicationInfo> apps = AppGlobals.getPackageManager().getPersistentApplications(matchFlags | 1024).getList();
                    for (ApplicationInfo app : apps) {
                        if (!PackageManagerService.PLATFORM_PACKAGE_NAME.equals(app.packageName) && (proc = addAppLocked(app, null, false, null, 2)) != null) {
                            proc.mProfile.addHostingComponentType(2);
                        }
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (RemoteException e) {
            }
        }
        resetPriorityAfterLockedSection();
    }

    public ContentProviderHelper getContentProviderHelper() {
        return this.mCpHelper;
    }

    public final ContentProviderHolder getContentProvider(IApplicationThread caller, String callingPackage, String name, int userId, boolean stable) {
        traceBegin(64L, "getContentProvider: ", name);
        try {
            return this.mCpHelper.getContentProvider(caller, callingPackage, name, userId, stable);
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public ContentProviderHolder getContentProviderExternal(String name, int userId, IBinder token, String tag) {
        traceBegin(64L, "getContentProviderExternal: ", name);
        try {
            return this.mCpHelper.getContentProviderExternal(name, userId, token, tag);
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public void removeContentProvider(IBinder connection, boolean stable) {
        this.mCpHelper.removeContentProvider(connection, stable);
    }

    @Deprecated
    public void removeContentProviderExternal(String name, IBinder token) {
        traceBegin(64L, "removeContentProviderExternal: ", name);
        try {
            removeContentProviderExternalAsUser(name, token, UserHandle.getCallingUserId());
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public void removeContentProviderExternalAsUser(String name, IBinder token, int userId) {
        traceBegin(64L, "removeContentProviderExternalAsUser: ", name);
        try {
            this.mCpHelper.removeContentProviderExternalAsUser(name, token, userId);
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public final void publishContentProviders(IApplicationThread caller, List<ContentProviderHolder> providers) {
        if (Trace.isTagEnabled(64L)) {
            StringBuilder sb = new StringBuilder(256);
            sb.append("publishContentProviders: ");
            if (providers != null) {
                boolean first = true;
                int i = 0;
                int size = providers.size();
                while (true) {
                    if (i >= size) {
                        break;
                    }
                    ContentProviderHolder holder = providers.get(i);
                    if (holder != null && holder.info != null && holder.info.authority != null) {
                        int len = holder.info.authority.length();
                        if (sb.length() + len > 256) {
                            sb.append("[[TRUNCATED]]");
                            break;
                        }
                        if (!first) {
                            sb.append(';');
                        } else {
                            first = false;
                        }
                        sb.append(holder.info.authority);
                    }
                    i++;
                }
            }
            Trace.traceBegin(64L, sb.toString());
        }
        try {
            this.mCpHelper.publishContentProviders(caller, providers);
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public boolean refContentProvider(IBinder connection, int stable, int unstable) {
        return this.mCpHelper.refContentProvider(connection, stable, unstable);
    }

    public void unstableProviderDied(IBinder connection) {
        this.mCpHelper.unstableProviderDied(connection);
    }

    public void appNotRespondingViaProvider(IBinder connection) {
        this.mCpHelper.appNotRespondingViaProvider(connection);
    }

    @Deprecated
    public String getProviderMimeType(Uri uri, int userId) {
        return this.mCpHelper.getProviderMimeType(uri, userId);
    }

    public void getProviderMimeTypeAsync(Uri uri, int userId, RemoteCallback resultCallback) {
        this.mCpHelper.getProviderMimeTypeAsync(uri, userId, resultCallback);
    }

    private boolean uidOnBackgroundAllowlistLOSP(int uid) {
        int appId = UserHandle.getAppId(uid);
        int[] allowlist = this.mBackgroundAppIdAllowlist;
        for (int i : allowlist) {
            if (appId == i) {
                return true;
            }
        }
        return false;
    }

    public boolean isBackgroundRestricted(String packageName) {
        int packageUid;
        int callingUid = Binder.getCallingUid();
        IPackageManager pm = AppGlobals.getPackageManager();
        try {
            packageUid = pm.getPackageUid(packageName, 268435456L, UserHandle.getUserId(callingUid));
        } catch (RemoteException e) {
        }
        if (packageUid != callingUid) {
            throw new IllegalArgumentException("Uid " + callingUid + " cannot query restriction state for package " + packageName);
        }
        return isBackgroundRestrictedNoCheck(callingUid, packageName);
    }

    public boolean isBackgroundRestrictedNoCheck(int uid, String packageName) {
        int mode = getAppOpsManager().checkOpNoThrow(70, uid, packageName);
        return mode != 0;
    }

    private boolean isTpms() {
        return UserHandle.getAppId(Binder.getCallingUid()) == PackageManager.tpmsUid;
    }

    private boolean isTpms(int callingUid) {
        return callingUid == PackageManager.tpmsUid;
    }

    public void backgroundAllowlistUid(int uid) {
        if (Binder.getCallingUid() != 1000 && !isTpms()) {
            throw new SecurityException("Only the OS may call backgroundAllowlistUid()");
        }
        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
            Slog.i(TAG, "Adding uid " + uid + " to bg uid allowlist");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mProcLock) {
                    boostPriorityForProcLockedSection();
                    int[] iArr = this.mBackgroundAppIdAllowlist;
                    int num = iArr.length;
                    int[] newList = new int[num + 1];
                    System.arraycopy(iArr, 0, newList, 0, num);
                    newList[num] = UserHandle.getAppId(uid);
                    this.mBackgroundAppIdAllowlist = newList;
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final ProcessRecord addAppLocked(ApplicationInfo info, String customProcess, boolean isolated, String abiOverride, int zygotePolicyFlags) {
        return addAppLocked(info, customProcess, isolated, false, abiOverride, zygotePolicyFlags);
    }

    final ProcessRecord addAppLocked(ApplicationInfo info, String customProcess, boolean isolated, boolean disableHiddenApiChecks, String abiOverride, int zygotePolicyFlags) {
        return addAppLocked(info, customProcess, isolated, disableHiddenApiChecks, false, abiOverride, zygotePolicyFlags);
    }

    final ProcessRecord addAppLocked(ApplicationInfo info, String customProcess, boolean isolated, boolean disableHiddenApiChecks, boolean disableTestApiChecks, String abiOverride, int zygotePolicyFlags) {
        return addAppLocked(info, customProcess, isolated, false, 0, null, disableHiddenApiChecks, disableTestApiChecks, abiOverride, zygotePolicyFlags);
    }

    final ProcessRecord addAppLocked(ApplicationInfo info, String customProcess, boolean isolated, boolean isSdkSandbox, int sdkSandboxUid, String sdkSandboxClientAppPackage, boolean disableHiddenApiChecks, boolean disableTestApiChecks, String abiOverride, int zygotePolicyFlags) {
        ProcessRecord app;
        ProcessRecord app2;
        if (!isolated) {
            app = getProcessRecordLocked(customProcess != null ? customProcess : info.processName, info.uid);
        } else {
            app = null;
        }
        if (app != null) {
            app2 = app;
        } else {
            ProcessRecord app3 = this.mProcessList.newProcessRecordLocked(info, customProcess, isolated, 0, isSdkSandbox, sdkSandboxUid, sdkSandboxClientAppPackage, new HostingRecord(HostingRecord.HOSTING_TYPE_ADDED_APPLICATION, customProcess != null ? customProcess : info.processName));
            updateLruProcessLocked(app3, false, null);
            updateOomAdjLocked(app3, "updateOomAdj_processBegin");
            app2 = app3;
        }
        this.mUsageStatsService.reportEvent(info.packageName, UserHandle.getUserId(app2.uid), 31);
        if (!isSdkSandbox) {
            try {
                AppGlobals.getPackageManager().setPackageStoppedState(info.packageName, false, UserHandle.getUserId(app2.uid));
            } catch (RemoteException e) {
            } catch (IllegalArgumentException e2) {
                Slog.w(TAG, "Failed trying to unstop package " + info.packageName + ": " + e2);
            }
        }
        if ((info.flags & 9) == 9) {
            app2.setPersistent(true);
            app2.mState.setMaxAdj(-800);
        }
        if (app2.getThread() == null && this.mPersistentStartingProcesses.indexOf(app2) < 0) {
            this.mPersistentStartingProcesses.add(app2);
            this.mProcessList.startProcessLocked(app2, new HostingRecord(HostingRecord.HOSTING_TYPE_ADDED_APPLICATION, customProcess != null ? customProcess : app2.processName), zygotePolicyFlags, disableHiddenApiChecks, disableTestApiChecks, abiOverride);
        }
        return app2;
    }

    public void unhandledBack() {
        this.mActivityTaskManager.unhandledBack();
    }

    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [7343=5] */
    public ParcelFileDescriptor openContentUri(String uriString) throws RemoteException {
        enforceNotIsolatedCaller("openContentUri");
        int userId = UserHandle.getCallingUserId();
        Uri uri = Uri.parse(uriString);
        String name = uri.getAuthority();
        ContentProviderHolder cph = this.mCpHelper.getContentProviderExternalUnchecked(name, null, Binder.getCallingUid(), "*opencontent*", userId);
        if (cph == null) {
            Slog.d(TAG, "Failed to get provider for authority '" + name + "'");
            return null;
        }
        try {
            int uid = Binder.getCallingUid();
            String packageName = AppOpsManager.resolvePackageName(uid, null);
            AndroidPackage androidPackage = packageName != null ? this.mPackageManagerInt.getPackage(packageName) : this.mPackageManagerInt.getPackage(uid);
            if (androidPackage == null) {
                Log.e(TAG, "Cannot find package for uid: " + uid);
                return null;
            }
            ApplicationInfo appInfo = this.mPackageManagerInt.getApplicationInfo(androidPackage.getPackageName(), 0L, 1000, 0);
            if (!appInfo.isVendor() && !appInfo.isSystemApp() && !appInfo.isSystemExt() && !appInfo.isProduct()) {
                Log.e(TAG, "openContentUri may only be used by vendor/system/product.");
                return null;
            }
            AttributionSource attributionSource = new AttributionSource(Binder.getCallingUid(), androidPackage.getPackageName(), null);
            ParcelFileDescriptor pfd = cph.provider.openFile(attributionSource, uri, ActivityTaskManagerService.DUMP_RECENTS_SHORT_CMD, (ICancellationSignal) null);
            return pfd;
        } catch (FileNotFoundException e) {
            return null;
        } finally {
            this.mCpHelper.removeContentProviderExternalUnchecked(name, null, userId);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void reportGlobalUsageEvent(int event) {
        int currentUserId = this.mUserController.getCurrentUserId();
        this.mUsageStatsService.reportEvent(PackageManagerService.PLATFORM_PACKAGE_NAME, currentUserId, event);
        int[] profiles = this.mUserController.getCurrentProfileIds();
        if (profiles != null) {
            for (int i = profiles.length - 1; i >= 0; i--) {
                if (profiles[i] != currentUserId) {
                    this.mUsageStatsService.reportEvent(PackageManagerService.PLATFORM_PACKAGE_NAME, profiles[i], event);
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void reportCurWakefulnessUsageEvent() {
        int i;
        if (this.mWakefulness.get() == 1) {
            i = 15;
        } else {
            i = 16;
        }
        reportGlobalUsageEvent(i);
    }

    void onWakefulnessChanged(int wakefulness) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                boolean wasAwake = this.mWakefulness.getAndSet(wakefulness) == 1;
                boolean isAwake = wakefulness == 1;
                if (wasAwake != isAwake) {
                    ITranActivityManagerService.Instance().onWakefulnessChanged(isAwake);
                    this.mServices.updateScreenStateLocked(isAwake);
                    reportCurWakefulnessUsageEvent();
                    this.mActivityTaskManager.onScreenAwakeChanged(isAwake);
                    this.mOomAdjProfiler.onWakefulnessChanged(wakefulness);
                    this.mOomAdjuster.onWakefulnessChanged(wakefulness);
                }
                updateOomAdjLocked("updateOomAdj_uiVisibility");
                this.mAmsExt.onWakefulnessChanged(wakefulness);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void notifyCleartextNetwork(int uid, byte[] firstPacket) {
        this.mHandler.obtainMessage(49, uid, 0, firstPacket).sendToTarget();
    }

    public boolean shutdown(int timeout) {
        if (checkCallingPermission("android.permission.SHUTDOWN") != 0) {
            throw new SecurityException("Requires permission android.permission.SHUTDOWN");
        }
        boolean timedout = this.mAtmInternal.shuttingDown(this.mBooted, timeout);
        this.mAppOpsService.shutdown();
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.prepareShutdown();
        }
        this.mBatteryStatsService.shutdown();
        this.mProcessStats.shutdown();
        ITranActivityManagerService.Instance().onAMSShutdown(timeout);
        return timedout;
    }

    public void notifyLockedProfile(int userId) {
        this.mAtmInternal.notifyLockedProfile(userId, this.mUserController.getCurrentUserId());
    }

    public void startConfirmDeviceCredentialIntent(Intent intent, Bundle options) {
        this.mAtmInternal.startConfirmDeviceCredentialIntent(intent, options);
    }

    public void stopAppSwitches() {
        this.mActivityTaskManager.stopAppSwitches();
    }

    public void resumeAppSwitches() {
        this.mActivityTaskManager.resumeAppSwitches();
    }

    public void setDebugApp(String packageName, boolean waitForDebugger, boolean persistent) {
        enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDebugApp()");
        long ident = Binder.clearCallingIdentity();
        boolean z = true;
        if (persistent) {
            try {
                ContentResolver resolver = this.mContext.getContentResolver();
                Settings.Global.putString(resolver, "debug_app", packageName);
                Settings.Global.putInt(resolver, "wait_for_debugger", waitForDebugger ? 1 : 0);
            } finally {
                Binder.restoreCallingIdentity(ident);
            }
        }
        synchronized (this) {
            boostPriorityForLockedSection();
            if (!persistent) {
                this.mOrigDebugApp = this.mDebugApp;
                this.mOrigWaitForDebugger = this.mWaitForDebugger;
            }
            this.mDebugApp = packageName;
            this.mWaitForDebugger = waitForDebugger;
            if (persistent) {
                z = false;
            }
            this.mDebugTransient = z;
            if (packageName != null) {
                forceStopPackageLocked(packageName, -1, false, false, true, true, false, -1, "set debug app");
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void setAgentApp(String packageName, String agent) {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            this.mAppProfiler.setAgentAppLPf(packageName, agent);
        }
    }

    void setTrackAllocationApp(ApplicationInfo app, String processName) {
        enforceDebuggable(app);
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                this.mTrackAllocationApp = processName;
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void setProfileApp(ApplicationInfo app, String processName, ProfilerInfo profilerInfo, ApplicationInfo sdkSandboxClientApp) {
        synchronized (this.mAppProfiler.mProfilerLock) {
            if (!Build.IS_DEBUGGABLE) {
                boolean z = true;
                boolean isAppDebuggable = (app.flags & 2) != 0;
                boolean isAppProfileable = app.isProfileableByShell();
                if (sdkSandboxClientApp != null) {
                    if ((sdkSandboxClientApp.flags & 2) == 0) {
                        z = false;
                    }
                    isAppDebuggable |= z;
                    isAppProfileable |= sdkSandboxClientApp.isProfileableByShell();
                }
                if (!isAppDebuggable && !isAppProfileable) {
                    throw new SecurityException("Process not debuggable, and not profileable by shell: " + app.packageName);
                }
            }
            this.mAppProfiler.setProfileAppLPf(processName, profilerInfo);
        }
    }

    void setNativeDebuggingAppLocked(ApplicationInfo app, String processName) {
        enforceDebuggable(app);
        this.mNativeDebuggingApp = processName;
    }

    public void setAlwaysFinish(boolean enabled) {
        enforceCallingPermission("android.permission.SET_ALWAYS_FINISH", "setAlwaysFinish()");
        long ident = Binder.clearCallingIdentity();
        try {
            Settings.Global.putInt(this.mContext.getContentResolver(), "always_finish_activities", enabled ? 1 : 0);
            synchronized (this) {
                boostPriorityForLockedSection();
                this.mAlwaysFinishActivities = enabled;
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
    }

    public void setActivityController(IActivityController controller, boolean imAMonkey) {
        if (controller != null) {
            Binder.allowBlocking(controller.asBinder());
        }
        this.mActivityTaskManager.setActivityController(controller, imAMonkey);
        ITranActivityManagerService.Instance().setIsControllerMonkey(imAMonkey);
    }

    public void setUserIsMonkey(boolean userIsMonkey) {
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    int callingPid = Binder.getCallingPid();
                    ProcessRecord proc = this.mPidsSelfLocked.get(callingPid);
                    if (proc == null) {
                        throw new SecurityException("Unknown process: " + callingPid);
                    }
                    if (proc.getActiveInstrumentation() == null || proc.getActiveInstrumentation().mUiAutomationConnection == null) {
                        throw new SecurityException("Only an instrumentation process with a UiAutomation can call setUserIsMonkey");
                    }
                }
                this.mUserIsMonkey = userIsMonkey;
                ITranActivityManagerService.Instance().setIsUserMonkey(userIsMonkey);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public boolean isUserAMonkey() {
        boolean z;
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                Log.i(TAG, "isUserAMonkey mUserIsMonkey = " + this.mUserIsMonkey);
                z = this.mUserIsMonkey || this.mActivityTaskManager.isControllerAMonkey();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return z;
    }

    public void requestSystemServerHeapDump() {
        ProcessRecord pr;
        if (!Build.IS_DEBUGGABLE) {
            Slog.wtf(TAG, "requestSystemServerHeapDump called on a user build");
        } else if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("Only the system process is allowed to request a system heap dump");
        } else {
            synchronized (this.mPidsSelfLocked) {
                pr = this.mPidsSelfLocked.get(Process.myPid());
            }
            if (pr == null) {
                Slog.w(TAG, "system process not in mPidsSelfLocked: " + Process.myPid());
                return;
            }
            synchronized (this.mAppProfiler.mProfilerLock) {
                this.mAppProfiler.startHeapDumpLPf(pr.mProfile, true);
            }
        }
    }

    public void requestBugReport(int bugreportType) {
        requestBugReportWithDescription(null, null, bugreportType, 0L);
    }

    public void requestBugReportWithDescription(String shareTitle, String shareDescription, int bugreportType) {
        requestBugReportWithDescription(shareTitle, shareDescription, bugreportType, 0L);
    }

    public void requestBugReportWithDescription(String shareTitle, String shareDescription, int bugreportType, long nonce) {
        String type;
        switch (bugreportType) {
            case 0:
                type = "bugreportfull";
                break;
            case 1:
                type = "bugreportplus";
                break;
            case 2:
                type = "bugreportremote";
                break;
            case 3:
                type = "bugreportwear";
                break;
            case 4:
                type = "bugreporttelephony";
                break;
            case 5:
                type = "bugreportwifi";
                break;
            default:
                throw new IllegalArgumentException("Provided bugreport type is not correct, value: " + bugreportType);
        }
        Slog.i(TAG, type + " requested by UID " + Binder.getCallingUid());
        enforceCallingPermission("android.permission.DUMP", "requestBugReport");
        if (!TextUtils.isEmpty(shareTitle)) {
            if (shareTitle.length() > 100) {
                throw new IllegalArgumentException("shareTitle should be less than 100 characters");
            }
            if (!TextUtils.isEmpty(shareDescription) && shareDescription.length() > 150) {
                throw new IllegalArgumentException("shareDescription should be less than 150 characters");
            }
            Slog.d(TAG, "Bugreport notification title " + shareTitle + " description " + shareDescription);
        }
        Intent triggerShellBugreport = new Intent();
        triggerShellBugreport.setAction(INTENT_BUGREPORT_REQUESTED);
        triggerShellBugreport.setPackage("com.android.shell");
        triggerShellBugreport.putExtra(EXTRA_BUGREPORT_TYPE, bugreportType);
        triggerShellBugreport.putExtra(EXTRA_BUGREPORT_NONCE, nonce);
        triggerShellBugreport.addFlags(268435456);
        triggerShellBugreport.addFlags(16777216);
        if (shareTitle != null) {
            triggerShellBugreport.putExtra(EXTRA_TITLE, shareTitle);
        }
        if (shareDescription != null) {
            triggerShellBugreport.putExtra(EXTRA_DESCRIPTION, shareDescription);
        }
        long identity = Binder.clearCallingIdentity();
        try {
            this.mContext.sendBroadcastAsUser(triggerShellBugreport, UserHandle.SYSTEM);
        } finally {
            Binder.restoreCallingIdentity(identity);
        }
    }

    public void requestTelephonyBugReport(String shareTitle, String shareDescription) {
        requestBugReportWithDescription(shareTitle, shareDescription, 4);
    }

    public void requestWifiBugReport(String shareTitle, String shareDescription) {
        requestBugReportWithDescription(shareTitle, shareDescription, 5);
    }

    public void requestInteractiveBugReport() {
        requestBugReportWithDescription(null, null, 1);
    }

    public void requestInteractiveBugReportWithDescription(String shareTitle, String shareDescription) {
        requestBugReportWithDescription(shareTitle, shareDescription, 1);
    }

    public void requestFullBugReport() {
        requestBugReportWithDescription(null, null, 0);
    }

    public void requestRemoteBugReport(long nonce) {
        requestBugReportWithDescription(null, null, 2, nonce);
    }

    public boolean launchBugReportHandlerApp() {
        if (!BugReportHandlerUtil.isBugReportHandlerEnabled(this.mContext)) {
            return false;
        }
        Slog.i(TAG, "launchBugReportHandlerApp requested by UID " + Binder.getCallingUid());
        enforceCallingPermission("android.permission.DUMP", "launchBugReportHandlerApp");
        return BugReportHandlerUtil.launchBugReportHandlerApp(this.mContext);
    }

    public List<String> getBugreportWhitelistedPackages() {
        enforceCallingPermission("android.permission.MANAGE_DEBUGGING", "getBugreportWhitelistedPackages");
        return new ArrayList(SystemConfig.getInstance().getBugreportWhitelistedPackages());
    }

    public void registerProcessObserver(IProcessObserver observer) {
        enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "registerProcessObserver()");
        this.mProcessList.registerProcessObserver(observer);
    }

    public void unregisterProcessObserver(IProcessObserver observer) {
        this.mProcessList.unregisterProcessObserver(observer);
    }

    public int getUidProcessState(int uid, String callingPackage) {
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidProcessState");
        }
        this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), UserHandle.getUserId(uid), false, 2, "getUidProcessState", callingPackage);
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                if (this.mPendingStartActivityUids.isPendingTopUid(uid)) {
                    resetPriorityAfterProcLockedSection();
                    return 2;
                }
                int uidProcStateLOSP = this.mProcessList.getUidProcStateLOSP(uid);
                resetPriorityAfterProcLockedSection();
                return uidProcStateLOSP;
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public int getUidProcessCapabilities(int uid, String callingPackage) {
        int uidProcessCapabilityLOSP;
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidProcessState");
        }
        this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), UserHandle.getUserId(uid), false, 2, "getUidProcessCapabilities", callingPackage);
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                uidProcessCapabilityLOSP = this.mProcessList.getUidProcessCapabilityLOSP(uid);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return uidProcessCapabilityLOSP;
    }

    public void registerUidObserver(IUidObserver observer, int which, int cutpoint, String callingPackage) {
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        this.mUidObserverController.register(observer, which, cutpoint, callingPackage, Binder.getCallingUid());
    }

    public void unregisterUidObserver(IUidObserver observer) {
        this.mUidObserverController.unregister(observer);
    }

    public boolean isUidActive(int uid, String callingPackage) {
        if (!hasUsageStatsPermission(callingPackage)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "isUidActive");
        }
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                if (isUidActiveLOSP(uid)) {
                    resetPriorityAfterProcLockedSection();
                    return true;
                }
                resetPriorityAfterProcLockedSection();
                return this.mInternal.isPendingTopUid(uid);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean isUidActiveLOSP(int uid) {
        UidRecord uidRecord = this.mProcessList.getUidRecordLOSP(uid);
        return (uidRecord == null || uidRecord.isSetIdle()) ? false : true;
    }

    public void setPersistentVrThread(int tid) {
        this.mActivityTaskManager.setPersistentVrThread(tid);
    }

    public static boolean scheduleAsRegularPriority(int tid, boolean suppressLogs) {
        try {
            Process.setThreadScheduler(tid, 0, 0);
            return true;
        } catch (IllegalArgumentException e) {
            if (!suppressLogs) {
                Slog.w(TAG, "Failed to set scheduling policy, thread does not exist:\n" + e);
            }
            return false;
        } catch (SecurityException e2) {
            if (!suppressLogs) {
                Slog.w(TAG, "Failed to set scheduling policy, not allowed:\n" + e2);
            }
            return false;
        }
    }

    public static boolean scheduleAsFifoPriority(int tid, boolean suppressLogs) {
        try {
            Process.setThreadScheduler(tid, 1073741825, 1);
            return true;
        } catch (IllegalArgumentException e) {
            if (!suppressLogs) {
                Slog.w(TAG, "Failed to set scheduling policy, thread does not exist:\n" + e);
                return false;
            }
            return false;
        } catch (SecurityException e2) {
            if (!suppressLogs) {
                Slog.w(TAG, "Failed to set scheduling policy, not allowed:\n" + e2);
                return false;
            }
            return false;
        }
    }

    public void setRenderThread(int tid) {
        ProcessRecord proc;
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                int pid = Binder.getCallingPid();
                if (pid == Process.myPid()) {
                    demoteSystemServerRenderThread(tid);
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                synchronized (this.mPidsSelfLocked) {
                    proc = this.mPidsSelfLocked.get(pid);
                }
                if (proc != null && proc.getRenderThreadTid() == 0 && tid > 0) {
                    if (!Process.isThreadInProcess(pid, tid)) {
                        throw new IllegalArgumentException("Render thread does not belong to process");
                    }
                    proc.setRenderThreadTid(tid);
                    if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                        Slog.d("UI_FIFO", "Set RenderThread tid " + tid + " for pid " + pid);
                    }
                    if (proc.mState.getCurrentSchedulingGroup() == 3) {
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                            Slog.d("UI_FIFO", "Promoting " + tid + "out of band");
                        }
                        if (this.mUseFifoUiScheduling) {
                            Process.setThreadScheduler(proc.getRenderThreadTid(), 1073741825, 1);
                        } else {
                            Process.setThreadPriority(proc.getRenderThreadTid(), -10);
                        }
                    }
                    if (ITranAnimationBoost.Instance().isLauncherApp(proc.processName)) {
                        ITranAnimationBoost.Instance().boostHomeProcess(proc.getPid(), proc.getRenderThreadTid(), proc.processName);
                    }
                } else if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                    Slog.d("UI_FIFO", "Didn't set thread from setRenderThread? PID: " + pid + ", TID: " + tid + " FIFO: " + this.mUseFifoUiScheduling);
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    private void demoteSystemServerRenderThread(int tid) {
        Process.setThreadPriority(tid, 10);
    }

    public boolean isVrModePackageEnabled(ComponentName packageName) {
        this.mActivityTaskManager.enforceSystemHasVrFeature();
        VrManagerInternal vrService = (VrManagerInternal) LocalServices.getService(VrManagerInternal.class);
        return vrService.hasVrPackage(packageName, UserHandle.getCallingUserId()) == 0;
    }

    public boolean isTopActivityImmersive() {
        return this.mActivityTaskManager.isTopActivityImmersive();
    }

    public boolean isTopOfTask(IBinder token) {
        return ActivityClient.getInstance().isTopOfTask(token);
    }

    public void setHasTopUi(boolean hasTopUi) throws RemoteException {
        if (checkCallingPermission("android.permission.INTERNAL_SYSTEM_WINDOW") != 0) {
            String msg = "Permission Denial: setHasTopUi() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.INTERNAL_SYSTEM_WINDOW";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
        int pid = Binder.getCallingPid();
        long origId = Binder.clearCallingIdentity();
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                boolean changed = false;
                synchronized (this.mPidsSelfLocked) {
                    ProcessRecord pr = this.mPidsSelfLocked.get(pid);
                    if (pr == null) {
                        Slog.w(TAG, "setHasTopUi called on unknown pid: " + pid);
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    if (pr.mState.hasTopUi() != hasTopUi) {
                        if (ActivityManagerDebugConfig.DEBUG_OOM_ADJ) {
                            Slog.d(TAG, "Setting hasTopUi=" + hasTopUi + " for pid=" + pid);
                        }
                        pr.mState.setHasTopUi(hasTopUi);
                        changed = true;
                    }
                    if (changed) {
                        updateOomAdjLocked(pr, "updateOomAdj_uiVisibility");
                    }
                    resetPriorityAfterLockedSection();
                }
            }
        } finally {
            Binder.restoreCallingIdentity(origId);
        }
    }

    public final void enterSafeMode() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!this.mSystemReady) {
                    try {
                        AppGlobals.getPackageManager().enterSafeMode();
                    } catch (RemoteException e) {
                    }
                }
                this.mSafeMode = true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void showSafeModeOverlay() {
        View v = LayoutInflater.from(this.mContext).inflate(17367302, (ViewGroup) null);
        WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
        lp.type = 2015;
        lp.width = -2;
        lp.height = -2;
        lp.gravity = 8388691;
        lp.format = v.getBackground().getOpacity();
        lp.flags = 24;
        lp.privateFlags |= 16;
        ((WindowManager) this.mContext.getSystemService("window")).addView(v, lp);
    }

    public void noteWakeupAlarm(IIntentSender sender, WorkSource workSource, int sourceUid, String sourcePkg, String tag) {
        WorkSource workSource2;
        int sourceUid2;
        int standbyBucket;
        String str;
        String str2;
        if (workSource != null && workSource.isEmpty()) {
            workSource2 = null;
        } else {
            workSource2 = workSource;
        }
        if (sourceUid <= 0 && workSource2 == null) {
            if (sender == null || !(sender instanceof PendingIntentRecord)) {
                return;
            }
            PendingIntentRecord rec = (PendingIntentRecord) sender;
            int callerUid = Binder.getCallingUid();
            sourceUid2 = rec.uid == callerUid ? 1000 : rec.uid;
        } else {
            sourceUid2 = sourceUid;
        }
        int standbyBucket2 = 0;
        this.mBatteryStatsService.noteWakupAlarm(sourcePkg, sourceUid2, workSource2, tag);
        if (workSource2 == null) {
            if (this.mUsageStatsService == null) {
                standbyBucket = 0;
            } else {
                int standbyBucket3 = this.mUsageStatsService.getAppStandbyBucket(sourcePkg, UserHandle.getUserId(sourceUid2), SystemClock.elapsedRealtime());
                standbyBucket = standbyBucket3;
            }
            FrameworkStatsLog.write_non_chained(35, sourceUid2, (String) null, tag, sourcePkg, standbyBucket);
            if (ActivityManagerDebugConfig.DEBUG_POWER) {
                Slog.w(TAG, "noteWakeupAlarm[ sourcePkg=" + sourcePkg + ", sourceUid=" + sourceUid2 + ", workSource=" + workSource2 + ", tag=" + tag + ", standbyBucket=" + standbyBucket + "]");
            }
            return;
        }
        String workSourcePackage = workSource2.getPackageName(0);
        int workSourceUid = workSource2.getAttributionUid();
        if (workSourcePackage == null) {
            workSourcePackage = sourcePkg;
            workSourceUid = sourceUid2;
        }
        if (this.mUsageStatsService != null) {
            str = ", standbyBucket=";
            str2 = ", tag=";
            standbyBucket2 = this.mUsageStatsService.getAppStandbyBucket(workSourcePackage, UserHandle.getUserId(workSourceUid), SystemClock.elapsedRealtime());
        } else {
            str = ", standbyBucket=";
            str2 = ", tag=";
        }
        FrameworkStatsLog.write(35, workSource2, tag, sourcePkg, standbyBucket2);
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            Slog.w(TAG, "noteWakeupAlarm[ sourcePkg=" + sourcePkg + ", sourceUid=" + sourceUid2 + ", workSource=" + workSource2 + str2 + tag + str + standbyBucket2 + " wsName=" + workSourcePackage + ")]");
        }
    }

    public void noteAlarmStart(IIntentSender sender, WorkSource workSource, int sourceUid, String tag) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (sourceUid <= 0 && workSource == null) {
            if (sender == null || !(sender instanceof PendingIntentRecord)) {
                return;
            }
            PendingIntentRecord rec = (PendingIntentRecord) sender;
            int callerUid = Binder.getCallingUid();
            sourceUid = rec.uid == callerUid ? 1000 : rec.uid;
        }
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            Slog.w(TAG, "noteAlarmStart[sourceUid=" + sourceUid + ", workSource=" + workSource + ", tag=" + tag + "]");
        }
        this.mBatteryStatsService.noteAlarmStart(tag, workSource, sourceUid);
    }

    public void noteAlarmFinish(IIntentSender sender, WorkSource workSource, int sourceUid, String tag) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (sourceUid <= 0 && workSource == null) {
            if (sender == null || !(sender instanceof PendingIntentRecord)) {
                return;
            }
            PendingIntentRecord rec = (PendingIntentRecord) sender;
            int callerUid = Binder.getCallingUid();
            sourceUid = rec.uid == callerUid ? 1000 : rec.uid;
        }
        if (ActivityManagerDebugConfig.DEBUG_POWER) {
            Slog.w(TAG, "noteAlarmFinish[sourceUid=" + sourceUid + ", workSource=" + workSource + ", tag=" + tag + "]");
        }
        this.mBatteryStatsService.noteAlarmFinish(tag, workSource, sourceUid);
    }

    public boolean killPids(int[] pids, String pReason, boolean secure) {
        int type;
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("killPids only available to the system");
        }
        final String reason = pReason == null ? "Unknown" : pReason;
        boolean killed = false;
        final ArrayList<ProcessRecord> killCandidates = new ArrayList<>();
        synchronized (this.mPidsSelfLocked) {
            int worstType = 0;
            for (int i : pids) {
                ProcessRecord proc = this.mPidsSelfLocked.get(i);
                if (proc != null && (type = proc.mState.getSetAdj()) > worstType) {
                    worstType = type;
                }
            }
            if (worstType < 999 && worstType > 900) {
                worstType = 900;
            }
            if (!secure && worstType < 500) {
                worstType = 500;
            }
            Slog.w(TAG, "Killing processes " + reason + " at adjustment " + worstType);
            for (int i2 : pids) {
                ProcessRecord proc2 = this.mPidsSelfLocked.get(i2);
                if (proc2 != null) {
                    int adj = proc2.mState.getSetAdj();
                    if (adj >= worstType && !proc2.isKilledByAm()) {
                        killCandidates.add(proc2);
                        killed = true;
                    }
                }
            }
        }
        if (!killCandidates.isEmpty()) {
            this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda26
                @Override // java.lang.Runnable
                public final void run() {
                    ActivityManagerService.this.m1048lambda$killPids$4$comandroidserveramActivityManagerService(killCandidates, reason);
                }
            });
        }
        return killed;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$killPids$4$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1048lambda$killPids$4$comandroidserveramActivityManagerService(ArrayList killCandidates, String reason) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int size = killCandidates.size();
                for (int i = 0; i < size; i++) {
                    ((ProcessRecord) killCandidates.get(i)).killLocked(reason, 13, 12, true);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void killUid(int appId, int userId, String reason) {
        enforceCallingPermission("android.permission.KILL_UID", "killUid");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                long identity = Binder.clearCallingIdentity();
                synchronized (this.mProcLock) {
                    try {
                        boostPriorityForProcLockedSection();
                        this.mProcessList.killPackageProcessesLSP(null, appId, userId, -800, false, true, true, true, false, false, 13, 11, reason != null ? reason : "kill uid");
                    } catch (Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
                Binder.restoreCallingIdentity(identity);
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void killUidForPermissionChange(int appId, int userId, String reason) {
        enforceCallingPermission("android.permission.KILL_UID", "killUid");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                long identity = Binder.clearCallingIdentity();
                synchronized (this.mProcLock) {
                    try {
                        boostPriorityForProcLockedSection();
                        this.mProcessList.killPackageProcessesLSP(null, appId, userId, -800, false, true, true, true, false, false, 8, 0, reason != null ? reason : "kill uid");
                    } catch (Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
                Binder.restoreCallingIdentity(identity);
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean killProcessesBelowForeground(String reason) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("killProcessesBelowForeground() only available to system");
        }
        return killProcessesBelowAdj(0, reason);
    }

    private boolean killProcessesBelowAdj(int belowAdj, String reason) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("killProcessesBelowAdj() only available to system");
        }
        boolean killed = false;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mProcLock) {
                    boostPriorityForProcLockedSection();
                    synchronized (this.mPidsSelfLocked) {
                        int size = this.mPidsSelfLocked.size();
                        for (int i = 0; i < size; i++) {
                            this.mPidsSelfLocked.keyAt(i);
                            ProcessRecord proc = this.mPidsSelfLocked.valueAt(i);
                            if (proc != null) {
                                int adj = proc.mState.getSetAdj();
                                if (adj > belowAdj && !proc.isKilledByAm()) {
                                    proc.killLocked(reason, 8, true);
                                    killed = true;
                                }
                            }
                        }
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return killed;
    }

    public void killProcessesWhenImperceptible(int[] pids, String reason) {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            throw new SecurityException("Requires permission android.permission.FORCE_STOP_PACKAGES");
        }
        int callerUid = Binder.getCallingUid();
        long iden = Binder.clearCallingIdentity();
        try {
            this.mProcessList.killProcessesWhenImperceptible(pids, reason, callerUid);
        } finally {
            Binder.restoreCallingIdentity(iden);
        }
    }

    public void hang(IBinder who, boolean allowRestart) {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        IBinder.DeathRecipient death = new IBinder.DeathRecipient() { // from class: com.android.server.am.ActivityManagerService.11
            @Override // android.os.IBinder.DeathRecipient
            public void binderDied() {
                synchronized (this) {
                    notifyAll();
                }
            }
        };
        try {
            who.linkToDeath(death, 0);
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    Watchdog.getInstance().setAllowRestart(allowRestart);
                    Slog.i(TAG, "Hanging system process at request of pid " + Binder.getCallingPid());
                    synchronized (death) {
                        while (who.isBinderAlive()) {
                            try {
                                death.wait();
                            } catch (InterruptedException e) {
                            }
                        }
                    }
                    Watchdog.getInstance().setAllowRestart(true);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
        } catch (RemoteException e2) {
            Slog.w(TAG, "hang: given caller IBinder is already dead.");
        }
    }

    public void restart() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        Log.i(TAG, "Sending shutdown broadcast...");
        BroadcastReceiver br = new BroadcastReceiver() { // from class: com.android.server.am.ActivityManagerService.12
            @Override // android.content.BroadcastReceiver
            public void onReceive(Context context, Intent intent) {
                Log.i(ActivityManagerService.TAG, "Shutting down activity manager...");
                ActivityManagerService.this.shutdown(10000);
                Log.i(ActivityManagerService.TAG, "Shutdown complete, restarting!");
                Process.killProcess(Process.myPid());
                System.exit(10);
            }
        };
        Intent intent = new Intent("android.intent.action.ACTION_SHUTDOWN");
        intent.addFlags(268435456);
        intent.putExtra("android.intent.extra.SHUTDOWN_USERSPACE_ONLY", true);
        br.onReceive(this.mContext, intent);
    }

    public void performIdleMaintenance() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                final long now = SystemClock.uptimeMillis();
                final long timeSinceLastIdle = now - this.mLastIdleTime;
                this.mOomAdjuster.mCachedAppOptimizer.compactAllSystem();
                final long lowRamSinceLastIdle = this.mAppProfiler.getLowRamTimeSinceIdleLPr(now);
                this.mLastIdleTime = now;
                this.mAppProfiler.updateLowRamTimestampLPr(now);
                StringBuilder sb = new StringBuilder(128);
                sb.append("Idle maintenance over ");
                TimeUtils.formatDuration(timeSinceLastIdle, sb);
                sb.append(" low RAM for ");
                TimeUtils.formatDuration(lowRamSinceLastIdle, sb);
                Slog.i(TAG, sb.toString());
                final boolean doKilling = lowRamSinceLastIdle > timeSinceLastIdle / 3;
                long totalMemoryInKb = Process.getTotalMemory() / 1000;
                final long memoryGrowthThreshold = Math.max(totalMemoryInKb / 100, (long) JobStatus.DEFAULT_TRIGGER_UPDATE_DELAY);
                this.mProcessList.forEachLruProcessesLOSP(false, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda13
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.this.m1050xef82616f(doKilling, memoryGrowthThreshold, timeSinceLastIdle, lowRamSinceLastIdle, now, (ProcessRecord) obj);
                    }
                });
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$performIdleMaintenance$6$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1050xef82616f(boolean doKilling, long memoryGrowthThreshold, long timeSinceLastIdle, long lowRamSinceLastIdle, long now, final ProcessRecord proc) {
        final long initialIdlePss;
        final long lastPss;
        long lastSwapPss;
        ProcessProfileRecord pr;
        if (proc.getThread() == null) {
            return;
        }
        ProcessProfileRecord pr2 = proc.mProfile;
        ProcessStateRecord state = proc.mState;
        int setProcState = state.getSetProcState();
        if (state.isNotCachedSinceIdle()) {
            if (setProcState >= 5 && setProcState <= 10) {
                synchronized (this.mAppProfiler.mProfilerLock) {
                    try {
                        initialIdlePss = pr2.getInitialIdlePss();
                        lastPss = pr2.getLastPss();
                        lastSwapPss = pr2.getLastSwapPss();
                    } catch (Throwable th) {
                        th = th;
                        while (true) {
                            try {
                                break;
                            } catch (Throwable th2) {
                                th = th2;
                            }
                        }
                        throw th;
                    }
                }
                if (!doKilling || initialIdlePss == 0 || lastPss <= (3 * initialIdlePss) / 2 || lastPss <= initialIdlePss + memoryGrowthThreshold) {
                    pr = pr2;
                } else {
                    StringBuilder sb2 = new StringBuilder(128);
                    sb2.append("Kill");
                    sb2.append(proc.processName);
                    sb2.append(" in idle maint: pss=");
                    sb2.append(lastPss);
                    sb2.append(", swapPss=");
                    sb2.append(lastSwapPss);
                    sb2.append(", initialPss=");
                    sb2.append(initialIdlePss);
                    sb2.append(", period=");
                    TimeUtils.formatDuration(timeSinceLastIdle, sb2);
                    sb2.append(", lowRamPeriod=");
                    pr = pr2;
                    TimeUtils.formatDuration(lowRamSinceLastIdle, sb2);
                    Slog.wtfQuiet(TAG, sb2.toString());
                    this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda33
                        @Override // java.lang.Runnable
                        public final void run() {
                            ActivityManagerService.this.m1049x360ad3d0(proc, lastPss, initialIdlePss);
                        }
                    });
                }
            }
        } else if (setProcState < 14 && setProcState >= 0) {
            state.setNotCachedSinceIdle(true);
            synchronized (this.mAppProfiler.mProfilerLock) {
                try {
                    try {
                        pr2.setInitialIdlePss(0L);
                        this.mAppProfiler.updateNextPssTimeLPf(state.getSetProcState(), proc.mProfile, now, true);
                    } catch (Throwable th3) {
                        th = th3;
                        throw th;
                    }
                } catch (Throwable th4) {
                    th = th4;
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$performIdleMaintenance$5$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1049x360ad3d0(ProcessRecord proc, long lastPss, long initialIdlePss) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                proc.killLocked("idle maint (pss " + lastPss + " from " + initialIdlePss + ")", 13, 6, true);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void sendIdleJobTrigger() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        long ident = Binder.clearCallingIdentity();
        try {
            Intent intent = new Intent(ACTION_TRIGGER_IDLE).setPackage(PackageManagerService.PLATFORM_PACKAGE_NAME).addFlags(1073741824);
            broadcastIntent(null, intent, null, null, 0, null, null, null, -1, null, false, false, -1);
        } finally {
            Binder.restoreCallingIdentity(ident);
        }
    }

    private void retrieveSettings() {
        Resources res;
        ContentResolver resolver = this.mContext.getContentResolver();
        this.mActivityTaskManager.retrieveSettings(resolver);
        String debugApp = Settings.Global.getString(resolver, "debug_app");
        boolean waitForDebugger = Settings.Global.getInt(resolver, "wait_for_debugger", 0) != 0;
        boolean alwaysFinishActivities = Settings.Global.getInt(resolver, "always_finish_activities", 0) != 0;
        this.mHiddenApiBlacklist.registerObserver();
        this.mSdkSandboxSettings.registerObserver();
        this.mPlatformCompat.registerContentObserver();
        this.mAppProfiler.retrieveSettings();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mOrigDebugApp = debugApp;
                this.mDebugApp = debugApp;
                this.mOrigWaitForDebugger = waitForDebugger;
                this.mWaitForDebugger = waitForDebugger;
                this.mAlwaysFinishActivities = alwaysFinishActivities;
                res = this.mContext.getResources();
                boolean userSwitchUiEnabled = res.getBoolean(17891581) ? false : true;
                int maxRunningUsers = res.getInteger(17694882);
                boolean delayUserDataLocking = res.getBoolean(17891707);
                this.mUserController.setInitialConfig(userSwitchUiEnabled, maxRunningUsers, delayUserDataLocking);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        this.mAppErrors.loadAppsNotReportingCrashesFromConfig(res.getString(17039884));
    }

    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [8922=4] */
    /* JADX WARN: Code restructure failed: missing block: B:83:0x02d7, code lost:
        if (android.provider.Settings.Secure.getInt(r52.mContext.getContentResolver(), "user_setup_complete", 0) == 0) goto L72;
     */
    /* JADX WARN: Code restructure failed: missing block: B:88:0x02ed, code lost:
        if (android.os.SystemProperties.getBoolean(com.android.server.am.ActivityManagerService.SYSTEM_USER_HOME_NEEDED, false) != false) goto L74;
     */
    /* JADX WARN: Code restructure failed: missing block: B:89:0x02ef, code lost:
        r54.traceBegin("enableHomeActivity");
        r0 = new android.content.ComponentName(r52.mContext, com.android.internal.app.SystemUserHomeActivity.class);
     */
    /* JADX WARN: Code restructure failed: missing block: B:91:0x02fe, code lost:
        android.app.AppGlobals.getPackageManager().setComponentEnabledSetting(r0, 1, 0, 0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:92:0x0306, code lost:
        r54.traceEnd();
     */
    /* JADX WARN: Code restructure failed: missing block: B:93:0x030a, code lost:
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:95:0x030f, code lost:
        throw r0.rethrowAsRuntimeException();
     */
    /* JADX WARN: Code restructure failed: missing block: B:98:0x0313, code lost:
        if (android.content.pm.PackageManager.tpmsUid != (-1)) goto L91;
     */
    /* JADX WARN: Code restructure failed: missing block: B:99:0x0315, code lost:
        r0 = android.app.AppGlobals.getPackageManager();
        android.content.pm.PackageManager.tpmsUid = r0.getPackageUid("com.hoffnung", 268443648, 0);
     */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0472 A[Catch: all -> 0x0523, TryCatch #1 {all -> 0x0523, blocks: (B:134:0x0464, B:136:0x0472, B:137:0x0481, B:138:0x04b9, B:155:0x051e), top: B:184:0x02b1 }] */
    /* JADX WARN: Removed duplicated region for block: B:141:0x04c1  */
    /* JADX WARN: Removed duplicated region for block: B:149:0x04f5  */
    /* JADX WARN: Removed duplicated region for block: B:235:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void systemReady(Runnable goingCallback, TimingsTraceAndSlog t) {
        int currentUserId;
        boolean bootingSystemUser;
        int currentUserId2;
        boolean z;
        final ActivityManagerService activityManagerService;
        sMtkSystemServerIns.addBootEvent("AMS:systemReady");
        t.traceBegin("PhaseActivityManagerReady");
        NVUtils mNVUtils = new NVUtils();
        try {
            int key = NVUtils.getDemoPhoneNV();
            Slog.i(TAG, "getDemoPhoneNV " + key);
            SystemProperties.set("sys.telephony.kom.enable", String.valueOf(key));
        } catch (Exception e) {
            Slog.e(TAG, "Error getDemoPhoneNV: ", e);
        }
        ITranActivityManagerService.Instance().onAMSSystemReady(this.mContext);
        this.mAmsExt.onSystemReady(this.mContext);
        if (1 == mNVUtils.rlk_readData(SystemProperties.getInt("ro.proinfo.auto_shutdown", 830))) {
            Log.d("RESET_REBOOT", "AMS reboot +");
            PowerManager mPowerManager = (PowerManager) this.mContext.getSystemService("power");
            mPowerManager.shutdown(false, "midtest shut down.", false);
            mNVUtils.rlk_writeDate(817, 1);
            Log.d("RESET_REBOOT", "AMS reboot -");
        }
        this.mTranAmsExt.onSystemReady(this.mContext, this.mHandler);
        ITranActivityManagerService.Instance().onCloudConfigSystemReady();
        this.mSystemServiceManager.preSystemReady();
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (this.mSystemReady) {
                    if (goingCallback != null) {
                        try {
                            goingCallback.run();
                        } catch (Throwable th) {
                            th = th;
                            while (true) {
                                try {
                                    break;
                                } catch (Throwable th2) {
                                    th = th2;
                                }
                            }
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                    t.traceEnd();
                    resetPriorityAfterLockedSection();
                    return;
                }
                t.traceBegin("controllersReady");
                this.mLocalDeviceIdleController = (DeviceIdleInternal) LocalServices.getService(DeviceIdleInternal.class);
                this.mActivityTaskManager.onSystemReady();
                this.mUserController.onSystemReady();
                this.mAppOpsService.systemReady();
                this.mProcessList.onSystemReady();
                this.mAppRestrictionController.onSystemReady();
                this.mSystemReady = true;
                t.traceEnd();
                resetPriorityAfterLockedSection();
                try {
                    sTheRealBuildSerial = IDeviceIdentifiersPolicyService.Stub.asInterface(ServiceManager.getService("device_identifiers")).getSerial();
                } catch (RemoteException e2) {
                }
                t.traceBegin("killProcesses");
                synchronized (this.mPidsSelfLocked) {
                    try {
                        ArrayList<ProcessRecord> procsToKill = null;
                        for (int i = this.mPidsSelfLocked.size() - 1; i >= 0; i--) {
                            try {
                                ProcessRecord proc = this.mPidsSelfLocked.valueAt(i);
                                if (!isAllowedWhileBooting(proc.info)) {
                                    ArrayList<ProcessRecord> procsToKill2 = procsToKill == null ? new ArrayList<>() : procsToKill;
                                    try {
                                        procsToKill2.add(proc);
                                        procsToKill = procsToKill2;
                                    } catch (Throwable th3) {
                                        th = th3;
                                        while (true) {
                                            try {
                                                break;
                                            } catch (Throwable th4) {
                                                th = th4;
                                            }
                                        }
                                        throw th;
                                    }
                                }
                            } catch (Throwable th5) {
                                th = th5;
                            }
                        }
                        try {
                            synchronized (this) {
                                try {
                                    boostPriorityForLockedSection();
                                    if (procsToKill != null) {
                                        try {
                                            for (int i2 = procsToKill.size() - 1; i2 >= 0; i2--) {
                                                ProcessRecord proc2 = procsToKill.get(i2);
                                                Slog.i(TAG, "Removing system update proc: " + proc2);
                                                this.mProcessList.removeProcessLocked(proc2, true, false, 13, 8, "system update done");
                                            }
                                        } catch (Throwable th6) {
                                            th = th6;
                                            while (true) {
                                                try {
                                                    break;
                                                } catch (Throwable th7) {
                                                    th = th7;
                                                }
                                            }
                                            resetPriorityAfterLockedSection();
                                            throw th;
                                        }
                                    }
                                    this.mProcessesReady = true;
                                    ITranActivityManagerService.Instance().onProcessesReady();
                                    ITranActivityManagerService.Instance().onProcessesReady(this.mContext);
                                    resetPriorityAfterLockedSection();
                                    t.traceEnd();
                                    Slog.i(TAG, "System now ready");
                                    EventLogTags.writeBootProgressAmsReady(SystemClock.uptimeMillis());
                                    sMtkSystemServerIns.addBootEvent("AMS:AMS_READY");
                                    t.traceBegin("updateTopComponentForFactoryTest");
                                    this.mAtmInternal.updateTopComponentForFactoryTest();
                                    t.traceEnd();
                                    t.traceBegin("registerActivityLaunchObserver");
                                    this.mAtmInternal.getLaunchObserverRegistry().registerLaunchObserver(this.mActivityLaunchObserver);
                                    t.traceEnd();
                                    t.traceBegin("watchDeviceProvisioning");
                                    watchDeviceProvisioning(this.mContext);
                                    t.traceEnd();
                                    t.traceBegin("retrieveSettings");
                                    retrieveSettings();
                                    t.traceEnd();
                                    t.traceBegin("Ugm.onSystemReady");
                                    this.mUgmInternal.onSystemReady();
                                    t.traceEnd();
                                    t.traceBegin("updateForceBackgroundCheck");
                                    PowerManagerInternal pmi = (PowerManagerInternal) LocalServices.getService(PowerManagerInternal.class);
                                    if (pmi != null) {
                                        pmi.registerLowPowerModeObserver(12, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda6
                                            @Override // java.util.function.Consumer
                                            public final void accept(Object obj) {
                                                ActivityManagerService.this.m1062x9acbc6b2((PowerSaveState) obj);
                                            }
                                        });
                                        updateForceBackgroundCheck(pmi.getLowPowerState(12).batterySaverEnabled);
                                    } else {
                                        Slog.wtf(TAG, "PowerManagerInternal not found.");
                                    }
                                    t.traceEnd();
                                    if (goingCallback != null) {
                                        goingCallback.run();
                                    }
                                    t.traceBegin("getCurrentUser");
                                    currentUserId = this.mUserController.getCurrentUserId();
                                    Slog.i(TAG, "Current user:" + currentUserId);
                                    if (currentUserId != 0 && !this.mUserController.isSystemUserStarted()) {
                                        throw new RuntimeException("System user not started while current user is:" + currentUserId);
                                    }
                                    t.traceEnd();
                                    t.traceBegin("ActivityManagerStartApps");
                                    this.mBatteryStatsService.onSystemReady();
                                    this.mBatteryStatsService.noteEvent(32775, Integer.toString(currentUserId), currentUserId);
                                    this.mBatteryStatsService.noteEvent(32776, Integer.toString(currentUserId), currentUserId);
                                    bootingSystemUser = currentUserId == 0;
                                    if (bootingSystemUser) {
                                        this.mSystemServiceManager.onUserStarting(t, currentUserId);
                                    }
                                    synchronized (this) {
                                        try {
                                            try {
                                                boostPriorityForLockedSection();
                                                t.traceBegin("startPersistentApps");
                                                startPersistentApps(524288);
                                                t.traceEnd();
                                                this.mBooting = true;
                                                if (UserManager.isSplitSystemUser()) {
                                                    try {
                                                    } catch (Throwable th8) {
                                                        th = th8;
                                                        resetPriorityAfterLockedSection();
                                                        throw th;
                                                    }
                                                }
                                            } catch (Throwable th9) {
                                                th = th9;
                                            }
                                        } catch (Throwable th10) {
                                            th = th10;
                                        }
                                    }
                                } catch (Throwable th11) {
                                    th = th11;
                                }
                            }
                        } catch (Throwable th12) {
                            th = th12;
                            while (true) {
                                break;
                                break;
                            }
                            throw th;
                        }
                    } catch (Throwable th13) {
                        th = th13;
                    }
                }
            } catch (Throwable th14) {
                th = th14;
            }
        }
        if (bootingSystemUser) {
            t.traceBegin("startHomeOnAllDisplays");
            this.mAtmInternal.startHomeOnAllDisplays(currentUserId, "systemReady");
            t.traceEnd();
        }
        t.traceBegin("showSystemReadyErrorDialogs");
        this.mAtmInternal.showSystemReadyErrorDialogsIfNeeded();
        t.traceEnd();
        try {
            if (bootingSystemUser) {
                try {
                    t.traceBegin("sendUserStartBroadcast");
                    int callingUid = Binder.getCallingUid();
                    int callingPid = Binder.getCallingPid();
                    long ident = Binder.clearCallingIdentity();
                    try {
                        Intent intent = new Intent("android.intent.action.USER_STARTED");
                        intent.addFlags(1342177280);
                        intent.putExtra("android.intent.extra.user_handle", currentUserId);
                        int i3 = MY_PID;
                        z = true;
                        try {
                            broadcastIntentLocked(null, null, null, intent, null, null, 0, null, null, null, null, null, -1, null, false, false, i3, 1000, callingUid, callingPid, currentUserId);
                            Intent intent2 = new Intent("android.intent.action.USER_STARTING");
                            intent2.addFlags(1073741824);
                            currentUserId2 = currentUserId;
                            try {
                                intent2.putExtra("android.intent.extra.user_handle", currentUserId2);
                                activityManagerService = this;
                                try {
                                    broadcastIntentLocked(null, null, null, intent2, null, new IIntentReceiver.Stub() { // from class: com.android.server.am.ActivityManagerService.13
                                        public void performReceive(Intent intent3, int resultCode, String data, Bundle extras, boolean ordered, boolean sticky, int sendingUser) {
                                        }
                                    }, 0, null, null, new String[]{"android.permission.INTERACT_ACROSS_USERS"}, null, null, -1, null, true, false, i3, 1000, callingUid, callingPid, -1);
                                } catch (Throwable th15) {
                                    e = th15;
                                    Slog.wtf(TAG, "Failed sending first user broadcasts", e);
                                    Binder.restoreCallingIdentity(ident);
                                    t.traceEnd();
                                    t.traceBegin("resumeTopActivities");
                                    activityManagerService.mAtmInternal.resumeTopActivities(false);
                                    t.traceEnd();
                                    if (bootingSystemUser) {
                                        t.traceBegin("sendUserSwitchBroadcasts");
                                        activityManagerService.mUserController.sendUserSwitchBroadcasts(-1, currentUserId2);
                                        t.traceEnd();
                                    }
                                    t.traceBegin("setBinderProxies");
                                    BinderInternal.nSetBinderProxyCountWatermarks((int) BINDER_PROXY_HIGH_WATERMARK, (int) BINDER_PROXY_LOW_WATERMARK);
                                    BinderInternal.nSetBinderProxyCountEnabled(z);
                                    BinderInternal.setBinderProxyCountCallback(new BinderInternal.BinderProxyLimitListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda7
                                        public final void onLimitReached(int i4) {
                                            ActivityManagerService.this.m1063x54435451(i4);
                                        }
                                    }, activityManagerService.mHandler);
                                    t.traceEnd();
                                    t.traceEnd();
                                    t.traceBegin("componentAlias");
                                    activityManagerService.mComponentAliasResolver.onSystemReady(activityManagerService.mConstants.mEnableComponentAlias, activityManagerService.mConstants.mComponentAliasOverrides);
                                    t.traceEnd();
                                    t.traceEnd();
                                    resetPriorityAfterLockedSection();
                                    if (CAM_LOW_WARNING_SUPPORT) {
                                        CameraManager cameraManager = (CameraManager) activityManagerService.mContext.getSystemService("camera");
                                        activityManagerService.mCameraManager = cameraManager;
                                        cameraManager.registerAvailabilityCallback(activityManagerService.mAvailabilityCallback, (Handler) null);
                                    }
                                    ITranActivityManagerService.Instance().hookPmAfterSystemReady();
                                    if (ITranGriffinFeature.Instance().isGriffinSupport() && TRAN_GT_SUPPORT) {
                                        listenGameRecognition();
                                    }
                                    if (ITranGriffinFeature.Instance().isGriffinSupport()) {
                                        return;
                                    }
                                    ITranGriffinFeature.Instance().getConfigProvider().addStartWhiteList("android.os.lib.app");
                                    ITranGriffinFeature.Instance().getConfigProvider().addStartWhiteList("android.os.lib.consumer1");
                                    return;
                                }
                            } catch (Throwable th16) {
                                e = th16;
                                activityManagerService = this;
                            }
                        } catch (Throwable th17) {
                            e = th17;
                            activityManagerService = this;
                            currentUserId2 = currentUserId;
                        }
                    } catch (Throwable th18) {
                        e = th18;
                        currentUserId2 = currentUserId;
                        z = true;
                        activityManagerService = this;
                    }
                    Binder.restoreCallingIdentity(ident);
                    t.traceEnd();
                } catch (Throwable th19) {
                    th = th19;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } else {
                currentUserId2 = currentUserId;
                z = true;
                activityManagerService = this;
                Slog.i(TAG, "Not sending multi-user broadcasts for non-system user " + currentUserId2);
            }
            t.traceBegin("resumeTopActivities");
            activityManagerService.mAtmInternal.resumeTopActivities(false);
            t.traceEnd();
            if (bootingSystemUser) {
            }
            t.traceBegin("setBinderProxies");
            BinderInternal.nSetBinderProxyCountWatermarks((int) BINDER_PROXY_HIGH_WATERMARK, (int) BINDER_PROXY_LOW_WATERMARK);
            BinderInternal.nSetBinderProxyCountEnabled(z);
            BinderInternal.setBinderProxyCountCallback(new BinderInternal.BinderProxyLimitListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda7
                public final void onLimitReached(int i4) {
                    ActivityManagerService.this.m1063x54435451(i4);
                }
            }, activityManagerService.mHandler);
            t.traceEnd();
            t.traceEnd();
            t.traceBegin("componentAlias");
            activityManagerService.mComponentAliasResolver.onSystemReady(activityManagerService.mConstants.mEnableComponentAlias, activityManagerService.mConstants.mComponentAliasOverrides);
            t.traceEnd();
            t.traceEnd();
            resetPriorityAfterLockedSection();
            if (CAM_LOW_WARNING_SUPPORT) {
            }
            ITranActivityManagerService.Instance().hookPmAfterSystemReady();
            if (ITranGriffinFeature.Instance().isGriffinSupport()) {
                listenGameRecognition();
            }
            if (ITranGriffinFeature.Instance().isGriffinSupport()) {
            }
        } catch (Throwable th20) {
            th = th20;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$systemReady$7$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1062x9acbc6b2(PowerSaveState state) {
        updateForceBackgroundCheck(state.batterySaverEnabled);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$systemReady$8$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1063x54435451(int uid) {
        Slog.wtf(TAG, "Uid " + uid + " sent too many Binders to uid " + Process.myUid());
        BinderProxy.dumpProxyDebugInfo();
        if (uid == 1000) {
            Slog.i(TAG, "Skipping kill (uid is SYSTEM)");
            return;
        }
        killUid(UserHandle.getAppId(uid), UserHandle.getUserId(uid), "Too many Binders sent to SYSTEM");
        VMRuntime.getRuntime().requestConcurrentGC();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void rmChangeState() {
        if (this.mResForbidPss.booleanValue()) {
            Slog.d(TAG, "res_monitor forbid pss");
            SystemProperties.set("sys.resmonitor.forbidpss", "true");
            return;
        }
        Slog.d(TAG, "res_monitor do not forbid pss");
        SystemProperties.set("sys.resmonitor.forbidpss", "false");
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkRmState(boolean rmCloud) {
        if (!rmCloud && Build.TRAN_RM2_SUPPORT && this.mResForbidPss.booleanValue()) {
            this.mResForbidPss = false;
            rmChangeState();
        }
    }

    private void listenGameRecognition() {
        TranStateListener listener = new TranStateListener() { // from class: com.android.server.am.ActivityManagerService.14
            @Override // com.transsion.hubcore.griffin.lib.provider.TranStateListener
            public void onAppLaunch(ActivityInfo current, ActivityInfo next, int nextPid, boolean pausing, int nextType) {
                boolean vsyncCloudSwitch = false;
                boolean rmCloudSwitch = false;
                if (ITranGriffinFeature.Instance().isGriffinSupport() && ITranGriffinFeature.Instance().getConfigProvider() != null) {
                    vsyncCloudSwitch = ITranGriffinFeature.Instance().getConfigProvider().isFeatureEnable(13);
                    rmCloudSwitch = ITranGriffinFeature.Instance().getConfigProvider().isFeatureEnable(15);
                }
                ActivityManagerService.this.checkRmState(rmCloudSwitch);
                if (!vsyncCloudSwitch && !rmCloudSwitch) {
                    Slog.i(ActivityManagerService.TAG, "CloudSwitch close");
                } else if (ActivityManagerService.TRAN_GT_SUPPORT && ITranGriffinFeature.Instance().isGriffinSupport() && ITranGriffinFeature.Instance().getConfigProvider() != null && current != null && next != null) {
                    String currPackName = current.getComponentName().getPackageName();
                    String nextPackName = next.getComponentName().getPackageName();
                    Slog.i(ActivityManagerService.TAG, "Applaunch from " + currPackName + " to " + nextPackName);
                    boolean currPackInVsyncList = ITranGriffinFeature.Instance().getConfigProvider().inCloudList("tran_vsync_list", currPackName);
                    boolean nextPackInVsyncList = ITranGriffinFeature.Instance().getConfigProvider().inCloudList("tran_vsync_list", nextPackName);
                    if (!currPackInVsyncList && nextPackInVsyncList) {
                        if (vsyncCloudSwitch) {
                            Slog.i(ActivityManagerService.TAG, "set sys.surfaceflinger.aggressivevsync = true");
                            SystemProperties.set("sys.surfaceflinger.aggressivevsync", "true");
                        }
                        if (rmCloudSwitch && Build.TRAN_RM2_SUPPORT) {
                            ActivityManagerService.this.mResForbidPss = true;
                            ActivityManagerService.this.rmChangeState();
                        }
                    }
                    if (currPackInVsyncList && !nextPackInVsyncList) {
                        if (vsyncCloudSwitch) {
                            Slog.i(ActivityManagerService.TAG, "set sys.surfaceflinger.aggressivevsync = false");
                            SystemProperties.set("sys.surfaceflinger.aggressivevsync", "false");
                        }
                        if (rmCloudSwitch && Build.TRAN_RM2_SUPPORT) {
                            ActivityManagerService.this.mResForbidPss = false;
                            ActivityManagerService.this.rmChangeState();
                        }
                    }
                }
            }

            @Override // com.transsion.hubcore.griffin.lib.provider.TranStateListener
            public void onScreenChanged(boolean status) {
            }
        };
        boolean succeed = false;
        if (ITranGriffinFeature.Instance().getHooker() != null) {
            succeed = ITranGriffinFeature.Instance().getHooker().registerListener(listener);
        }
        Slog.d(TAG, "registerHookerListener:" + succeed);
    }

    private void watchDeviceProvisioning(final Context context) {
        if (isDeviceProvisioned(context)) {
            SystemProperties.set(SYSTEM_PROPERTY_DEVICE_PROVISIONED, "1");
        } else {
            context.getContentResolver().registerContentObserver(Settings.Global.getUriFor("device_provisioned"), false, new ContentObserver(new Handler(Looper.getMainLooper())) { // from class: com.android.server.am.ActivityManagerService.15
                @Override // android.database.ContentObserver
                public void onChange(boolean selfChange) {
                    if (ActivityManagerService.this.isDeviceProvisioned(context)) {
                        SystemProperties.set(ActivityManagerService.SYSTEM_PROPERTY_DEVICE_PROVISIONED, "1");
                        context.getContentResolver().unregisterContentObserver(this);
                    }
                }
            });
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public boolean isDeviceProvisioned(Context context) {
        return Settings.Global.getInt(context.getContentResolver(), "device_provisioned", 0) != 0;
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void startBroadcastObservers() {
        BroadcastQueue[] broadcastQueueArr;
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.start(this.mContext.getContentResolver());
        }
    }

    private void updateForceBackgroundCheck(boolean enabled) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mProcLock) {
                    boostPriorityForProcLockedSection();
                    if (this.mForceBackgroundCheck != enabled) {
                        this.mForceBackgroundCheck = enabled;
                        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                            Slog.i(TAG, "Force background check " + (enabled ? ServiceConfigAccessor.PROVIDER_MODE_ENABLED : ServiceConfigAccessor.PROVIDER_MODE_DISABLED));
                        }
                        if (this.mForceBackgroundCheck) {
                            this.mProcessList.doStopUidForIdleUidsLocked();
                        }
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void killAppAtUsersRequest(ProcessRecord app) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mAppErrors.killAppAtUserRequestLocked(app);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void skipCurrentReceiverLocked(ProcessRecord app) {
        BroadcastQueue[] broadcastQueueArr;
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.skipCurrentReceiverLocked(app);
        }
    }

    public void handleApplicationCrash(IBinder app, ApplicationErrorReport.ParcelableCrashInfo crashInfo) {
        String processName;
        ProcessRecord r = findAppProcess(app, "Crash");
        if (app == null) {
            processName = "unknownexp";
        } else {
            processName = r == null ? UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN : r.processName;
        }
        handleApplicationCrashInner("crash", r, processName, crashInfo);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* JADX WARN: Removed duplicated region for block: B:100:0x0197  */
    /* JADX WARN: Removed duplicated region for block: B:101:0x019e  */
    /* JADX WARN: Removed duplicated region for block: B:104:0x01b9  */
    /* JADX WARN: Removed duplicated region for block: B:105:0x01c6  */
    /* JADX WARN: Removed duplicated region for block: B:111:0x01eb  */
    /* JADX WARN: Removed duplicated region for block: B:114:0x01fd  */
    /* JADX WARN: Removed duplicated region for block: B:115:0x0200  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x009d  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x009f  */
    /* JADX WARN: Removed duplicated region for block: B:27:0x00bb  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x00bd  */
    /* JADX WARN: Removed duplicated region for block: B:33:0x00c8  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00cb  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x00cf  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00d4  */
    /* JADX WARN: Removed duplicated region for block: B:55:0x0103  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x010f  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0113  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x0116  */
    /* JADX WARN: Removed duplicated region for block: B:65:0x011c  */
    /* JADX WARN: Removed duplicated region for block: B:66:0x0123  */
    /* JADX WARN: Removed duplicated region for block: B:68:0x0127  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x012e  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x0132  */
    /* JADX WARN: Removed duplicated region for block: B:72:0x0139  */
    /* JADX WARN: Removed duplicated region for block: B:79:0x014a  */
    /* JADX WARN: Removed duplicated region for block: B:80:0x0151  */
    /* JADX WARN: Removed duplicated region for block: B:82:0x0155  */
    /* JADX WARN: Removed duplicated region for block: B:83:0x015c  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x0160  */
    /* JADX WARN: Removed duplicated region for block: B:86:0x0167  */
    /* JADX WARN: Removed duplicated region for block: B:88:0x016b  */
    /* JADX WARN: Removed duplicated region for block: B:89:0x0172  */
    /* JADX WARN: Removed duplicated region for block: B:91:0x0176  */
    /* JADX WARN: Removed duplicated region for block: B:92:0x017d  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x0181  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x0188  */
    /* JADX WARN: Removed duplicated region for block: B:97:0x018c  */
    /* JADX WARN: Removed duplicated region for block: B:98:0x0193  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void handleApplicationCrashInner(String eventType, ProcessRecord r, String processName, ApplicationErrorReport.CrashInfo crashInfo) {
        float loadingProgress;
        IncrementalMetrics incrementalMetrics;
        int processClassEnum;
        int i;
        int i2;
        boolean z;
        if (r != null && r.info != null && r.info.packageName != null) {
            IncrementalStatesInfo incrementalStatesInfo = this.mPackageManagerInt.getIncrementalStatesInfo(r.info.packageName, 1000, r.userId);
            loadingProgress = incrementalStatesInfo != null ? incrementalStatesInfo.getProgress() : 1.0f;
            String codePath = r.info.getCodePath();
            if (codePath != null && !codePath.isEmpty() && IncrementalManager.isIncrementalPath(codePath)) {
                Slog.e(TAG, "App crashed on incremental package " + r.info.packageName + " which is " + ((int) (100.0f * loadingProgress)) + "% loaded.");
                IBinder incrementalService = ServiceManager.getService("incremental");
                if (incrementalService != null) {
                    IncrementalManager incrementalManager = new IncrementalManager(IIncrementalService.Stub.asInterface(incrementalService));
                    IncrementalMetrics incrementalMetrics2 = incrementalManager.getMetrics(codePath);
                    loadingProgress = loadingProgress;
                    incrementalMetrics = incrementalMetrics2;
                    EventLogTags.writeAmCrash(Binder.getCallingPid(), UserHandle.getUserId(Binder.getCallingUid()), processName, r != null ? -1 : r.info.flags, crashInfo.exceptionClassName, crashInfo.exceptionMessage, crashInfo.throwFileName, crashInfo.throwLineNumber);
                    if (processName.equals("system_server")) {
                        processClassEnum = r != null ? r.getProcessClassEnum() : 0;
                    } else {
                        processClassEnum = 3;
                    }
                    int processClassEnum2 = processClassEnum;
                    int uid = r == null ? r.uid : -1;
                    int pid = r == null ? r.getPid() : -1;
                    String str = (r != null || r.info == null) ? "" : r.info.packageName;
                    if (r != null || r.info == null) {
                        i = 0;
                    } else if (r.info.isInstantApp()) {
                        i = 2;
                    } else {
                        i = 1;
                    }
                    if (r != null) {
                        i2 = 0;
                    } else if (r.isInterestingToUserLocked()) {
                        i2 = 2;
                    } else {
                        i2 = 1;
                    }
                    FrameworkStatsLog.write(78, uid, eventType, processName, pid, str, i, i2, processClassEnum2, incrementalMetrics == null, loadingProgress, incrementalMetrics == null ? incrementalMetrics.getMillisSinceOldestPendingRead() : -1L, incrementalMetrics == null ? incrementalMetrics.getStorageHealthStatusCode() : -1, incrementalMetrics == null ? incrementalMetrics.getDataLoaderStatusCode() : -1, incrementalMetrics == null && incrementalMetrics.getReadLogsEnabled(), incrementalMetrics == null ? incrementalMetrics.getMillisSinceLastDataLoaderBind() : -1L, incrementalMetrics == null ? incrementalMetrics.getDataLoaderBindDelayMillis() : -1L, incrementalMetrics == null ? incrementalMetrics.getTotalDelayedReads() : -1, incrementalMetrics == null ? incrementalMetrics.getTotalFailedReads() : -1, incrementalMetrics == null ? incrementalMetrics.getLastReadErrorUid() : -1, incrementalMetrics == null ? incrementalMetrics.getMillisSinceLastReadError() : -1L, incrementalMetrics == null ? incrementalMetrics.getLastReadErrorNumber() : 0, incrementalMetrics == null ? incrementalMetrics.getTotalDelayedReadsDurationMillis() : -1L);
                    if (!eventType.equals("native_crash")) {
                        CriticalEventLog.getInstance().logNativeCrash(processClassEnum2, processName, uid, pid);
                        z = true;
                    } else if (!eventType.equals("crash")) {
                        z = true;
                    } else {
                        z = true;
                        CriticalEventLog.getInstance().logJavaCrash(crashInfo.exceptionClassName, processClassEnum2, processName, uid, pid);
                    }
                    int relaunchReason = r != null ? r.getWindowProcessController().computeRelaunchReason() : 0;
                    String relaunchReasonString = ActivityTaskManagerService.relaunchReasonToString(relaunchReason);
                    if (crashInfo.crashTag != null) {
                        crashInfo.crashTag = relaunchReasonString;
                    } else {
                        crashInfo.crashTag += " " + relaunchReasonString;
                    }
                    Slog.d(TAG, "crashInfo.exceptionClassName = " + crashInfo.exceptionClassName + " , crashInfo.exceptionMessage = " + crashInfo.exceptionMessage + ", crashInfo.throwFileName = " + crashInfo.throwFileName + ",crashInfo.throwLineNumber = " + crashInfo.throwLineNumber);
                    if (crashInfo.exceptionMessage == null && crashInfo.exceptionMessage.contains("DeadSystemException")) {
                        return;
                    }
                    if (r == null && r.info != null && ITranActivityManagerService.Instance().isPermissionCrash(crashInfo, r.info.packageName, isAppForeground(r.uid))) {
                        if (!r.isPersistent()) {
                            r.setRemoved(z);
                            return;
                        }
                        return;
                    }
                    if (TranAmHooker.isGameBoosterEnable() && r != null && r.info != null && TranAmHooker.isTargetGameApp(r.info.packageName)) {
                        TranAmHooker.reportCrashForGame(r.info.packageName);
                    }
                    this.mAmsExt.onNotifyAppCrash(Binder.getCallingPid(), Binder.getCallingUid(), (r != null || r.info == null) ? "" : r.info.packageName);
                    addErrorToDropBox(eventType, r, processName, null, null, null, null, null, null, crashInfo, new Float(loadingProgress), incrementalMetrics, null);
                    this.mAppErrors.crashApplication(r, crashInfo);
                }
            }
        }
        loadingProgress = loadingProgress;
        incrementalMetrics = null;
        EventLogTags.writeAmCrash(Binder.getCallingPid(), UserHandle.getUserId(Binder.getCallingUid()), processName, r != null ? -1 : r.info.flags, crashInfo.exceptionClassName, crashInfo.exceptionMessage, crashInfo.throwFileName, crashInfo.throwLineNumber);
        if (processName.equals("system_server")) {
        }
        int processClassEnum22 = processClassEnum;
        int uid2 = r == null ? r.uid : -1;
        int pid2 = r == null ? r.getPid() : -1;
        if (r != null) {
        }
        if (r != null) {
        }
        i = 0;
        if (r != null) {
        }
        FrameworkStatsLog.write(78, uid2, eventType, processName, pid2, str, i, i2, processClassEnum22, incrementalMetrics == null, loadingProgress, incrementalMetrics == null ? incrementalMetrics.getMillisSinceOldestPendingRead() : -1L, incrementalMetrics == null ? incrementalMetrics.getStorageHealthStatusCode() : -1, incrementalMetrics == null ? incrementalMetrics.getDataLoaderStatusCode() : -1, incrementalMetrics == null && incrementalMetrics.getReadLogsEnabled(), incrementalMetrics == null ? incrementalMetrics.getMillisSinceLastDataLoaderBind() : -1L, incrementalMetrics == null ? incrementalMetrics.getDataLoaderBindDelayMillis() : -1L, incrementalMetrics == null ? incrementalMetrics.getTotalDelayedReads() : -1, incrementalMetrics == null ? incrementalMetrics.getTotalFailedReads() : -1, incrementalMetrics == null ? incrementalMetrics.getLastReadErrorUid() : -1, incrementalMetrics == null ? incrementalMetrics.getMillisSinceLastReadError() : -1L, incrementalMetrics == null ? incrementalMetrics.getLastReadErrorNumber() : 0, incrementalMetrics == null ? incrementalMetrics.getTotalDelayedReadsDurationMillis() : -1L);
        if (!eventType.equals("native_crash")) {
        }
        int relaunchReason2 = r != null ? r.getWindowProcessController().computeRelaunchReason() : 0;
        String relaunchReasonString2 = ActivityTaskManagerService.relaunchReasonToString(relaunchReason2);
        if (crashInfo.crashTag != null) {
        }
        Slog.d(TAG, "crashInfo.exceptionClassName = " + crashInfo.exceptionClassName + " , crashInfo.exceptionMessage = " + crashInfo.exceptionMessage + ", crashInfo.throwFileName = " + crashInfo.throwFileName + ",crashInfo.throwLineNumber = " + crashInfo.throwLineNumber);
        if (crashInfo.exceptionMessage == null) {
        }
        if (r == null) {
        }
        if (TranAmHooker.isGameBoosterEnable()) {
            TranAmHooker.reportCrashForGame(r.info.packageName);
        }
        this.mAmsExt.onNotifyAppCrash(Binder.getCallingPid(), Binder.getCallingUid(), (r != null || r.info == null) ? "" : r.info.packageName);
        addErrorToDropBox(eventType, r, processName, null, null, null, null, null, null, crashInfo, new Float(loadingProgress), incrementalMetrics, null);
        this.mAppErrors.crashApplication(r, crashInfo);
    }

    public void handleApplicationStrictModeViolation(IBinder app, int penaltyMask, StrictMode.ViolationInfo info) {
        ProcessRecord r = findAppProcess(app, "StrictMode");
        if ((67108864 & penaltyMask) != 0) {
            Integer stackFingerprint = Integer.valueOf(info.hashCode());
            boolean logIt = true;
            synchronized (this.mAlreadyLoggedViolatedStacks) {
                if (this.mAlreadyLoggedViolatedStacks.contains(stackFingerprint)) {
                    logIt = false;
                } else {
                    if (this.mAlreadyLoggedViolatedStacks.size() >= 5000) {
                        this.mAlreadyLoggedViolatedStacks.clear();
                    }
                    this.mAlreadyLoggedViolatedStacks.add(stackFingerprint);
                }
            }
            if (logIt) {
                logStrictModeViolationToDropBox(r, info);
            }
        }
        if ((536870912 & penaltyMask) != 0) {
            AppErrorResult result = new AppErrorResult();
            long origId = Binder.clearCallingIdentity();
            try {
                Message msg = Message.obtain();
                msg.what = 26;
                HashMap<String, Object> data = new HashMap<>();
                data.put("result", result);
                data.put("app", r);
                data.put("info", info);
                msg.obj = data;
                this.mUiHandler.sendMessage(msg);
                Binder.restoreCallingIdentity(origId);
                int res = result.get();
                Slog.w(TAG, "handleApplicationStrictModeViolation; res=" + res);
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(origId);
                throw th;
            }
        }
    }

    private void logStrictModeViolationToDropBox(ProcessRecord process, StrictMode.ViolationInfo info) {
        String[] strArr;
        if (info == null) {
            return;
        }
        boolean isSystemApp = process == null || (process.info.flags & 129) != 0;
        String processName = process == null ? UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN : process.processName;
        final DropBoxManager dbox = (DropBoxManager) this.mContext.getSystemService("dropbox");
        final String dropboxTag = processClass(process) + "_strictmode";
        if (dbox == null || !dbox.isTagEnabled(dropboxTag)) {
            return;
        }
        StringBuilder sb = new StringBuilder(1024);
        synchronized (sb) {
            appendDropBoxProcessHeaders(process, processName, sb);
            sb.append("Build: ").append(Build.FINGERPRINT).append("\n");
            sb.append("System-App: ").append(isSystemApp).append("\n");
            sb.append("Uptime-Millis: ").append(info.violationUptimeMillis).append("\n");
            if (info.violationNumThisLoop != 0) {
                sb.append("Loop-Violation-Number: ").append(info.violationNumThisLoop).append("\n");
            }
            if (info.numAnimationsRunning != 0) {
                sb.append("Animations-Running: ").append(info.numAnimationsRunning).append("\n");
            }
            if (info.broadcastIntentAction != null) {
                sb.append("Broadcast-Intent-Action: ").append(info.broadcastIntentAction).append("\n");
            }
            if (info.durationMillis != -1) {
                sb.append("Duration-Millis: ").append(info.durationMillis).append("\n");
            }
            if (info.numInstances != -1) {
                sb.append("Instance-Count: ").append(info.numInstances).append("\n");
            }
            if (info.tags != null) {
                for (String tag : info.tags) {
                    sb.append("Span-Tag: ").append(tag).append("\n");
                }
            }
            sb.append("\n");
            sb.append(info.getStackTrace());
            sb.append("\n");
            if (info.getViolationDetails() != null) {
                sb.append(info.getViolationDetails());
                sb.append("\n");
            }
        }
        final String res = sb.toString();
        IoThread.getHandler().post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda29
            @Override // java.lang.Runnable
            public final void run() {
                dbox.addText(dropboxTag, res);
            }
        });
    }

    public boolean handleApplicationWtf(final IBinder app, final String tag, boolean system, final ApplicationErrorReport.ParcelableCrashInfo crashInfo, int immediateCallerPid) {
        final int callingUid = Binder.getCallingUid();
        final int callingPid = Binder.getCallingPid();
        Preconditions.checkNotNull(crashInfo);
        if (!system && immediateCallerPid != Process.myPid()) {
            ProcessRecord r = handleApplicationWtfInner(callingUid, callingPid, app, tag, crashInfo);
            boolean isFatal = Build.IS_ENG || Settings.Global.getInt(this.mContext.getContentResolver(), "wtf_is_fatal", 0) != 0;
            boolean isSystem = r == null || r.isPersistent();
            if (!isFatal || isSystem) {
                return false;
            }
            this.mAppErrors.crashApplication(r, crashInfo);
            return true;
        }
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService.16
            @Override // java.lang.Runnable
            public void run() {
                ActivityManagerService.this.handleApplicationWtfInner(callingUid, callingPid, app, tag, crashInfo);
            }
        });
        return false;
    }

    ProcessRecord handleApplicationWtfInner(int callingUid, int callingPid, IBinder app, String tag, ApplicationErrorReport.CrashInfo crashInfo) {
        String processName;
        ProcessRecord r = findAppProcess(app, "WTF");
        String str = UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN;
        if (app == null) {
            processName = "system_server";
        } else {
            processName = r == null ? UiModeManagerService.Shell.NIGHT_MODE_STR_UNKNOWN : r.processName;
        }
        int userId = UserHandle.getUserId(callingUid);
        int i = r == null ? -1 : r.info.flags;
        if (crashInfo != null) {
            str = crashInfo.exceptionMessage;
        }
        EventLogTags.writeAmWtf(userId, callingPid, processName, i, tag, str);
        String str2 = processName;
        FrameworkStatsLog.write(80, callingUid, tag, str2, callingPid, r != null ? r.getProcessClassEnum() : 0);
        addErrorToDropBox("wtf", r, str2, null, null, null, tag, null, null, crashInfo, null, null, null);
        return r;
    }

    public void schedulePendingSystemServerWtfs(final LinkedList<Pair<String, ApplicationErrorReport.CrashInfo>> list) {
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda21
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.m1054xfdfbfe58(list);
            }
        });
    }

    /* JADX DEBUG: Method merged with bridge method */
    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: handlePendingSystemServerWtfs */
    public void m1054xfdfbfe58(LinkedList<Pair<String, ApplicationErrorReport.CrashInfo>> list) {
        ProcessRecord proc;
        synchronized (this.mPidsSelfLocked) {
            proc = this.mPidsSelfLocked.get(MY_PID);
        }
        Pair<String, ApplicationErrorReport.CrashInfo> p = list.poll();
        while (p != null) {
            addErrorToDropBox("wtf", proc, "system_server", null, null, null, (String) p.first, null, null, (ApplicationErrorReport.CrashInfo) p.second, null, null, null);
            Pair<String, ApplicationErrorReport.CrashInfo> p2 = list.poll();
            p = p2;
        }
    }

    private ProcessRecord findAppProcess(IBinder app, String reason) {
        ProcessRecord findAppProcessLOSP;
        if (app == null) {
            return null;
        }
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                findAppProcessLOSP = this.mProcessList.findAppProcessLOSP(app, reason);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return findAppProcessLOSP;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void appendDropBoxProcessHeaders(ProcessRecord process, String processName, final StringBuilder sb) {
        if (process == null) {
            sb.append("Process: ").append(processName).append("\n");
            return;
        }
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                sb.append("Process: ").append(processName).append("\n");
                sb.append("PID: ").append(process.getPid()).append("\n");
                sb.append("UID: ").append(process.uid).append("\n");
                if (process.mOptRecord != null) {
                    sb.append("Frozen: ").append(process.mOptRecord.isFrozen()).append("\n");
                }
                int flags = process.info.flags;
                final IPackageManager pm = AppGlobals.getPackageManager();
                sb.append("Flags: 0x").append(Integer.toHexString(flags)).append("\n");
                final int callingUserId = UserHandle.getCallingUserId();
                process.getPkgList().forEachPackage(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda35
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.lambda$appendDropBoxProcessHeaders$11(sb, pm, callingUserId, (String) obj);
                    }
                });
                if (process.info.isInstantApp()) {
                    sb.append("Instant-App: true\n");
                }
                if (Process.isSdkSandboxUid(process.uid)) {
                    sb.append("SdkSandbox: true\n");
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ void lambda$appendDropBoxProcessHeaders$11(StringBuilder sb, IPackageManager pm, int callingUserId, String pkg) {
        sb.append("Package: ").append(pkg);
        try {
            PackageInfo pi = pm.getPackageInfo(pkg, 0L, callingUserId);
            if (pi != null) {
                sb.append(" v").append(pi.getLongVersionCode());
                if (pi.versionName != null) {
                    sb.append(" (").append(pi.versionName).append(")");
                }
            }
        } catch (RemoteException e) {
            Slog.e(TAG, "Error getting package info: " + pkg, e);
        }
        sb.append("\n");
    }

    private static String processClass(ProcessRecord process) {
        if (process == null || process.getPid() == MY_PID) {
            return "system_server";
        }
        if ((process.info.flags & 1) != 0) {
            return "system_app";
        }
        if ("1".equals(SystemProperties.get("persist.user.root.support", "0")) && process != null && process.info != null && process.info.getCodePath() != null && process.info.getCodePath().contains("/product/operator/app")) {
            return "product_app";
        }
        return "data_app";
    }

    public void addErrorToDropBox(String eventType, final ProcessRecord process, String processName, String activityShortComponentName, String parentShortComponentName, ProcessRecord parentProcess, String subject, final String report, final File dataFile, final ApplicationErrorReport.CrashInfo crashInfo, Float loadingProgress, IncrementalMetrics incrementalMetrics, UUID errorId) {
        if ("1".equals(SystemProperties.get("persist.sys.exceptionreport.support", "0"))) {
            ITranActivityManagerService.Instance().init(this.mContext);
            ITranActivityManagerService.Instance().reportException(eventType, process, processName, subject, dataFile != null ? dataFile.getPath() : null, crashInfo);
        }
        if (process != null) {
            ITranActivityManagerService.Instance().addErrorInfoToTabe(this.mSystemReady, isAppForeground(process.uid), processName, eventType, crashInfo, processClass(process), process.mState.getSetAdj(), process.mState.getSetSchedGroup());
        }
        if (ServiceManager.getService("dropbox") == null) {
            return;
        }
        final DropBoxManager dbox = (DropBoxManager) this.mContext.getSystemService(DropBoxManager.class);
        final String dropboxTag = processClass(process) + "_" + eventType;
        if (dbox != null && dbox.isTagEnabled(dropboxTag)) {
            DropboxRateLimiter.RateLimitResult rateLimitResult = this.mDropboxRateLimiter.shouldRateLimit(eventType, processName);
            if (rateLimitResult.shouldRateLimit()) {
                return;
            }
            final StringBuilder sb = new StringBuilder(1024);
            appendDropBoxProcessHeaders(process, processName, sb);
            if (process != null) {
                sb.append("Foreground: ").append(process.isInterestingToUserLocked() ? "Yes" : "No").append("\n");
                if (process.getStartTime() > 0) {
                    long runtimeMillis = SystemClock.elapsedRealtime() - process.getStartTime();
                    sb.append("Process-Runtime: ").append(runtimeMillis).append("\n");
                }
            }
            if (activityShortComponentName != null) {
                sb.append("Activity: ").append(activityShortComponentName).append("\n");
            }
            if (parentShortComponentName != null) {
                if (parentProcess != null && parentProcess.getPid() != process.getPid()) {
                    sb.append("Parent-Process: ").append(parentProcess.processName).append("\n");
                }
                if (!parentShortComponentName.equals(activityShortComponentName)) {
                    sb.append("Parent-Activity: ").append(parentShortComponentName).append("\n");
                }
            }
            if (subject != null) {
                sb.append("Subject: ").append(subject).append("\n");
            }
            if (errorId != null) {
                sb.append("ErrorId: ").append(errorId.toString()).append("\n");
            }
            sb.append("Build: ").append(Build.FINGERPRINT).append("\n");
            if (Debug.isDebuggerConnected()) {
                sb.append("Debugger: Connected\n");
            }
            if (crashInfo != null && crashInfo.crashTag != null && !crashInfo.crashTag.isEmpty()) {
                sb.append("Crash-Tag: ").append(crashInfo.crashTag).append("\n");
            }
            if (loadingProgress != null) {
                sb.append("Loading-Progress: ").append(loadingProgress.floatValue()).append("\n");
            }
            if (incrementalMetrics != null) {
                sb.append("Incremental: Yes").append("\n");
                long millisSinceOldestPendingRead = incrementalMetrics.getMillisSinceOldestPendingRead();
                if (millisSinceOldestPendingRead > 0) {
                    sb.append("Millis-Since-Oldest-Pending-Read: ").append(millisSinceOldestPendingRead).append("\n");
                }
            }
            sb.append(rateLimitResult.createHeader());
            sb.append("\n");
            Thread worker = new Thread("Error dump: " + dropboxTag) { // from class: com.android.server.am.ActivityManagerService.17
                @Override // java.lang.Thread, java.lang.Runnable
                public void run() {
                    String str = report;
                    if (str != null) {
                        sb.append(str);
                    }
                    String logcatSetting = "logcat_for_" + dropboxTag;
                    String maxBytesSetting = "max_error_bytes_for_" + dropboxTag;
                    int lines = Settings.Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), logcatSetting, 0);
                    int dropboxMaxSize = Settings.Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), maxBytesSetting, ActivityManagerService.DROPBOX_DEFAULT_MAX_SIZE);
                    int maxDataFileSize = (dropboxMaxSize - sb.length()) - (lines * 100);
                    File file = dataFile;
                    if (file != null && maxDataFileSize > 0) {
                        try {
                            sb.append(FileUtils.readTextFile(file, maxDataFileSize, "\n\n[[TRUNCATED]]"));
                        } catch (IOException e) {
                            Slog.e(ActivityManagerService.TAG, "Error reading " + dataFile, e);
                        }
                    }
                    ApplicationErrorReport.CrashInfo crashInfo2 = crashInfo;
                    if (crashInfo2 != null && crashInfo2.stackTrace != null) {
                        sb.append(crashInfo.stackTrace);
                    }
                    if (lines > 0) {
                        sb.append("\n");
                        InputStreamReader input = null;
                        try {
                            try {
                                try {
                                    Process logcat = new ProcessBuilder("/system/bin/timeout", "-s", "SEGV", "10s", "/system/bin/logcat", "-v", "threadtime", "-b", "events", "-b", HostingRecord.HOSTING_TYPE_SYSTEM, "-b", "main", "-b", "crash", "-t", String.valueOf(lines)).redirectErrorStream(true).start();
                                    try {
                                        logcat.getOutputStream().close();
                                    } catch (IOException e2) {
                                    }
                                    try {
                                        logcat.getErrorStream().close();
                                    } catch (IOException e3) {
                                    }
                                    input = new InputStreamReader(logcat.getInputStream());
                                    char[] buf = new char[8192];
                                    while (true) {
                                        int num = input.read(buf);
                                        if (num <= 0) {
                                            break;
                                        }
                                        sb.append(buf, 0, num);
                                    }
                                    input.close();
                                } catch (IOException e4) {
                                    Slog.e(ActivityManagerService.TAG, "Error running logcat", e4);
                                    if (input != null) {
                                        input.close();
                                    }
                                }
                            } catch (Throwable th) {
                                if (input != null) {
                                    try {
                                        input.close();
                                    } catch (IOException e5) {
                                    }
                                }
                                throw th;
                            }
                        } catch (IOException e6) {
                        }
                    }
                    dbox.addText(dropboxTag, sb.toString());
                    AmsExt amsExt = ActivityManagerService.this.mAmsExt;
                    String str2 = dropboxTag;
                    String sb2 = sb.toString();
                    ProcessRecord processRecord = process;
                    amsExt.onAddErrorToDropBox(str2, sb2, processRecord == null ? ActivityManagerService.MY_PID : processRecord.mPid);
                }
            };
            if (process == null) {
                int oldMask = StrictMode.allowThreadDiskWritesMask();
                try {
                    worker.run();
                    return;
                } finally {
                    StrictMode.setThreadPolicyMask(oldMask);
                }
            }
            worker.start();
        }
    }

    public List<ActivityManager.ProcessErrorStateInfo> getProcessesInErrorState() {
        enforceNotIsolatedCaller("getProcessesInErrorState");
        final List<ActivityManager.ProcessErrorStateInfo>[] errList = new List[1];
        Slog.d(TAG, "getProcessesInErrorState callingUid=" + Binder.getCallingUid() + ", CallingPid=" + Binder.getCallingPid());
        final int callingUid = Binder.getCallingUid();
        final boolean allUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        final int userId = UserHandle.getUserId(callingUid);
        final boolean hasDumpPermission = ActivityManager.checkUidPermission("android.permission.DUMP", callingUid) == 0;
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                this.mProcessList.forEachLruProcessesLOSP(false, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda19
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.lambda$getProcessesInErrorState$12(allUsers, userId, hasDumpPermission, callingUid, errList, (ProcessRecord) obj);
                    }
                });
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return errList[0];
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ void lambda$getProcessesInErrorState$12(boolean allUsers, int userId, boolean hasDumpPermission, int callingUid, List[] errList, ProcessRecord app) {
        if (!allUsers && app.userId != userId) {
            return;
        }
        if (!hasDumpPermission && app.info.uid != callingUid) {
            return;
        }
        ProcessErrorStateRecord errState = app.mErrorState;
        boolean crashing = errState.isCrashing();
        boolean notResponding = errState.isNotResponding();
        if (app.getThread() != null) {
            if (crashing || notResponding) {
                ActivityManager.ProcessErrorStateInfo report = null;
                if (crashing) {
                    report = errState.getCrashingReport();
                } else if (notResponding) {
                    report = errState.getNotRespondingReport();
                }
                if (report != null) {
                    if (errList[0] == null) {
                        errList[0] = new ArrayList(1);
                    }
                    errList[0].add(report);
                    return;
                }
                Slog.w(TAG, "Missing app error report, app = " + app.processName + " crashing = " + crashing + " notResponding = " + notResponding);
            }
        }
    }

    public List<ActivityManager.RunningAppProcessInfo> getRunningAppProcesses() {
        List<ActivityManager.RunningAppProcessInfo> runningAppProcessesLOSP;
        enforceNotIsolatedCaller("getRunningAppProcesses");
        int callingUid = Binder.getCallingUid();
        int clientTargetSdk = this.mPackageManagerInt.getUidTargetSdkVersion(callingUid);
        boolean allUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        int userId = UserHandle.getUserId(callingUid);
        boolean allUids = this.mAtmInternal.isGetTasksAllowed("getRunningAppProcesses", Binder.getCallingPid(), callingUid);
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                runningAppProcessesLOSP = this.mProcessList.getRunningAppProcessesLOSP(allUsers, userId, allUids, callingUid, clientTargetSdk);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return runningAppProcessesLOSP;
    }

    public List<ApplicationInfo> getRunningExternalApplications() {
        String[] strArr;
        enforceNotIsolatedCaller("getRunningExternalApplications");
        List<ActivityManager.RunningAppProcessInfo> runningApps = getRunningAppProcesses();
        List<ApplicationInfo> retList = new ArrayList<>();
        if (runningApps != null && runningApps.size() > 0) {
            Set<String> extList = new HashSet<>();
            for (ActivityManager.RunningAppProcessInfo app : runningApps) {
                if (app.pkgList != null) {
                    for (String pkg : app.pkgList) {
                        extList.add(pkg);
                    }
                }
            }
            IPackageManager pm = AppGlobals.getPackageManager();
            for (String pkg2 : extList) {
                try {
                    ApplicationInfo info = pm.getApplicationInfo(pkg2, 0L, UserHandle.getCallingUserId());
                    if ((info.flags & 262144) != 0) {
                        retList.add(info);
                    }
                } catch (RemoteException e) {
                }
            }
        }
        return retList;
    }

    public ParceledListSlice<ApplicationExitInfo> getHistoricalProcessExitReasons(String packageName, int pid, int maxNum, int userId) {
        enforceNotIsolatedCaller("getHistoricalProcessExitReasons");
        if (userId == -1 || userId == -2) {
            throw new IllegalArgumentException("Unsupported userId");
        }
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        UserHandle.getCallingUserId();
        this.mUserController.handleIncomingUser(callingPid, callingUid, userId, true, 0, "getHistoricalProcessExitReasons", null);
        NativeTombstoneManager tombstoneService = (NativeTombstoneManager) LocalServices.getService(NativeTombstoneManager.class);
        ArrayList<ApplicationExitInfo> results = new ArrayList<>();
        if (!TextUtils.isEmpty(packageName)) {
            int uid = enforceDumpPermissionForPackage(packageName, userId, callingUid, "getHistoricalProcessExitReasons");
            if (uid != -1) {
                this.mProcessList.mAppExitInfoTracker.getExitInfo(packageName, uid, pid, maxNum, results);
                tombstoneService.collectTombstones(results, uid, pid, maxNum);
            }
        } else {
            this.mProcessList.mAppExitInfoTracker.getExitInfo(packageName, callingUid, pid, maxNum, results);
            tombstoneService.collectTombstones(results, callingUid, pid, maxNum);
        }
        return new ParceledListSlice<>(results);
    }

    public void setProcessStateSummary(byte[] state) {
        if (state != null && state.length > 128) {
            throw new IllegalArgumentException("Data size is too large");
        }
        this.mProcessList.mAppExitInfoTracker.setProcessStateSummary(Binder.getCallingUid(), Binder.getCallingPid(), state);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public int enforceDumpPermissionForPackage(String packageName, int userId, int callingUid, String function) {
        long identity = Binder.clearCallingIdentity();
        try {
            int uid = this.mPackageManagerInt.getPackageUid(packageName, 786432L, userId);
            Binder.restoreCallingIdentity(identity);
            if (UserHandle.getAppId(uid) != UserHandle.getAppId(callingUid)) {
                enforceCallingPermission("android.permission.DUMP", function);
            }
            return uid;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(identity);
            throw th;
        }
    }

    public void getMyMemoryState(ActivityManager.RunningAppProcessInfo outState) {
        ProcessRecord proc;
        if (outState == null) {
            throw new IllegalArgumentException("outState is null");
        }
        enforceNotIsolatedCaller("getMyMemoryState");
        int callingUid = Binder.getCallingUid();
        int clientTargetSdk = this.mPackageManagerInt.getUidTargetSdkVersion(callingUid);
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                synchronized (this.mPidsSelfLocked) {
                    proc = this.mPidsSelfLocked.get(Binder.getCallingPid());
                }
                if (proc != null) {
                    this.mProcessList.fillInProcMemInfoLOSP(proc, outState, clientTargetSdk);
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public int getMemoryTrimLevel() {
        int lastMemoryLevelLocked;
        enforceNotIsolatedCaller("getMyMemoryState");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                lastMemoryLevelLocked = this.mAppProfiler.getLastMemoryLevelLocked();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return lastMemoryLevelLocked;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void setMemFactorOverride(int level) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (level == this.mAppProfiler.getLastMemoryLevelLocked()) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                this.mAppProfiler.setMemFactorOverrideLocked(level);
                updateOomAdjLocked("updateOomAdj_meh");
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void setServiceRestartBackoffEnabled(String packageName, boolean enable, String reason) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mServices.setServiceRestartBackoffEnabledLocked(packageName, enable, reason);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean isServiceRestartBackoffEnabled(String packageName) {
        boolean isServiceRestartBackoffEnabledLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                isServiceRestartBackoffEnabledLocked = this.mServices.isServiceRestartBackoffEnabledLocked(packageName);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return isServiceRestartBackoffEnabledLocked;
    }

    /* JADX DEBUG: Multi-variable search result rejected for r8v0, resolved type: com.android.server.am.ActivityManagerService */
    /* JADX WARN: Multi-variable type inference failed */
    public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err, String[] args, ShellCallback callback, ResultReceiver resultReceiver) {
        new ActivityManagerShellCommand(this, false).exec(this, in, out, err, args, callback, resultReceiver);
    }

    protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {
        PriorityDump.dump(this.mPriorityDumper, fd, pw, args);
    }

    private void dumpEverything(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage, boolean dumpClient, boolean dumpNormalPriority, int dumpAppId, boolean dumpProxies) {
        String str;
        PrintWriter printWriter;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mConstants.dump(pw);
                synchronized (this.mProcLock) {
                    try {
                        boostPriorityForProcLockedSection();
                        this.mOomAdjuster.dumpCachedAppOptimizerSettings(pw);
                    }
                }
                resetPriorityAfterProcLockedSection();
                this.mOomAdjuster.dumpCacheOomRankerSettings(pw);
                pw.println();
                if (dumpAll) {
                    pw.println("-------------------------------------------------------------------------------");
                }
                dumpAllowedAssociationsLocked(fd, pw, args, opti, dumpAll, dumpPackage);
                pw.println();
                if (dumpAll) {
                    pw.println("-------------------------------------------------------------------------------");
                }
                this.mPendingIntentController.dumpPendingIntents(pw, dumpAll, dumpPackage);
                pw.println();
                if (dumpAll) {
                    pw.println("-------------------------------------------------------------------------------");
                }
                dumpBroadcastsLocked(fd, pw, args, opti, dumpAll, dumpPackage);
                pw.println();
                if (dumpAll) {
                    pw.println("-------------------------------------------------------------------------------");
                }
                if (dumpAll || dumpPackage != null) {
                    dumpBroadcastStatsLocked(fd, pw, args, opti, dumpAll, dumpPackage);
                    pw.println();
                    if (dumpAll) {
                        pw.println("-------------------------------------------------------------------------------");
                    }
                }
                this.mCpHelper.dumpProvidersLocked(fd, pw, args, opti, dumpAll, dumpPackage);
                pw.println();
                if (dumpAll) {
                    pw.println("-------------------------------------------------------------------------------");
                }
                dumpPermissions(fd, pw, args, opti, dumpAll, dumpPackage);
                pw.println();
                ActiveServices.ServiceDumper sdumper = this.mServices.newServiceDumperLocked(fd, pw, args, opti, dumpAll, dumpPackage);
                if (!dumpClient) {
                    if (dumpAll) {
                        pw.println("-------------------------------------------------------------------------------");
                    }
                    sdumper.dumpLocked();
                }
                resetPriorityAfterLockedSection();
                if (dumpClient) {
                    if (dumpAll) {
                        pw.println("-------------------------------------------------------------------------------");
                    }
                    sdumper.dumpWithClient();
                }
                if (dumpPackage == null && dumpProxies) {
                    pw.println();
                    if (dumpAll) {
                        pw.println("-------------------------------------------------------------------------------");
                    }
                    if ("1".equals(SystemProperties.get("ro.adb.secure", "0"))) {
                        dumpBinderProxies(pw, BINDER_PROXY_HIGH_WATERMARK);
                    }
                }
                synchronized (this) {
                    try {
                        try {
                            boostPriorityForLockedSection();
                            pw.println();
                            if (dumpAll) {
                                pw.println("-------------------------------------------------------------------------------");
                            }
                        } catch (Throwable th) {
                            th = th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                    }
                    try {
                        this.mAtmInternal.dump(ActivityTaskManagerService.DUMP_RECENTS_CMD, fd, pw, args, opti, dumpAll, dumpClient, dumpPackage);
                        pw.println();
                        if (dumpAll) {
                            pw.println("-------------------------------------------------------------------------------");
                        }
                        this.mAtmInternal.dump(ActivityTaskManagerService.DUMP_LASTANR_CMD, fd, pw, args, opti, dumpAll, dumpClient, dumpPackage);
                        pw.println();
                        if (dumpAll) {
                            pw.println("-------------------------------------------------------------------------------");
                        }
                        this.mAtmInternal.dump(ActivityTaskManagerService.DUMP_STARTER_CMD, fd, pw, args, opti, dumpAll, dumpClient, dumpPackage);
                        if (dumpPackage == null) {
                            pw.println();
                            if (dumpAll) {
                                pw.println("-------------------------------------------------------------------------------");
                            }
                            this.mAtmInternal.dump(ActivityTaskManagerService.DUMP_CONTAINERS_CMD, fd, pw, args, opti, dumpAll, dumpClient, dumpPackage);
                        }
                        if (!dumpNormalPriority) {
                            pw.println();
                            if (dumpAll) {
                                pw.println("-------------------------------------------------------------------------------");
                            }
                            this.mAtmInternal.dump(ActivityTaskManagerService.DUMP_ACTIVITIES_CMD, fd, pw, args, opti, dumpAll, dumpClient, dumpPackage);
                        }
                        if (this.mAssociations.size() <= 0) {
                            str = dumpPackage;
                            printWriter = pw;
                        } else {
                            pw.println();
                            if (dumpAll) {
                                pw.println("-------------------------------------------------------------------------------");
                            }
                            str = dumpPackage;
                            printWriter = pw;
                            dumpAssociationsLocked(fd, pw, args, opti, dumpAll, dumpClient, dumpPackage);
                        }
                        pw.println();
                        if (dumpAll) {
                            printWriter.println("-------------------------------------------------------------------------------");
                            this.mProcessList.mAppExitInfoTracker.dumpHistoryProcessExitInfo(printWriter, str);
                        }
                        if (str == null) {
                            pw.println();
                            if (dumpAll) {
                                printWriter.println("-------------------------------------------------------------------------------");
                            }
                            this.mOomAdjProfiler.dump(printWriter);
                            pw.println();
                            if (dumpAll) {
                                printWriter.println("-------------------------------------------------------------------------------");
                            }
                            dumpLmkLocked(printWriter);
                        }
                        pw.println();
                        if (dumpAll) {
                            printWriter.println("-------------------------------------------------------------------------------");
                        }
                        synchronized (this.mProcLock) {
                            boostPriorityForProcLockedSection();
                            this.mProcessList.dumpProcessesLSP(fd, pw, args, opti, dumpAll, dumpPackage, dumpAppId);
                        }
                        resetPriorityAfterProcLockedSection();
                        pw.println();
                        if (dumpAll) {
                            printWriter.println("-------------------------------------------------------------------------------");
                        }
                        dumpUsers(printWriter);
                        pw.println();
                        if (dumpAll) {
                            printWriter.println("-------------------------------------------------------------------------------");
                        }
                        this.mComponentAliasResolver.dump(printWriter);
                        resetPriorityAfterLockedSection();
                    } catch (Throwable th3) {
                        th = th3;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            } catch (Throwable th4) {
                resetPriorityAfterLockedSection();
                throw th4;
            }
        }
    }

    private void dumpAppRestrictionController(PrintWriter pw) {
        pw.println("-------------------------------------------------------------------------------");
        this.mAppRestrictionController.dump(pw, "");
    }

    void dumpAppRestrictionController(ProtoOutputStream proto, int uid) {
        this.mAppRestrictionController.dumpAsProto(proto, uid);
    }

    /* JADX DEBUG: Another duplicated slice has different insns count: {[]}, finally: {[INVOKE, INVOKE] complete} */
    /* JADX DEBUG: Another duplicated slice has different insns count: {[]}, finally: {[INVOKE] complete} */
    /* JADX DEBUG: Incorrect finally slice size: {[INVOKE, INVOKE, INVOKE] complete}, expected: {[INVOKE, INVOKE] complete} */
    /* JADX DEBUG: Multi-variable search result rejected for r30v0, resolved type: com.android.server.am.ActivityManagerService */
    /* JADX INFO: Access modifiers changed from: private */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:533:0x0abd  */
    /* JADX WARN: Removed duplicated region for block: B:535:0x0ac1  */
    @NeverCompile
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void doDump(FileDescriptor fd, PrintWriter pw, String[] args, boolean useProto) {
        int dumpAppId;
        String dumpPackage;
        String[] args2;
        int opti;
        String cmd;
        String dumpPackage2;
        int opti2;
        int opti3;
        String dumpPackage3;
        int opti4;
        int opti5;
        String dumpPackage4;
        boolean z;
        String dumpPackage5;
        int opti6;
        int opti7;
        int opti8;
        String dumpPackage6;
        int opti9;
        String dumpPackage7;
        int opti10;
        int opti11;
        int opti12;
        int opti13;
        int opti14;
        ActiveServices.ServiceDumper dumper;
        int opti15;
        String[] newArgs;
        String name;
        String name2;
        String[] newArgs2;
        int opti16;
        int opti17;
        String dumpPackage8;
        String cmd2;
        int opti18;
        String dumpPackage9;
        int opti19;
        String dumpPackage10;
        String name3;
        String[] newArgs3;
        String opt;
        String[] args3 = args;
        if (DumpUtils.checkDumpAndUsageStatsPermission(this.mContext, TAG, pw)) {
            boolean dumpAll = false;
            boolean dumpClient = false;
            boolean dumpCheckin = false;
            boolean dumpCheckinFormat = false;
            boolean dumpNormalPriority = false;
            boolean dumpVisibleStacksOnly = false;
            boolean dumpFocusedStackOnly = false;
            String dumpPackage11 = null;
            int opti20 = 0;
            int dumpUserId = -1;
            while (opti20 < args3.length && (opt = args3[opti20]) != null && opt.length() > 0 && opt.charAt(0) == '-') {
                opti20++;
                if ("-a".equals(opt)) {
                    dumpAll = true;
                } else if ("-c".equals(opt)) {
                    dumpClient = true;
                } else if ("-v".equals(opt)) {
                    dumpVisibleStacksOnly = true;
                } else if ("-f".equals(opt)) {
                    dumpFocusedStackOnly = true;
                } else if ("-p".equals(opt)) {
                    if (opti20 < args3.length) {
                        String dumpPackage12 = args3[opti20];
                        opti20++;
                        dumpPackage11 = dumpPackage12;
                        dumpClient = true;
                    } else {
                        pw.println("Error: -p option requires package argument");
                        return;
                    }
                } else if ("--checkin".equals(opt)) {
                    dumpCheckinFormat = true;
                    dumpCheckin = true;
                } else if ("-C".equals(opt)) {
                    dumpCheckinFormat = true;
                } else if ("--normal-priority".equals(opt)) {
                    dumpNormalPriority = true;
                } else if ("--user".equals(opt)) {
                    if (opti20 < args3.length) {
                        int dumpUserId2 = UserHandle.parseUserArg(args3[opti20]);
                        if (dumpUserId2 == -2) {
                            dumpUserId2 = this.mUserController.getCurrentUserId();
                        }
                        opti20++;
                        dumpUserId = dumpUserId2;
                    } else {
                        pw.println("Error: --user option requires user id argument");
                        return;
                    }
                } else if ("-h".equals(opt)) {
                    ActivityManagerShellCommand.dumpHelp(pw, true);
                    return;
                } else {
                    pw.println("Unknown argument: " + opt + "; use -h for help");
                }
            }
            long origId = Binder.clearCallingIdentity();
            if (useProto) {
                ProtoOutputStream proto = new ProtoOutputStream(fd);
                String cmd3 = opti20 < args3.length ? args3[opti20] : "";
                int opti21 = opti20 + 1;
                if (ActivityTaskManagerService.DUMP_ACTIVITIES_CMD.equals(cmd3) || ActivityTaskManagerService.DUMP_ACTIVITIES_SHORT_CMD.equals(cmd3)) {
                    this.mAtmInternal.writeActivitiesToProto(proto);
                } else if ("broadcasts".equals(cmd3) || "b".equals(cmd3)) {
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            writeBroadcastsToProtoLocked(proto);
                        } finally {
                            resetPriorityAfterLockedSection();
                        }
                    }
                    resetPriorityAfterLockedSection();
                } else if ("provider".equals(cmd3)) {
                    if (opti21 >= args3.length) {
                        name3 = null;
                        newArgs3 = EMPTY_STRING_ARRAY;
                    } else {
                        name3 = args3[opti21];
                        int opti22 = opti21 + 1;
                        String[] newArgs4 = new String[args3.length - opti22];
                        if (args3.length > 2) {
                            System.arraycopy(args3, opti22, newArgs4, 0, args3.length - opti22);
                        }
                        newArgs3 = newArgs4;
                    }
                    if (!this.mCpHelper.dumpProviderProto(fd, pw, name3, newArgs3)) {
                        pw.println("No providers match: " + name3);
                        pw.println("Use -h for help.");
                    }
                } else if (HostingRecord.HOSTING_TYPE_SERVICE.equals(cmd3)) {
                    this.mServices.dumpDebug(proto, 1146756268033L);
                } else if ("processes".equals(cmd3) || "p".equals(cmd3)) {
                    if (opti21 >= args3.length) {
                        opti19 = opti21;
                        dumpPackage10 = dumpPackage11;
                    } else {
                        String dumpPackage13 = args3[opti21];
                        opti19 = opti21 + 1;
                        dumpPackage10 = dumpPackage13;
                    }
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            synchronized (this.mProcLock) {
                                boostPriorityForProcLockedSection();
                                this.mProcessList.writeProcessesToProtoLSP(proto, dumpPackage10);
                            }
                            resetPriorityAfterProcLockedSection();
                        } finally {
                        }
                    }
                    resetPriorityAfterLockedSection();
                } else if ("app-restrictions".equals(cmd3)) {
                    int uid = -1;
                    boolean error = false;
                    int i = 0;
                    while (true) {
                        if (i >= args3.length) {
                            break;
                        } else if (!"--uid".equals(args3[i])) {
                            i++;
                        } else if (i + 1 < args3.length) {
                            try {
                                uid = Integer.parseInt(args3[i + 1]);
                            } catch (NumberFormatException e) {
                                error = true;
                            }
                        } else {
                            error = true;
                        }
                    }
                    if (error) {
                        pw.println("Invalid --uid argument");
                        pw.println("Use -h for help.");
                    } else {
                        dumpAppRestrictionController(proto, uid);
                    }
                } else {
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            long activityToken = proto.start(1146756268033L);
                            this.mAtmInternal.writeActivitiesToProto(proto);
                            proto.end(activityToken);
                            long broadcastToken = proto.start(1146756268034L);
                            writeBroadcastsToProtoLocked(proto);
                            proto.end(broadcastToken);
                            long serviceToken = proto.start(1146756268035L);
                            this.mServices.dumpDebug(proto, 1146756268033L);
                            proto.end(serviceToken);
                            long processToken = proto.start(1146756268036L);
                            synchronized (this.mProcLock) {
                                boostPriorityForProcLockedSection();
                                this.mProcessList.writeProcessesToProtoLSP(proto, dumpPackage11);
                            }
                            resetPriorityAfterProcLockedSection();
                            proto.end(processToken);
                        } finally {
                        }
                    }
                    resetPriorityAfterLockedSection();
                }
                proto.flush();
                Binder.restoreCallingIdentity(origId);
                return;
            }
            int dumpAppId2 = getAppId(dumpPackage11);
            boolean more = false;
            if (dumpAppId2 != -1) {
                pw.println("[dump_debug] dumpAppId:" + dumpAppId2 + ", dumpPackage:" + dumpPackage11);
            }
            if (opti20 >= args3.length) {
                dumpAppId = dumpAppId2;
                dumpPackage = dumpPackage11;
                args2 = args3;
                opti = opti20;
            } else {
                String cmd4 = args3[opti20];
                int opti23 = opti20 + 1;
                if (ActivityTaskManagerService.DUMP_ACTIVITIES_CMD.equals(cmd4) || ActivityTaskManagerService.DUMP_ACTIVITIES_SHORT_CMD.equals(cmd4)) {
                    cmd = cmd4;
                    dumpAppId = dumpAppId2;
                    dumpPackage2 = dumpPackage11;
                    opti2 = opti23;
                } else if (ActivityTaskManagerService.DUMP_LASTANR_CMD.equals(cmd4) || ActivityTaskManagerService.DUMP_LASTANR_TRACES_CMD.equals(cmd4)) {
                    cmd = cmd4;
                    dumpAppId = dumpAppId2;
                    dumpPackage2 = dumpPackage11;
                    opti2 = opti23;
                } else if (ActivityTaskManagerService.DUMP_STARTER_CMD.equals(cmd4) || ActivityTaskManagerService.DUMP_CONTAINERS_CMD.equals(cmd4)) {
                    cmd = cmd4;
                    dumpAppId = dumpAppId2;
                    dumpPackage2 = dumpPackage11;
                    opti2 = opti23;
                } else if (ActivityTaskManagerService.DUMP_RECENTS_CMD.equals(cmd4) || ActivityTaskManagerService.DUMP_RECENTS_SHORT_CMD.equals(cmd4)) {
                    cmd = cmd4;
                    dumpAppId = dumpAppId2;
                    dumpPackage2 = dumpPackage11;
                    opti2 = opti23;
                } else if (ActivityTaskManagerService.DUMP_TOP_RESUMED_ACTIVITY.equals(cmd4)) {
                    cmd = cmd4;
                    dumpAppId = dumpAppId2;
                    dumpPackage2 = dumpPackage11;
                    opti2 = opti23;
                } else if ("binder-proxies".equals(cmd4)) {
                    if (opti23 >= args3.length) {
                        dumpBinderProxies(pw, 0);
                        dumpAppId = dumpAppId2;
                        dumpPackage2 = dumpPackage11;
                        opti2 = opti23;
                        opti3 = opti2;
                        dumpPackage11 = dumpPackage2;
                        if (!more) {
                            dumpPackage = dumpPackage11;
                            args2 = args3;
                            opti = opti3;
                        } else {
                            Binder.restoreCallingIdentity(origId);
                            return;
                        }
                    } else {
                        String uid2 = args3[opti23];
                        System.gc();
                        System.runFinalization();
                        System.gc();
                        pw.println(BinderInternal.nGetBinderProxyCount(Integer.parseInt(uid2)));
                        opti3 = opti23 + 1;
                        dumpAppId = dumpAppId2;
                        if (!more) {
                        }
                    }
                } else {
                    if ("allowed-associations".equals(cmd4)) {
                        if (opti23 >= args3.length) {
                            opti18 = opti23;
                            dumpPackage9 = dumpPackage11;
                        } else {
                            String dumpPackage14 = args3[opti23];
                            opti18 = opti23 + 1;
                            dumpPackage9 = dumpPackage14;
                        }
                        synchronized (this) {
                            try {
                                try {
                                    boostPriorityForLockedSection();
                                    dumpAppId = dumpAppId2;
                                    dumpAllowedAssociationsLocked(fd, pw, args, opti18, true, dumpPackage9);
                                    resetPriorityAfterLockedSection();
                                    opti3 = opti18;
                                    dumpPackage11 = dumpPackage9;
                                } catch (Throwable th) {
                                    th = th;
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            } catch (Throwable th2) {
                                th = th2;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                    } else {
                        dumpAppId = dumpAppId2;
                        if ("broadcasts".equals(cmd4)) {
                            dumpPackage3 = dumpPackage11;
                            opti4 = opti23;
                        } else if ("b".equals(cmd4)) {
                            dumpPackage3 = dumpPackage11;
                            opti4 = opti23;
                        } else if ("broadcast-stats".equals(cmd4)) {
                            if (opti23 >= args3.length) {
                                opti17 = opti23;
                                dumpPackage8 = dumpPackage11;
                            } else {
                                String dumpPackage15 = args3[opti23];
                                opti17 = opti23 + 1;
                                dumpPackage8 = dumpPackage15;
                            }
                            synchronized (this) {
                                try {
                                    try {
                                        boostPriorityForLockedSection();
                                        if (dumpCheckinFormat) {
                                            cmd2 = cmd4;
                                            dumpBroadcastStatsCheckinLocked(fd, pw, args, opti17, dumpCheckin, dumpPackage8);
                                        } else {
                                            cmd2 = cmd4;
                                            dumpBroadcastStatsLocked(fd, pw, args, opti17, true, dumpPackage8);
                                        }
                                        resetPriorityAfterLockedSection();
                                        opti3 = opti17;
                                        dumpPackage11 = dumpPackage8;
                                    } catch (Throwable th3) {
                                        th = th3;
                                        resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                } catch (Throwable th4) {
                                    th = th4;
                                    resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                        } else {
                            if ("intents".equals(cmd4)) {
                                z = true;
                                dumpPackage5 = dumpPackage11;
                                opti6 = opti23;
                            } else if ("i".equals(cmd4)) {
                                z = true;
                                dumpPackage5 = dumpPackage11;
                                opti6 = opti23;
                            } else {
                                if ("processes".equals(cmd4)) {
                                    opti8 = opti23;
                                    dumpPackage6 = dumpPackage11;
                                } else if ("p".equals(cmd4)) {
                                    opti8 = opti23;
                                    dumpPackage6 = dumpPackage11;
                                } else {
                                    if ("oom".equals(cmd4)) {
                                        opti10 = opti23;
                                        dumpPackage2 = dumpPackage11;
                                    } else if ("o".equals(cmd4)) {
                                        opti10 = opti23;
                                        dumpPackage2 = dumpPackage11;
                                    } else {
                                        if ("lmk".equals(cmd4)) {
                                            synchronized (this) {
                                                try {
                                                    boostPriorityForLockedSection();
                                                    dumpLmkLocked(pw);
                                                } finally {
                                                    resetPriorityAfterLockedSection();
                                                }
                                            }
                                            resetPriorityAfterLockedSection();
                                            dumpPackage2 = dumpPackage11;
                                            opti2 = opti23;
                                        } else if ("lru".equals(cmd4)) {
                                            synchronized (this) {
                                                try {
                                                    boostPriorityForLockedSection();
                                                    this.mProcessList.dumpLruLocked(pw, dumpPackage11, null);
                                                } finally {
                                                    resetPriorityAfterLockedSection();
                                                }
                                            }
                                            resetPriorityAfterLockedSection();
                                            dumpPackage2 = dumpPackage11;
                                            opti2 = opti23;
                                        } else {
                                            if ("permissions".equals(cmd4)) {
                                                opti11 = opti23;
                                                dumpPackage2 = dumpPackage11;
                                            } else if ("perm".equals(cmd4)) {
                                                opti11 = opti23;
                                                dumpPackage2 = dumpPackage11;
                                            } else if ("provider".equals(cmd4)) {
                                                if (opti23 >= args3.length) {
                                                    name2 = null;
                                                    newArgs2 = EMPTY_STRING_ARRAY;
                                                    opti16 = opti23;
                                                } else {
                                                    name2 = args3[opti23];
                                                    int opti24 = opti23 + 1;
                                                    String[] newArgs5 = new String[args3.length - opti24];
                                                    if (args3.length > 2) {
                                                        System.arraycopy(args3, opti24, newArgs5, 0, args3.length - opti24);
                                                    }
                                                    newArgs2 = newArgs5;
                                                    opti16 = opti24;
                                                }
                                                if (!this.mCpHelper.dumpProvider(fd, pw, name2, newArgs2, 0, dumpAll)) {
                                                    pw.println("No providers match: " + name2);
                                                    pw.println("Use -h for help.");
                                                }
                                                opti3 = opti16;
                                            } else {
                                                if ("providers".equals(cmd4)) {
                                                    opti12 = opti23;
                                                    dumpPackage2 = dumpPackage11;
                                                } else if ("prov".equals(cmd4)) {
                                                    opti12 = opti23;
                                                    dumpPackage2 = dumpPackage11;
                                                } else if (HostingRecord.HOSTING_TYPE_SERVICE.equals(cmd4)) {
                                                    if (opti23 >= args3.length) {
                                                        name = null;
                                                        newArgs = EMPTY_STRING_ARRAY;
                                                        opti15 = opti23;
                                                    } else {
                                                        String name4 = args3[opti23];
                                                        int opti25 = opti23 + 1;
                                                        String[] newArgs6 = new String[args3.length - opti25];
                                                        if (args3.length > 2) {
                                                            System.arraycopy(args3, opti25, newArgs6, 0, args3.length - opti25);
                                                        }
                                                        opti15 = opti25;
                                                        newArgs = newArgs6;
                                                        name = name4;
                                                    }
                                                    int[] users = dumpUserId == -1 ? null : new int[]{dumpUserId};
                                                    String name5 = name;
                                                    if (!this.mServices.dumpService(fd, pw, name, users, newArgs, 0, dumpAll)) {
                                                        pw.println("No services match: " + name5);
                                                        pw.println("Use -h for help.");
                                                    }
                                                    opti3 = opti15;
                                                } else {
                                                    int dumpUserId3 = dumpUserId;
                                                    if ("package".equals(cmd4)) {
                                                        if (opti23 >= args3.length) {
                                                            pw.println("package: no package name specified");
                                                            pw.println("Use -h for help.");
                                                        } else {
                                                            dumpPackage11 = args3[opti23];
                                                            int opti26 = opti23 + 1;
                                                            String[] newArgs7 = new String[args3.length - opti26];
                                                            if (args3.length > 2) {
                                                                System.arraycopy(args3, opti26, newArgs7, 0, args3.length - opti26);
                                                            }
                                                            opti23 = 0;
                                                            more = true;
                                                            args3 = newArgs7;
                                                        }
                                                        opti3 = opti23;
                                                    } else {
                                                        if ("associations".equals(cmd4)) {
                                                            opti13 = opti23;
                                                            dumpPackage2 = dumpPackage11;
                                                        } else if ("as".equals(cmd4)) {
                                                            opti13 = opti23;
                                                            dumpPackage2 = dumpPackage11;
                                                        } else if ("settings".equals(cmd4)) {
                                                            synchronized (this) {
                                                                try {
                                                                    boostPriorityForLockedSection();
                                                                    this.mConstants.dump(pw);
                                                                } finally {
                                                                    resetPriorityAfterLockedSection();
                                                                }
                                                            }
                                                            resetPriorityAfterLockedSection();
                                                            synchronized (this.mProcLock) {
                                                                try {
                                                                    boostPriorityForProcLockedSection();
                                                                    this.mOomAdjuster.dumpCachedAppOptimizerSettings(pw);
                                                                    this.mOomAdjuster.dumpCacheOomRankerSettings(pw);
                                                                } catch (Throwable th5) {
                                                                    resetPriorityAfterProcLockedSection();
                                                                    throw th5;
                                                                }
                                                            }
                                                            resetPriorityAfterProcLockedSection();
                                                            dumpPackage2 = dumpPackage11;
                                                            opti2 = opti23;
                                                        } else {
                                                            if ("services".equals(cmd4)) {
                                                                opti14 = opti23;
                                                                dumpPackage2 = dumpPackage11;
                                                            } else if ("s".equals(cmd4)) {
                                                                opti14 = opti23;
                                                                dumpPackage2 = dumpPackage11;
                                                            } else if ("locks".equals(cmd4)) {
                                                                LockGuard.dump(fd, pw, args);
                                                                dumpPackage2 = dumpPackage11;
                                                                opti2 = opti23;
                                                            } else if ("audio".equals(cmd4)) {
                                                                spdPrint(pw, "audio");
                                                                dumpPackage2 = dumpPackage11;
                                                                opti2 = opti23;
                                                            } else if (DatabaseHelper.SoundModelContract.KEY_USERS.equals(cmd4)) {
                                                                dumpUsers(pw);
                                                                dumpPackage2 = dumpPackage11;
                                                                opti2 = opti23;
                                                            } else if ("log".equals(cmd4)) {
                                                                this.mAmsExt.enableAmsLog(pw, args3, opti23, this.mProcessList.mLruProcesses);
                                                                dumpPackage2 = dumpPackage11;
                                                                opti2 = opti23;
                                                            } else if ("exit-info".equals(cmd4)) {
                                                                if (opti23 < args3.length) {
                                                                    dumpPackage11 = args3[opti23];
                                                                    opti23++;
                                                                }
                                                                this.mProcessList.mAppExitInfoTracker.dumpHistoryProcessExitInfo(pw, dumpPackage11);
                                                                opti3 = opti23;
                                                            } else if ("component-alias".equals(cmd4)) {
                                                                this.mComponentAliasResolver.dump(pw);
                                                                dumpPackage2 = dumpPackage11;
                                                                opti2 = opti23;
                                                            } else if ("aal".equals(cmd4)) {
                                                                opti3 = this.mAmsExt.amsAalDump(pw, args3, opti23);
                                                            } else if ("appops".equals(cmd4) && "1".equals(SystemProperties.get("persist.sys.adb.support", "0"))) {
                                                                configAppOpsControl(pw, args3, opti23);
                                                                dumpPackage2 = dumpPackage11;
                                                                opti2 = opti23;
                                                            } else if ("audiomuteops".equals(cmd4) && "1".equals(SystemProperties.get("persist.sys.adb.support", "0"))) {
                                                                configAudioMuteControl(pw, args3, opti23);
                                                                dumpPackage2 = dumpPackage11;
                                                                opti2 = opti23;
                                                            } else if ("reduceops".equals(cmd4) && "1".equals(SystemProperties.get("persist.sys.adb.support", "0"))) {
                                                                configReduceANRControl(pw, args3, opti23);
                                                                dumpPackage2 = dumpPackage11;
                                                                opti2 = opti23;
                                                            } else if ("dumpheapops".equals(cmd4)) {
                                                                configDumpHeapControl(pw, args3, opti23);
                                                                dumpPackage2 = dumpPackage11;
                                                                opti2 = opti23;
                                                            } else if ("fataltest".equals(cmd4)) {
                                                                configFatalTest(pw, args3, opti23);
                                                                dumpPackage2 = dumpPackage11;
                                                                opti2 = opti23;
                                                            } else if ("hamal".equals(cmd4)) {
                                                                configHamal(pw);
                                                                dumpPackage2 = dumpPackage11;
                                                                opti2 = opti23;
                                                            } else if ("adbenable".equals(cmd4)) {
                                                                configAdbEnable(pw, args3, opti23);
                                                                dumpPackage2 = dumpPackage11;
                                                                opti2 = opti23;
                                                            } else if ("message".equals(cmd4)) {
                                                                this.mAmsExt.enableProcessMainThreadLooperLog(pw, args3, opti23, this.mProcessList.mLruProcesses);
                                                                dumpPackage2 = dumpPackage11;
                                                                opti2 = opti23;
                                                            } else if ("traneffect".equals(cmd4)) {
                                                                if (opti23 >= args3.length) {
                                                                    pw.println(" need on/off args to enable/disable traneffect ");
                                                                    dumpPackage2 = dumpPackage11;
                                                                    opti2 = opti23;
                                                                } else if ("on".equals(args3[opti23])) {
                                                                    SystemProperties.set("persist.sys.traneffect.enable", "true");
                                                                    pw.println(" enable traneffect, but need to reboot device!");
                                                                    dumpPackage2 = dumpPackage11;
                                                                    opti2 = opti23;
                                                                } else if ("off".equals(args3[opti23])) {
                                                                    SystemProperties.set("persist.sys.traneffect.enable", "false");
                                                                    pw.println(" disable traneffect, but need to reboot device!");
                                                                    dumpPackage2 = dumpPackage11;
                                                                    opti2 = opti23;
                                                                } else {
                                                                    dumpPackage2 = dumpPackage11;
                                                                    opti2 = opti23;
                                                                }
                                                            } else if ("ajustlaunch".equals(cmd4)) {
                                                                if (opti23 >= args3.length) {
                                                                    pw.println(" Ajust launch time statu is " + ActivityTaskManagerService.AJUST_LAUNCH_TIME);
                                                                    dumpPackage2 = dumpPackage11;
                                                                    opti2 = opti23;
                                                                } else if ("on".equals(args3[opti23])) {
                                                                    SystemProperties.set("persist.sys.ajustlaunch", "true");
                                                                    ActivityTaskManagerService.AJUST_LAUNCH_TIME = true;
                                                                    pw.println(" Ajust launch time on !");
                                                                    dumpPackage2 = dumpPackage11;
                                                                    opti2 = opti23;
                                                                } else if ("off".equals(args3[opti23])) {
                                                                    SystemProperties.set("persist.sys.ajustlaunch", "false");
                                                                    ActivityTaskManagerService.AJUST_LAUNCH_TIME = false;
                                                                    pw.println(" Ajust launch time off !");
                                                                    dumpPackage2 = dumpPackage11;
                                                                    opti2 = opti23;
                                                                } else {
                                                                    dumpPackage2 = dumpPackage11;
                                                                    opti2 = opti23;
                                                                }
                                                            } else if (ITranActivityManagerService.Instance().doDump(cmd4, pw, args3, opti23)) {
                                                                return;
                                                            } else {
                                                                dumpPackage2 = dumpPackage11;
                                                                if (!this.mAtmInternal.dumpActivity(fd, pw, cmd4, args, opti23, dumpAll, dumpVisibleStacksOnly, dumpFocusedStackOnly, dumpUserId3)) {
                                                                    ActivityManagerShellCommand shell = new ActivityManagerShellCommand(this, true);
                                                                    int res = shell.exec(this, null, fd, null, args, null, new ResultReceiver(null));
                                                                    if (res >= 0) {
                                                                        opti2 = opti23;
                                                                    } else {
                                                                        pw.println("Bad activity command, or no activities match: " + cmd4);
                                                                        pw.println("Use -h for help.");
                                                                        opti2 = opti23;
                                                                    }
                                                                } else {
                                                                    opti2 = opti23;
                                                                }
                                                            }
                                                            if (dumpClient) {
                                                                synchronized (this) {
                                                                    try {
                                                                        boostPriorityForLockedSection();
                                                                        dumper = this.mServices.newServiceDumperLocked(fd, pw, args, opti14, true, dumpPackage2);
                                                                    } finally {
                                                                        resetPriorityAfterLockedSection();
                                                                    }
                                                                }
                                                                resetPriorityAfterLockedSection();
                                                                dumper.dumpWithClient();
                                                                opti2 = opti14;
                                                            } else {
                                                                synchronized (this) {
                                                                    try {
                                                                        boostPriorityForLockedSection();
                                                                        this.mServices.newServiceDumperLocked(fd, pw, args, opti14, true, dumpPackage2).dumpLocked();
                                                                    } finally {
                                                                        resetPriorityAfterLockedSection();
                                                                    }
                                                                }
                                                                resetPriorityAfterLockedSection();
                                                                opti2 = opti14;
                                                            }
                                                        }
                                                        synchronized (this) {
                                                            try {
                                                                boostPriorityForLockedSection();
                                                                dumpAssociationsLocked(fd, pw, args, opti13, true, dumpClient, dumpPackage2);
                                                            } finally {
                                                                resetPriorityAfterLockedSection();
                                                            }
                                                        }
                                                        resetPriorityAfterLockedSection();
                                                        opti2 = opti13;
                                                    }
                                                }
                                                synchronized (this) {
                                                    try {
                                                        boostPriorityForLockedSection();
                                                        this.mCpHelper.dumpProvidersLocked(fd, pw, args, opti12, true, dumpPackage2);
                                                    } finally {
                                                        resetPriorityAfterLockedSection();
                                                    }
                                                }
                                                resetPriorityAfterLockedSection();
                                                opti2 = opti12;
                                            }
                                            dumpPermissions(fd, pw, args, opti11, true, dumpPackage2);
                                            opti2 = opti11;
                                        }
                                        opti3 = opti2;
                                        dumpPackage11 = dumpPackage2;
                                    }
                                    synchronized (this) {
                                        try {
                                            boostPriorityForLockedSection();
                                            this.mProcessList.dumpOomLocked(fd, pw, false, args, opti10, true, dumpPackage2, true);
                                        } finally {
                                            resetPriorityAfterLockedSection();
                                        }
                                    }
                                    resetPriorityAfterLockedSection();
                                    opti2 = opti10;
                                    opti3 = opti2;
                                    dumpPackage11 = dumpPackage2;
                                }
                                int opti27 = opti8;
                                if (opti27 >= args3.length) {
                                    opti9 = opti27;
                                    dumpPackage7 = dumpPackage6;
                                } else {
                                    String dumpPackage16 = args3[opti27];
                                    dumpPackage7 = dumpPackage16;
                                    opti9 = opti27 + 1;
                                }
                                synchronized (this) {
                                    try {
                                        boostPriorityForLockedSection();
                                        synchronized (this.mProcLock) {
                                            boostPriorityForProcLockedSection();
                                            this.mProcessList.dumpProcessesLSP(fd, pw, args, opti9, true, dumpPackage7, dumpAppId);
                                        }
                                        resetPriorityAfterProcLockedSection();
                                    } finally {
                                        resetPriorityAfterLockedSection();
                                    }
                                }
                                resetPriorityAfterLockedSection();
                                opti3 = opti9;
                                dumpPackage11 = dumpPackage7;
                            }
                            if (opti6 >= args3.length) {
                                opti7 = opti6;
                                dumpPackage11 = dumpPackage5;
                            } else {
                                String dumpPackage17 = args3[opti6];
                                opti7 = opti6 + 1;
                                dumpPackage11 = dumpPackage17;
                            }
                            this.mPendingIntentController.dumpPendingIntents(pw, z, dumpPackage11);
                            opti3 = opti7;
                        }
                        if (opti4 >= args3.length) {
                            opti5 = opti4;
                            dumpPackage4 = dumpPackage3;
                        } else {
                            String dumpPackage18 = args3[opti4];
                            dumpPackage4 = dumpPackage18;
                            opti5 = opti4 + 1;
                        }
                        synchronized (this) {
                            try {
                                boostPriorityForLockedSection();
                                dumpBroadcastsLocked(fd, pw, args, opti5, true, dumpPackage4);
                            } finally {
                                resetPriorityAfterLockedSection();
                            }
                        }
                        resetPriorityAfterLockedSection();
                        opti3 = opti5;
                        dumpPackage11 = dumpPackage4;
                    }
                    if (!more) {
                    }
                }
                this.mAtmInternal.dump(cmd, fd, pw, args, opti2, true, dumpClient, dumpPackage2);
                opti3 = opti2;
                dumpPackage11 = dumpPackage2;
                if (!more) {
                }
            }
            if (dumpCheckinFormat) {
                dumpBroadcastStatsCheckinLocked(fd, pw, args2, opti, dumpCheckin, dumpPackage);
            } else {
                if (dumpClient) {
                    dumpEverything(fd, pw, args2, opti, dumpAll, dumpPackage, dumpClient, dumpNormalPriority, dumpAppId, true);
                } else {
                    synchronized (this) {
                        try {
                            boostPriorityForLockedSection();
                            dumpEverything(fd, pw, args2, opti, dumpAll, dumpPackage, dumpClient, dumpNormalPriority, dumpAppId, false);
                        } finally {
                            resetPriorityAfterLockedSection();
                        }
                    }
                    resetPriorityAfterLockedSection();
                }
                if (dumpAll) {
                    dumpAppRestrictionController(pw);
                }
            }
            Binder.restoreCallingIdentity(origId);
        }
    }

    protected void configAppOpsControl(PrintWriter pw, String[] args, int opti) {
        Log.d("TAG", "configAppOpsControl: AppopsState = " + PackageManagerService.isAppopsState());
        if (args.length == 1) {
            if (pw != null) {
                if (PackageManagerService.isAppopsState()) {
                    pw.println(" appops is already opened");
                } else {
                    pw.println(" appops is not opened");
                }
            }
        } else if (args.length > 1) {
            String tag = args[opti];
            boolean on = "on".equals(args[opti]);
            boolean off = "off".equals(args[opti]);
            if (tag != null) {
                if (on) {
                    PackageManagerService.setAppopsState(true);
                    if (pw != null) {
                        pw.println(" appops set open");
                    }
                } else if (off) {
                    PackageManagerService.setAppopsState(false);
                    if (pw != null) {
                        pw.println(" appops set closed");
                    }
                } else if (pw != null) {
                    pw.println("  Invalid argument!!");
                }
            } else if (pw != null) {
                pw.println("  Invalid argument~!");
            }
        }
    }

    protected void configAudioMuteControl(PrintWriter pw, String[] args, int opti) {
        Log.d(TAG, "configAudioMuteControl ");
        if (args.length == 1) {
            pw.println(" audioops parameter error.");
        } else if (args.length > 1) {
            String tag = args[opti];
            boolean on = "on".equals(args[opti]);
            boolean off = "off".equals(args[opti]);
            if (tag == null) {
                if (pw != null) {
                    pw.println("  Invalid argument~!");
                }
            } else if (on) {
                SystemProperties.set("persist.sys.audio.premonkeycontrl", "1");
            } else if (off) {
                SystemProperties.set("persist.sys.audio.premonkeycontrl", "0");
            } else if (pw != null) {
                pw.println("  Invalid argument!!");
            }
        }
    }

    protected void configAdbEnable(PrintWriter pw, String[] args, int opti) {
        Log.d(TAG, "configAdbEnable ");
        if (args.length == 1) {
            pw.println(" adb disable parameter error.");
        } else if (args.length > 1) {
            String tag = args[opti];
            boolean on = "on".equals(args[opti]);
            boolean off = "off".equals(args[opti]);
            if (tag == null) {
                if (pw != null) {
                    pw.println("  Invalid argument~!");
                }
            } else if (on) {
                SystemProperties.set("persist.sys.adb.enable", "1");
            } else if (off) {
                SystemProperties.set("persist.sys.adb.enable", "0");
            } else if (pw != null) {
                pw.println("  Invalid argument!!");
            }
        }
    }

    protected void configReduceANRControl(PrintWriter pw, String[] args, int opti) {
        Log.d(TAG, "configReduceANRControl ");
        if (args.length == 1) {
            pw.println(" ReduceDumpOps parameter error.");
        } else if (args.length > 1) {
            String tag = args[opti];
            boolean on = "on".equals(args[opti]);
            boolean off = "off".equals(args[opti]);
            if (tag == null) {
                if (pw != null) {
                    pw.println("  Invalid argument~!");
                }
            } else if (on) {
                SystemProperties.set("persist.sys.reduce.dump", "enable");
            } else if (off) {
                SystemProperties.set("persist.sys.reduce.dump", "disable");
            } else if (pw != null) {
                pw.println("  Invalid argument!!");
            }
        }
    }

    protected void configDumpHeapControl(PrintWriter pw, String[] args, int opti) {
        Log.d(TAG, "configDumpHeapControl ");
        if (args.length == 1) {
            pw.println(" DumpHeapOps parameter error.");
        } else if (args.length > 1) {
            String tag = args[opti];
            boolean on = "on".equals(args[opti]);
            boolean off = "off".equals(args[opti]);
            if (tag == null) {
                if (pw != null) {
                    pw.println("  Invalid argument~!");
                }
            } else if (on) {
                SystemProperties.set("sys.dump.heap", "enable");
            } else if (off) {
                SystemProperties.set("sys.dump.heap", "disable");
            } else if (pw != null) {
                pw.println("  Invalid argument!!");
            }
        }
    }

    protected void configFatalTest(PrintWriter pw, String[] args, int opti) {
        Log.d(TAG, "configFatalTest ");
        if (args.length == 1) {
            Log.d(TAG, "configFatalTest argslen=1");
            pw.println(" configFatalTest parameter error!");
        } else if (args.length > 1) {
            Log.d(TAG, "configFatalTest argslen>1");
            String tag = args[opti];
            boolean ne = "ne".equals(args[opti]);
            boolean je = "je".equals(args[opti]);
            boolean hang = "hang".equals(args[opti]);
            boolean swt = "swt".equals(args[opti]);
            if (tag != null) {
                if (ne) {
                    Log.d(TAG, "configFatalTest set ne enable");
                    Process.sendSignal(MY_PID, 11);
                } else if (je) {
                    Log.d(TAG, "configFatalTest set je enable");
                    SystemProperties.set("persist.sys.test.je", "true");
                } else if (hang) {
                    Log.d(TAG, "configFatalTest set hang enable");
                    SystemProperties.set("persist.sys.test.hang", "true");
                } else if (swt) {
                    Log.d(TAG, "configFatalTest set swt enable");
                    SystemProperties.set("persist.sys.test.swt", "true");
                }
            } else if (pw != null) {
                Log.d(TAG, "configFatalTest 2 pw!=null");
                pw.println("  Invalid argument~!");
            }
        }
    }

    protected void configHamal(PrintWriter pw) {
        Log.d(TAG, "configHamal ");
        File hamalHistoryFile = new File("/data/user/0/com.transsion.hamal/files/upload_history");
        BufferedReader bufferedReader = null;
        try {
            if (!hamalHistoryFile.exists()) {
                pw.println("/data/user/0/com.transsion.hamal/files/upload_history do not exists");
                return;
            }
            try {
                try {
                    bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream("/data/user/0/com.transsion.hamal/files/upload_history")));
                    while (true) {
                        String str = bufferedReader.readLine();
                        if (str == null) {
                            break;
                        }
                        pw.println(str);
                    }
                    bufferedReader.close();
                } catch (IOException e) {
                    Slog.e(TAG, "read hamalHistoryFile IO error");
                    e.printStackTrace();
                    if (bufferedReader != null) {
                        bufferedReader.close();
                    }
                }
            } catch (Throwable th) {
                if (bufferedReader != null) {
                    try {
                        bufferedReader.close();
                    } catch (IOException e2) {
                        Slog.e(TAG, "bufferedReader fail");
                        e2.printStackTrace();
                    }
                }
                throw th;
            }
        } catch (IOException e3) {
            Slog.e(TAG, "bufferedReader fail");
            e3.printStackTrace();
        }
    }

    void dumpAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, boolean dumpClient, String dumpPackage) {
        ArrayMap<String, Association> sourceProcesses;
        int dumpUid;
        int N1;
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents;
        ActivityManagerService activityManagerService = this;
        String str = dumpPackage;
        pw.println("ACTIVITY MANAGER ASSOCIATIONS (dumpsys activity associations)");
        int dumpUid2 = 0;
        boolean z = false;
        if (str != null) {
            IPackageManager pm = AppGlobals.getPackageManager();
            try {
                dumpUid2 = pm.getPackageUid(str, 4194304L, 0);
            } catch (RemoteException e) {
            }
        }
        boolean printedAnything = false;
        long now = SystemClock.uptimeMillis();
        int i1 = 0;
        int N12 = activityManagerService.mAssociations.size();
        while (i1 < N12) {
            ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents2 = activityManagerService.mAssociations.valueAt(i1);
            int i2 = 0;
            int N2 = targetComponents2.size();
            while (i2 < N2) {
                SparseArray<ArrayMap<String, Association>> sourceUids = targetComponents2.valueAt(i2);
                int i3 = 0;
                int N3 = sourceUids.size();
                while (i3 < N3) {
                    ArrayMap<String, Association> sourceProcesses2 = sourceUids.valueAt(i3);
                    boolean printedAnything2 = printedAnything;
                    int N4 = sourceProcesses2.size();
                    int i4 = 0;
                    while (i4 < N4) {
                        int N42 = N4;
                        Association ass = sourceProcesses2.valueAt(i4);
                        if (str == null) {
                            sourceProcesses = sourceProcesses2;
                        } else {
                            sourceProcesses = sourceProcesses2;
                            if (!ass.mTargetComponent.getPackageName().equals(str) && UserHandle.getAppId(ass.mSourceUid) != dumpUid2) {
                                dumpUid = dumpUid2;
                                N1 = N12;
                                targetComponents = targetComponents2;
                                i4++;
                                str = dumpPackage;
                                sourceProcesses2 = sourceProcesses;
                                N4 = N42;
                                dumpUid2 = dumpUid;
                                N12 = N1;
                                targetComponents2 = targetComponents;
                            }
                        }
                        printedAnything2 = true;
                        pw.print("  ");
                        pw.print(ass.mTargetProcess);
                        pw.print(SliceClientPermissions.SliceAuthority.DELIMITER);
                        dumpUid = dumpUid2;
                        UserHandle.formatUid(pw, ass.mTargetUid);
                        pw.print(" <- ");
                        pw.print(ass.mSourceProcess);
                        pw.print(SliceClientPermissions.SliceAuthority.DELIMITER);
                        UserHandle.formatUid(pw, ass.mSourceUid);
                        pw.println();
                        pw.print("    via ");
                        pw.print(ass.mTargetComponent.flattenToShortString());
                        pw.println();
                        pw.print("    ");
                        long dur = ass.mTime;
                        N1 = N12;
                        int N13 = ass.mNesting;
                        if (N13 <= 0) {
                            targetComponents = targetComponents2;
                        } else {
                            targetComponents = targetComponents2;
                            dur += now - ass.mStartTime;
                        }
                        TimeUtils.formatDuration(dur, pw);
                        pw.print(" (");
                        pw.print(ass.mCount);
                        pw.print(" times)");
                        pw.print("  ");
                        int i = 0;
                        while (i < ass.mStateTimes.length) {
                            long amt = ass.mStateTimes[i];
                            long dur2 = dur;
                            if (ass.mLastState - 0 == i) {
                                amt += now - ass.mLastStateUptime;
                            }
                            if (amt != 0) {
                                pw.print(" ");
                                pw.print(ProcessList.makeProcStateString(i + 0));
                                pw.print("=");
                                TimeUtils.formatDuration(amt, pw);
                                if (ass.mLastState - 0 == i) {
                                    pw.print("*");
                                }
                            }
                            i++;
                            dur = dur2;
                        }
                        pw.println();
                        if (ass.mNesting > 0) {
                            pw.print("    Currently active: ");
                            TimeUtils.formatDuration(now - ass.mStartTime, pw);
                            pw.println();
                        }
                        i4++;
                        str = dumpPackage;
                        sourceProcesses2 = sourceProcesses;
                        N4 = N42;
                        dumpUid2 = dumpUid;
                        N12 = N1;
                        targetComponents2 = targetComponents;
                    }
                    i3++;
                    str = dumpPackage;
                    z = false;
                    printedAnything = printedAnything2;
                    dumpUid2 = dumpUid2;
                }
                i2++;
                str = dumpPackage;
                dumpUid2 = dumpUid2;
            }
            i1++;
            activityManagerService = this;
            str = dumpPackage;
            dumpUid2 = dumpUid2;
        }
        if (!printedAnything) {
            pw.println("  (nothing)");
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public int getAppId(String dumpPackage) {
        if (dumpPackage != null) {
            try {
                ApplicationInfo info = this.mContext.getPackageManager().getApplicationInfo(dumpPackage, 0);
                return UserHandle.getAppId(info.uid);
            } catch (PackageManager.NameNotFoundException e) {
                e.printStackTrace();
                return -1;
            }
        }
        return -1;
    }

    void dumpBinderProxyInterfaceCounts(PrintWriter pw, String header) {
        BinderProxy.InterfaceCount[] proxyCounts = BinderProxy.getSortedInterfaceCounts(50);
        pw.println(header);
        for (int i = 0; i < proxyCounts.length; i++) {
            pw.println("    #" + (i + 1) + ": " + proxyCounts[i]);
        }
    }

    boolean dumpBinderProxiesCounts(PrintWriter pw, String header) {
        SparseIntArray counts = BinderInternal.nGetBinderProxyPerUidCounts();
        if (counts != null) {
            pw.println(header);
            for (int i = 0; i < counts.size(); i++) {
                int uid = counts.keyAt(i);
                int binderCount = counts.valueAt(i);
                pw.print("    UID ");
                pw.print(uid);
                pw.print(", binder count = ");
                pw.print(binderCount);
                pw.print(", package(s)= ");
                String[] pkgNames = this.mContext.getPackageManager().getPackagesForUid(uid);
                if (pkgNames != null) {
                    for (String str : pkgNames) {
                        pw.print(str);
                        pw.print("; ");
                    }
                } else {
                    pw.print("NO PACKAGE NAME FOUND");
                }
                pw.println();
            }
            return true;
        }
        return false;
    }

    void dumpBinderProxies(PrintWriter pw, int minCountToDumpInterfaces) {
        pw.println("ACTIVITY MANAGER BINDER PROXY STATE (dumpsys activity binder-proxies)");
        int proxyCount = BinderProxy.getProxyCount();
        if (proxyCount >= minCountToDumpInterfaces) {
            dumpBinderProxyInterfaceCounts(pw, "Top proxy interface names held by SYSTEM");
        } else {
            pw.print("Not dumping proxy interface counts because size (" + Integer.toString(proxyCount) + ") looks reasonable");
            pw.println();
        }
        dumpBinderProxiesCounts(pw, "  Counts of Binder Proxies held by SYSTEM");
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean dumpActiveInstruments(PrintWriter pw, String dumpPackage, boolean needSep) {
        int size = this.mActiveInstrumentation.size();
        if (size > 0) {
            boolean printed = false;
            for (int i = 0; i < size; i++) {
                ActiveInstrumentation ai = this.mActiveInstrumentation.get(i);
                if (dumpPackage == null || ai.mClass.getPackageName().equals(dumpPackage) || ai.mTargetInfo.packageName.equals(dumpPackage)) {
                    if (!printed) {
                        if (needSep) {
                            pw.println();
                        }
                        pw.println("  Active instrumentation:");
                        printed = true;
                        needSep = true;
                    }
                    pw.print("    Instrumentation #");
                    pw.print(i);
                    pw.print(": ");
                    pw.println(ai);
                    ai.dump(pw, "      ");
                }
            }
        }
        return needSep;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    @NeverCompile
    public void dumpOtherProcessesInfoLSP(FileDescriptor fd, final PrintWriter pw, boolean dumpAll, String dumpPackage, int dumpAppId, int numPers, boolean needSep) {
        boolean needSep2;
        String str;
        PrintWriter printWriter;
        boolean needSep3;
        boolean needSep4;
        if (dumpAll || dumpPackage != null) {
            SparseArray<ProcessRecord> pidToProcess = new SparseArray<>();
            synchronized (this.mPidsSelfLocked) {
                boolean printed = false;
                try {
                    int size = this.mPidsSelfLocked.size();
                    needSep2 = needSep;
                    for (int i = 0; i < size; i++) {
                        try {
                            ProcessRecord r = this.mPidsSelfLocked.valueAt(i);
                            pidToProcess.put(r.getPid(), r);
                            if (dumpPackage == null || r.getPkgList().containsKey(dumpPackage)) {
                                if (!printed) {
                                    if (needSep2) {
                                        pw.println();
                                    }
                                    needSep2 = true;
                                    pw.println("  PID mappings:");
                                    printed = true;
                                }
                                pw.print("    PID #");
                                pw.print(this.mPidsSelfLocked.keyAt(i));
                                pw.print(": ");
                                pw.println(this.mPidsSelfLocked.valueAt(i));
                            }
                        } catch (Throwable th) {
                            th = th;
                            while (true) {
                                try {
                                    break;
                                } catch (Throwable th2) {
                                    th = th2;
                                }
                            }
                            throw th;
                        }
                    }
                    SparseArray<ProcessInfo> sparseArray = sActiveProcessInfoSelfLocked;
                    synchronized (sparseArray) {
                        boolean printed2 = false;
                        try {
                            int size2 = sparseArray.size();
                            for (int i2 = 0; i2 < size2; i2++) {
                                SparseArray<ProcessInfo> sparseArray2 = sActiveProcessInfoSelfLocked;
                                ProcessInfo info = sparseArray2.valueAt(i2);
                                ProcessRecord r2 = pidToProcess.get(sparseArray2.keyAt(i2));
                                if (r2 == null || dumpPackage == null || r2.getPkgList().containsKey(dumpPackage)) {
                                    if (!printed2) {
                                        if (needSep2) {
                                            pw.println();
                                        }
                                        needSep2 = true;
                                        pw.println("  Active process infos:");
                                        printed2 = true;
                                    }
                                    pw.print("    Pinfo PID #");
                                    pw.print(sparseArray2.keyAt(i2));
                                    pw.println(":");
                                    pw.print("      name=");
                                    pw.println(info.name);
                                    if (info.deniedPermissions != null) {
                                        for (int j = 0; j < info.deniedPermissions.size(); j++) {
                                            pw.print("      deny: ");
                                            pw.println((String) info.deniedPermissions.valueAt(j));
                                        }
                                    }
                                }
                            }
                        } catch (Throwable th3) {
                            th = th3;
                            while (true) {
                                try {
                                    break;
                                } catch (Throwable th4) {
                                    th = th4;
                                }
                            }
                            throw th;
                        }
                    }
                } catch (Throwable th5) {
                    th = th5;
                }
            }
        } else {
            needSep2 = needSep;
        }
        if (dumpAll) {
            this.mPhantomProcessList.dump(pw, "  ");
        }
        if (this.mImportantProcesses.size() > 0) {
            synchronized (this.mPidsSelfLocked) {
                boolean printed3 = false;
                int size3 = this.mImportantProcesses.size();
                for (int i3 = 0; i3 < size3; i3++) {
                    ProcessRecord r3 = this.mPidsSelfLocked.get(this.mImportantProcesses.valueAt(i3).pid);
                    if (dumpPackage == null || (r3 != null && r3.getPkgList().containsKey(dumpPackage))) {
                        if (!printed3) {
                            if (needSep2) {
                                pw.println();
                            }
                            needSep2 = true;
                            pw.println("  Foreground Processes:");
                            printed3 = true;
                        }
                        pw.print("    PID #");
                        pw.print(this.mImportantProcesses.keyAt(i3));
                        pw.print(": ");
                        pw.println(this.mImportantProcesses.valueAt(i3));
                    }
                }
            }
        }
        if (this.mPersistentStartingProcesses.size() > 0) {
            if (needSep2) {
                pw.println();
            }
            pw.println("  Persisent processes that are starting:");
            dumpProcessList(pw, this, this.mPersistentStartingProcesses, "    ", "Starting Norm", "Restarting PERS", dumpPackage);
            needSep2 = true;
        }
        if (this.mProcessList.mRemovedProcesses.size() > 0) {
            if (needSep2) {
                pw.println();
            }
            pw.println("  Processes that are being removed:");
            dumpProcessList(pw, this, this.mProcessList.mRemovedProcesses, "    ", "Removed Norm", "Removed PERS", dumpPackage);
            needSep2 = true;
        }
        if (this.mProcessesOnHold.size() > 0) {
            if (needSep2) {
                pw.println();
            }
            pw.println("  Processes that are on old until the system is ready:");
            dumpProcessList(pw, this, this.mProcessesOnHold, "    ", "OnHold Norm", "OnHold PERS", dumpPackage);
            needSep2 = true;
        }
        boolean needSep5 = this.mAtmInternal.dumpForProcesses(fd, pw, dumpAll, dumpPackage, dumpAppId, this.mAppErrors.dumpLPr(fd, pw, needSep2, dumpPackage), this.mAppProfiler.getTestPssMode(), this.mWakefulness.get());
        if (dumpAll && this.mProcessList.mPendingStarts.size() > 0) {
            if (needSep5) {
                pw.println();
            }
            needSep5 = true;
            pw.println("  mPendingStarts: ");
            int len = this.mProcessList.mPendingStarts.size();
            for (int i4 = 0; i4 < len; i4++) {
                pw.println("    " + this.mProcessList.mPendingStarts.keyAt(i4) + ": " + this.mProcessList.mPendingStarts.valueAt(i4));
            }
        }
        if (!dumpAll) {
            str = dumpPackage;
            printWriter = pw;
        } else {
            this.mUidObserverController.dump(pw, dumpPackage);
            pw.println("  mDeviceIdleAllowlist=" + Arrays.toString(this.mDeviceIdleAllowlist));
            pw.println("  mDeviceIdleExceptIdleAllowlist=" + Arrays.toString(this.mDeviceIdleExceptIdleAllowlist));
            pw.println("  mDeviceIdleTempAllowlist=" + Arrays.toString(this.mDeviceIdleTempAllowlist));
            if (this.mPendingTempAllowlist.size() > 0) {
                pw.println("  mPendingTempAllowlist:");
                int size4 = this.mPendingTempAllowlist.size();
                for (int i5 = 0; i5 < size4; i5++) {
                    PendingTempAllowlist ptw = this.mPendingTempAllowlist.valueAt(i5);
                    pw.print("    ");
                    UserHandle.formatUid(pw, ptw.targetUid);
                    pw.print(": ");
                    TimeUtils.formatDuration(ptw.duration, pw);
                    pw.print(" ");
                    pw.println(ptw.tag);
                    pw.print(" ");
                    pw.print(ptw.type);
                    pw.print(" ");
                    pw.print(ptw.reasonCode);
                    pw.print(" ");
                    pw.print(ptw.callingUid);
                }
            }
            pw.println("  mFgsStartTempAllowList:");
            final long currentTimeNow = System.currentTimeMillis();
            final long elapsedRealtimeNow = SystemClock.elapsedRealtime();
            str = dumpPackage;
            printWriter = pw;
            this.mFgsStartTempAllowList.forEach(new BiConsumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda23
                @Override // java.util.function.BiConsumer
                public final void accept(Object obj, Object obj2) {
                    ActivityManagerService.lambda$dumpOtherProcessesInfoLSP$13(pw, currentTimeNow, elapsedRealtimeNow, (Integer) obj, (Pair) obj2);
                }
            });
            if (!this.mProcessList.mAppsInBackgroundRestricted.isEmpty()) {
                printWriter.println("  Processes that are in background restricted:");
                int size5 = this.mProcessList.mAppsInBackgroundRestricted.size();
                for (int i6 = 0; i6 < size5; i6++) {
                    printWriter.println(String.format("%s #%2d: %s", "    ", Integer.valueOf(i6), this.mProcessList.mAppsInBackgroundRestricted.valueAt(i6).toString()));
                }
            }
        }
        String str2 = this.mDebugApp;
        if ((str2 != null || this.mOrigDebugApp != null || this.mDebugTransient || this.mOrigWaitForDebugger) && (str == null || str.equals(str2) || str.equals(this.mOrigDebugApp))) {
            if (needSep5) {
                pw.println();
                needSep5 = false;
            }
            printWriter.println("  mDebugApp=" + this.mDebugApp + "/orig=" + this.mOrigDebugApp + " mDebugTransient=" + this.mDebugTransient + " mOrigWaitForDebugger=" + this.mOrigWaitForDebugger);
            needSep3 = needSep5;
        } else {
            needSep3 = needSep5;
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            try {
                needSep4 = this.mAppProfiler.dumpMemWatchProcessesLPf(printWriter, needSep3);
            } catch (Throwable th6) {
                th = th6;
                while (true) {
                    try {
                        break;
                    } catch (Throwable th7) {
                        th = th7;
                    }
                }
                throw th;
            }
        }
        String str3 = this.mTrackAllocationApp;
        if (str3 != null && (str == null || str.equals(str3))) {
            if (needSep4) {
                pw.println();
                needSep4 = false;
            }
            printWriter.println("  mTrackAllocationApp=" + this.mTrackAllocationApp);
        }
        boolean needSep6 = this.mAppProfiler.dumpProfileDataLocked(printWriter, str, needSep4);
        String str4 = this.mNativeDebuggingApp;
        if (str4 != null && (str == null || str.equals(str4))) {
            if (needSep6) {
                pw.println();
            }
            printWriter.println("  mNativeDebuggingApp=" + this.mNativeDebuggingApp);
        }
        if (str == null) {
            if (this.mAlwaysFinishActivities) {
                printWriter.println("  mAlwaysFinishActivities=" + this.mAlwaysFinishActivities);
            }
            if (dumpAll) {
                printWriter.println("  Total persistent processes: " + numPers);
                printWriter.println("  mProcessesReady=" + this.mProcessesReady + " mSystemReady=" + this.mSystemReady + " mBooted=" + this.mBooted + " mFactoryTest=" + this.mFactoryTest);
                printWriter.println("  mBooting=" + this.mBooting + " mCallFinishBooting=" + this.mCallFinishBooting + " mBootAnimationComplete=" + this.mBootAnimationComplete);
                printWriter.print("  mLastPowerCheckUptime=");
                TimeUtils.formatDuration(this.mLastPowerCheckUptime, printWriter);
                printWriter.println("");
                this.mOomAdjuster.dumpSequenceNumbersLocked(printWriter);
                this.mOomAdjuster.dumpProcCountsLocked(printWriter);
                this.mAppProfiler.dumpMemoryLevelsLocked(printWriter);
                long now = SystemClock.uptimeMillis();
                printWriter.print("  mLastIdleTime=");
                TimeUtils.formatDuration(now, this.mLastIdleTime, printWriter);
                printWriter.print(" mLowRamSinceLastIdle=");
                TimeUtils.formatDuration(this.mAppProfiler.getLowRamTimeSinceIdleLPr(now), printWriter);
                pw.println();
                pw.println();
                printWriter.println("  ServiceManager statistics:");
                ServiceManager.sStatLogger.dump(printWriter, "    ");
                pw.println();
            }
        }
        printWriter.println("  mForceBackgroundCheck=" + this.mForceBackgroundCheck);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ void lambda$dumpOtherProcessesInfoLSP$13(PrintWriter pw, long currentTimeNow, long elapsedRealtimeNow, Integer uid, Pair entry) {
        pw.print("    " + UserHandle.formatUid(uid.intValue()) + ": ");
        ((FgsTempAllowListItem) entry.second).dump(pw);
        pw.print(" expiration=");
        long expirationInCurrentTime = (currentTimeNow - elapsedRealtimeNow) + ((Long) entry.first).longValue();
        TimeUtils.dumpTimeWithDelta(pw, expirationInCurrentTime, currentTimeNow);
        pw.println();
    }

    private void dumpUsers(PrintWriter pw) {
        pw.println("ACTIVITY MANAGER USERS (dumpsys activity users)");
        this.mUserController.dump(pw);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void writeOtherProcessesInfoToProtoLSP(ProtoOutputStream proto, String dumpPackage, int dumpAppId, int numPers) {
        int[] iArr;
        int[] iArr2;
        int size = this.mActiveInstrumentation.size();
        for (int i = 0; i < size; i++) {
            ActiveInstrumentation ai = this.mActiveInstrumentation.get(i);
            if (dumpPackage == null || ai.mClass.getPackageName().equals(dumpPackage) || ai.mTargetInfo.packageName.equals(dumpPackage)) {
                ai.dumpDebug(proto, 2246267895811L);
            }
        }
        this.mUidObserverController.dumpValidateUidsProto(proto, dumpPackage, dumpAppId, 2246267895813L);
        if (dumpPackage != null) {
            synchronized (this.mPidsSelfLocked) {
                int size2 = this.mPidsSelfLocked.size();
                for (int i2 = 0; i2 < size2; i2++) {
                    ProcessRecord r = this.mPidsSelfLocked.valueAt(i2);
                    if (r.getPkgList().containsKey(dumpPackage)) {
                        r.dumpDebug(proto, 2246267895815L);
                    }
                }
            }
        }
        if (this.mImportantProcesses.size() > 0) {
            synchronized (this.mPidsSelfLocked) {
                int size3 = this.mImportantProcesses.size();
                for (int i3 = 0; i3 < size3; i3++) {
                    ImportanceToken it = this.mImportantProcesses.valueAt(i3);
                    ProcessRecord r2 = this.mPidsSelfLocked.get(it.pid);
                    if (dumpPackage == null || (r2 != null && r2.getPkgList().containsKey(dumpPackage))) {
                        it.dumpDebug(proto, 2246267895816L);
                    }
                }
            }
        }
        int size4 = this.mPersistentStartingProcesses.size();
        for (int i4 = 0; i4 < size4; i4++) {
            ProcessRecord r3 = this.mPersistentStartingProcesses.get(i4);
            if (dumpPackage == null || dumpPackage.equals(r3.info.packageName)) {
                r3.dumpDebug(proto, 2246267895817L);
            }
        }
        int size5 = this.mProcessList.mRemovedProcesses.size();
        for (int i5 = 0; i5 < size5; i5++) {
            ProcessRecord r4 = this.mProcessList.mRemovedProcesses.get(i5);
            if (dumpPackage == null || dumpPackage.equals(r4.info.packageName)) {
                r4.dumpDebug(proto, 2246267895818L);
            }
        }
        int size6 = this.mProcessesOnHold.size();
        for (int i6 = 0; i6 < size6; i6++) {
            ProcessRecord r5 = this.mProcessesOnHold.get(i6);
            if (dumpPackage == null || dumpPackage.equals(r5.info.packageName)) {
                r5.dumpDebug(proto, 2246267895819L);
            }
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            this.mAppProfiler.writeProcessesToGcToProto(proto, 2246267895820L, dumpPackage);
        }
        this.mAppErrors.dumpDebugLPr(proto, 1146756268045L, dumpPackage);
        this.mAtmInternal.writeProcessesToProto(proto, dumpPackage, this.mWakefulness.get(), this.mAppProfiler.getTestPssMode());
        if (dumpPackage == null) {
            this.mUserController.dumpDebug(proto, 1146756268046L);
        }
        this.mUidObserverController.dumpDebug(proto, dumpPackage);
        for (int v : this.mDeviceIdleAllowlist) {
            proto.write(2220498092056L, v);
        }
        for (int v2 : this.mDeviceIdleTempAllowlist) {
            proto.write(2220498092057L, v2);
        }
        if (this.mPendingTempAllowlist.size() > 0) {
            int size7 = this.mPendingTempAllowlist.size();
            for (int i7 = 0; i7 < size7; i7++) {
                this.mPendingTempAllowlist.valueAt(i7).dumpDebug(proto, 2246267895834L);
            }
        }
        String str = this.mDebugApp;
        if ((str != null || this.mOrigDebugApp != null || this.mDebugTransient || this.mOrigWaitForDebugger) && (dumpPackage == null || dumpPackage.equals(str) || dumpPackage.equals(this.mOrigDebugApp))) {
            long debugAppToken = proto.start(1146756268062L);
            proto.write(CompanionAppsPermissions.AppPermissions.PACKAGE_NAME, this.mDebugApp);
            proto.write(1138166333442L, this.mOrigDebugApp);
            proto.write(1133871366147L, this.mDebugTransient);
            proto.write(1133871366148L, this.mOrigWaitForDebugger);
            proto.end(debugAppToken);
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            this.mAppProfiler.writeMemWatchProcessToProtoLPf(proto);
        }
        String str2 = this.mTrackAllocationApp;
        if (str2 != null && (dumpPackage == null || dumpPackage.equals(str2))) {
            proto.write(1138166333473L, this.mTrackAllocationApp);
        }
        this.mAppProfiler.writeProfileDataToProtoLocked(proto, dumpPackage);
        if (dumpPackage == null || dumpPackage.equals(this.mNativeDebuggingApp)) {
            proto.write(1138166333475L, this.mNativeDebuggingApp);
        }
        if (dumpPackage == null) {
            proto.write(1133871366180L, this.mAlwaysFinishActivities);
            proto.write(1120986464294L, numPers);
            proto.write(1133871366183L, this.mProcessesReady);
            proto.write(1133871366184L, this.mSystemReady);
            proto.write(1133871366185L, this.mBooted);
            proto.write(1120986464298L, this.mFactoryTest);
            proto.write(1133871366187L, this.mBooting);
            proto.write(1133871366188L, this.mCallFinishBooting);
            proto.write(1133871366189L, this.mBootAnimationComplete);
            proto.write(1112396529710L, this.mLastPowerCheckUptime);
            this.mOomAdjuster.dumpProcessListVariablesLocked(proto);
            this.mAppProfiler.writeMemoryLevelsToProtoLocked(proto);
            long now = SystemClock.uptimeMillis();
            ProtoUtils.toDuration(proto, 1146756268090L, this.mLastIdleTime, now);
            proto.write(1112396529723L, this.mAppProfiler.getLowRamTimeSinceIdleLPr(now));
        }
    }

    private boolean reportLmkKillAtOrBelow(PrintWriter pw, int oom_adj) {
        Integer cnt = ProcessList.getLmkdKillCount(0, oom_adj);
        if (cnt == null) {
            return false;
        }
        pw.println("    kills at or below oom_adj " + oom_adj + ": " + cnt);
        return true;
    }

    boolean dumpLmkLocked(PrintWriter pw) {
        pw.println("ACTIVITY MANAGER LMK KILLS (dumpsys activity lmk)");
        Integer cnt = ProcessList.getLmkdKillCount(1001, 1001);
        if (cnt == null) {
            return false;
        }
        pw.println("  Total number of kills: " + cnt);
        return reportLmkKillAtOrBelow(pw, 999) && reportLmkKillAtOrBelow(pw, 900) && reportLmkKillAtOrBelow(pw, 800) && reportLmkKillAtOrBelow(pw, 700) && reportLmkKillAtOrBelow(pw, 600) && reportLmkKillAtOrBelow(pw, 500) && reportLmkKillAtOrBelow(pw, 400) && reportLmkKillAtOrBelow(pw, 300) && reportLmkKillAtOrBelow(pw, 250) && reportLmkKillAtOrBelow(pw, 200) && reportLmkKillAtOrBelow(pw, 100) && reportLmkKillAtOrBelow(pw, 0);
    }

    /* loaded from: classes.dex */
    public static class ItemMatcher {
        boolean all = true;
        ArrayList<ComponentName> components;
        ArrayList<Integer> objects;
        ArrayList<String> strings;

        public void build(String name) {
            ComponentName componentName = ComponentName.unflattenFromString(name);
            if (componentName != null) {
                if (this.components == null) {
                    this.components = new ArrayList<>();
                }
                this.components.add(componentName);
                this.all = false;
                return;
            }
            try {
                int objectId = Integer.parseInt(name, 16);
                if (this.objects == null) {
                    this.objects = new ArrayList<>();
                }
                this.objects.add(Integer.valueOf(objectId));
                this.all = false;
            } catch (RuntimeException e) {
                if (this.strings == null) {
                    this.strings = new ArrayList<>();
                }
                this.strings.add(name);
                this.all = false;
            }
        }

        public int build(String[] args, int opti) {
            while (opti < args.length) {
                String name = args[opti];
                if ("--".equals(name)) {
                    return opti + 1;
                }
                build(name);
                opti++;
            }
            return opti;
        }

        public boolean match(Object object, ComponentName comp) {
            if (this.all) {
                return true;
            }
            if (this.components != null) {
                for (int i = 0; i < this.components.size(); i++) {
                    if (this.components.get(i).equals(comp)) {
                        return true;
                    }
                }
            }
            if (this.objects != null) {
                for (int i2 = 0; i2 < this.objects.size(); i2++) {
                    if (System.identityHashCode(object) == this.objects.get(i2).intValue()) {
                        return true;
                    }
                }
            }
            if (this.strings != null) {
                String flat = comp.flattenToString();
                for (int i3 = 0; i3 < this.strings.size(); i3++) {
                    if (flat.contains(this.strings.get(i3))) {
                        return true;
                    }
                }
                return false;
            }
            return false;
        }
    }

    void writeBroadcastsToProtoLocked(ProtoOutputStream proto) {
        BroadcastQueue[] broadcastQueueArr;
        if (this.mRegisteredReceivers.size() > 0) {
            for (ReceiverList r : this.mRegisteredReceivers.values()) {
                r.dumpDebug(proto, CompanionAppsPermissions.APP_PERMISSIONS);
            }
        }
        this.mReceiverResolver.dumpDebug(proto, 1146756268034L);
        for (BroadcastQueue q : this.mBroadcastQueues) {
            q.dumpDebug(proto, 2246267895811L);
        }
        int user = 0;
        while (true) {
            int size = this.mStickyBroadcasts.size();
            long token = CompanionAppsPermissions.AppPermissions.PACKAGE_NAME;
            if (user < size) {
                long token2 = proto.start(2246267895812L);
                proto.write(CompanionMessage.MESSAGE_ID, this.mStickyBroadcasts.keyAt(user));
                for (Map.Entry<String, ArrayList<Intent>> ent : this.mStickyBroadcasts.valueAt(user).entrySet()) {
                    long actionToken = proto.start(2246267895810L);
                    proto.write(token, ent.getKey());
                    Iterator<Intent> it = ent.getValue().iterator();
                    while (it.hasNext()) {
                        Intent intent = it.next();
                        intent.dumpDebug(proto, 2246267895810L, false, true, true, false);
                        actionToken = actionToken;
                        token2 = token2;
                    }
                    proto.end(actionToken);
                    token = CompanionAppsPermissions.AppPermissions.PACKAGE_NAME;
                }
                proto.end(token2);
                user++;
            } else {
                long handlerToken = proto.start(1146756268037L);
                proto.write(CompanionAppsPermissions.AppPermissions.PACKAGE_NAME, this.mHandler.toString());
                this.mHandler.getLooper().dumpDebug(proto, 1146756268034L);
                proto.end(handlerToken);
                return;
            }
        }
    }

    void dumpAllowedAssociationsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        pw.println("ACTIVITY MANAGER ALLOWED ASSOCIATION STATE (dumpsys activity allowed-associations)");
        boolean printed = false;
        if (this.mAllowedAssociations != null) {
            for (int i = 0; i < this.mAllowedAssociations.size(); i++) {
                String pkg = this.mAllowedAssociations.keyAt(i);
                ArraySet<String> asc = this.mAllowedAssociations.valueAt(i).getAllowedPackageAssociations();
                if (!printed) {
                    pw.println("  Allowed associations (by restricted package):");
                    printed = true;
                }
                pw.print("  * ");
                pw.print(pkg);
                pw.println(":");
                for (int j = 0; j < asc.size(); j++) {
                    if (dumpPackage == null || pkg.equals(dumpPackage) || asc.valueAt(j).equals(dumpPackage)) {
                        pw.print("      Allow: ");
                        pw.println(asc.valueAt(j));
                    }
                }
                if (this.mAllowedAssociations.valueAt(i).isDebuggable()) {
                    pw.println("      (debuggable)");
                }
            }
        }
        if (!printed) {
            pw.println("  (No association restrictions)");
        }
    }

    void dumpBroadcastsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        boolean dumpAll2;
        boolean onlyHistory;
        String dumpPackage2;
        BroadcastQueue[] broadcastQueueArr;
        boolean needSep;
        String str;
        String str2;
        boolean needSep2;
        boolean printedAnything;
        boolean dumpAll3;
        boolean needSep3 = false;
        boolean printedAnything2 = false;
        if (!"history".equals(dumpPackage)) {
            dumpAll2 = dumpAll;
            onlyHistory = false;
            dumpPackage2 = dumpPackage;
        } else {
            if (opti < args.length && "-s".equals(args[opti])) {
                dumpAll3 = false;
            } else {
                dumpAll3 = dumpAll;
            }
            onlyHistory = true;
            dumpAll2 = dumpAll3;
            dumpPackage2 = null;
        }
        pw.println("ACTIVITY MANAGER BROADCAST STATE (dumpsys activity broadcasts)");
        if (!onlyHistory && dumpAll2) {
            if (this.mRegisteredReceivers.size() <= 0) {
                needSep2 = false;
                printedAnything = false;
            } else {
                boolean printed = false;
                for (ReceiverList r : this.mRegisteredReceivers.values()) {
                    if (dumpPackage2 == null || (r.app != null && dumpPackage2.equals(r.app.info.packageName))) {
                        if (!printed) {
                            pw.println("  Registered Receivers:");
                            needSep3 = true;
                            printed = true;
                            printedAnything2 = true;
                        }
                        pw.print("  * ");
                        pw.println(r);
                        r.dump(pw, "    ");
                    }
                }
                needSep2 = needSep3;
                printedAnything = printedAnything2;
            }
            if (!this.mReceiverResolver.dump(pw, needSep2 ? "\n  Receiver Resolver Table:" : "  Receiver Resolver Table:", "    ", dumpPackage2, false, false)) {
                needSep3 = needSep2;
                printedAnything2 = printedAnything;
            } else {
                needSep3 = true;
                printedAnything2 = true;
            }
        }
        BroadcastQueue[] broadcastQueueArr2 = this.mBroadcastQueues;
        int length = broadcastQueueArr2.length;
        boolean z = false;
        boolean needSep4 = needSep3;
        boolean printedAnything3 = printedAnything2;
        int i = 0;
        while (i < length) {
            BroadcastQueue q = broadcastQueueArr2[i];
            needSep4 = q.dumpLocked(fd, pw, args, opti, dumpAll2, dumpPackage2, needSep4);
            printedAnything3 |= needSep4;
            i++;
            z = z;
            length = length;
            broadcastQueueArr2 = broadcastQueueArr2;
        }
        boolean needSep5 = true;
        if (!onlyHistory && this.mStickyBroadcasts != null && dumpPackage2 == null) {
            for (int user = 0; user < this.mStickyBroadcasts.size(); user++) {
                if (needSep5) {
                    pw.println();
                }
                needSep5 = true;
                printedAnything3 = true;
                pw.print("  Sticky broadcasts for user ");
                pw.print(this.mStickyBroadcasts.keyAt(user));
                String str3 = ":";
                pw.println(":");
                StringBuilder sb = new StringBuilder(128);
                for (Map.Entry<String, ArrayList<Intent>> ent : this.mStickyBroadcasts.valueAt(user).entrySet()) {
                    pw.print("  * Sticky action ");
                    pw.print(ent.getKey());
                    if (dumpAll2) {
                        pw.println(str3);
                        ArrayList<Intent> intents = ent.getValue();
                        int N = intents.size();
                        int i2 = 0;
                        while (i2 < N) {
                            boolean needSep6 = needSep5;
                            sb.setLength(0);
                            sb.append("    Intent: ");
                            intents.get(i2).toShortString(sb, false, true, false, false);
                            pw.println(sb.toString());
                            Bundle bundle = intents.get(i2).getExtras();
                            if (bundle == null) {
                                str2 = str3;
                            } else {
                                str2 = str3;
                                pw.print("      ");
                                pw.println(bundle.toString());
                            }
                            i2++;
                            needSep5 = needSep6;
                            str3 = str2;
                        }
                        needSep = needSep5;
                        str = str3;
                    } else {
                        needSep = needSep5;
                        str = str3;
                        pw.println("");
                    }
                    needSep5 = needSep;
                    str3 = str;
                }
            }
        }
        if (!onlyHistory && dumpAll2) {
            pw.println();
            for (BroadcastQueue queue : this.mBroadcastQueues) {
                pw.println("  mBroadcastsScheduled [" + queue.mQueueName + "]=" + queue.mBroadcastsScheduled);
            }
            pw.println("  mHandler:");
            this.mHandler.dump(new PrintWriterPrinter(pw), "    ");
            printedAnything3 = true;
        }
        if (!printedAnything3) {
            pw.println("  (nothing)");
        }
    }

    void dumpBroadcastStatsLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        if (this.mCurBroadcastStats == null) {
            return;
        }
        pw.println("ACTIVITY MANAGER BROADCAST STATS STATE (dumpsys activity broadcast-stats)");
        long now = SystemClock.elapsedRealtime();
        if (this.mLastBroadcastStats != null) {
            pw.print("  Last stats (from ");
            TimeUtils.formatDuration(this.mLastBroadcastStats.mStartRealtime, now, pw);
            pw.print(" to ");
            TimeUtils.formatDuration(this.mLastBroadcastStats.mEndRealtime, now, pw);
            pw.print(", ");
            TimeUtils.formatDuration(this.mLastBroadcastStats.mEndUptime - this.mLastBroadcastStats.mStartUptime, pw);
            pw.println(" uptime):");
            if (!this.mLastBroadcastStats.dumpStats(pw, "    ", dumpPackage)) {
                pw.println("    (nothing)");
            }
            pw.println();
        }
        pw.print("  Current stats (from ");
        TimeUtils.formatDuration(this.mCurBroadcastStats.mStartRealtime, now, pw);
        pw.print(" to now, ");
        TimeUtils.formatDuration(SystemClock.uptimeMillis() - this.mCurBroadcastStats.mStartUptime, pw);
        pw.println(" uptime):");
        if (!this.mCurBroadcastStats.dumpStats(pw, "    ", dumpPackage)) {
            pw.println("    (nothing)");
        }
    }

    void dumpBroadcastStatsCheckinLocked(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean fullCheckin, String dumpPackage) {
        if (this.mCurBroadcastStats == null) {
            return;
        }
        BroadcastStats broadcastStats = this.mLastBroadcastStats;
        if (broadcastStats != null) {
            broadcastStats.dumpCheckinStats(pw, dumpPackage);
            if (fullCheckin) {
                this.mLastBroadcastStats = null;
                return;
            }
        }
        this.mCurBroadcastStats.dumpCheckinStats(pw, dumpPackage);
        if (fullCheckin) {
            this.mCurBroadcastStats = null;
        }
    }

    void dumpPermissions(FileDescriptor fd, PrintWriter pw, String[] args, int opti, boolean dumpAll, String dumpPackage) {
        pw.println("ACTIVITY MANAGER URI PERMISSIONS (dumpsys activity permissions)");
        this.mUgmInternal.dump(pw, dumpAll, dumpPackage);
    }

    private static int dumpProcessList(PrintWriter pw, ActivityManagerService service, List list, String prefix, String normalLabel, String persistentLabel, String dumpPackage) {
        int numPers = 0;
        for (int i = list.size() - 1; i >= 0; i--) {
            ProcessRecord r = (ProcessRecord) list.get(i);
            if (dumpPackage == null || dumpPackage.equals(r.info.packageName)) {
                Object[] objArr = new Object[4];
                objArr[0] = prefix;
                objArr[1] = r.isPersistent() ? persistentLabel : normalLabel;
                objArr[2] = Integer.valueOf(i);
                objArr[3] = r.toString();
                pw.println(String.format("%s%s #%2d: %s", objArr));
                if (r.isPersistent()) {
                    numPers++;
                }
            }
        }
        return numPers;
    }

    ArrayList<ProcessRecord> collectProcesses(PrintWriter pw, int start, boolean allPkgs, String[] args) {
        ArrayList<ProcessRecord> collectProcessesLOSP;
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                collectProcessesLOSP = this.mProcessList.collectProcessesLOSP(start, allPkgs, args);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return collectProcessesLOSP;
    }

    final void dumpGraphicsHardwareUsage(FileDescriptor fd, PrintWriter pw, String[] args) {
        ArrayList<ProcessRecord> procs = collectProcesses(pw, 0, false, args);
        if (procs == null) {
            pw.println("No process found for: " + args[0]);
            return;
        }
        long uptime = SystemClock.uptimeMillis();
        long realtime = SystemClock.elapsedRealtime();
        pw.println("Applications Graphics Acceleration Info:");
        pw.println("Uptime: " + uptime + " Realtime: " + realtime);
        for (int i = procs.size() - 1; i >= 0; i--) {
            ProcessRecord r = procs.get(i);
            int pid = r.getPid();
            IApplicationThread thread = r.getThread();
            if (thread != null) {
                pw.println("\n** Graphics info for pid " + pid + " [" + r.processName + "] **");
                pw.flush();
                try {
                    TransferPipe tp = new TransferPipe();
                    try {
                        tp.goAsyncBegin(fd);
                        thread.dumpGfxInfo(tp.getWriteFd(), args);
                        tp.goAsyncEnd();
                        tp.kill();
                    } catch (Throwable th) {
                        tp.kill();
                        throw th;
                        break;
                    }
                } catch (RemoteException e) {
                    pw.println("Got a RemoteException while dumping the app " + r);
                    pw.flush();
                } catch (IOException e2) {
                    pw.println("Failure while dumping the app: " + r);
                    pw.flush();
                }
            }
        }
    }

    final void dumpBinderCacheContents(FileDescriptor fd, PrintWriter pw, String[] args) {
        ArrayList<ProcessRecord> procs = collectProcesses(pw, 0, false, args);
        if (procs == null) {
            pw.println("No process found for: " + args[0]);
            return;
        }
        pw.println("Per-process Binder Cache Contents");
        for (int i = procs.size() - 1; i >= 0; i--) {
            ProcessRecord r = procs.get(i);
            int pid = r.getPid();
            IApplicationThread thread = r.getThread();
            if (thread != null) {
                pw.println("\n\n** Cache info for pid " + pid + " [" + r.processName + "] **");
                pw.flush();
                try {
                    TransferPipe tp = new TransferPipe();
                    thread.dumpCacheInfo(tp.getWriteFd(), args);
                    tp.go(fd);
                    tp.kill();
                } catch (RemoteException e) {
                    pw.println("Got a RemoteException while dumping the app " + r);
                    pw.flush();
                } catch (IOException e2) {
                    pw.println("Failure while dumping the app " + r);
                    pw.flush();
                }
            }
        }
    }

    final void dumpDbInfo(FileDescriptor fd, PrintWriter pw, String[] args) {
        ArrayList<ProcessRecord> procs = collectProcesses(pw, 0, false, args);
        if (procs == null) {
            pw.println("No process found for: " + args[0]);
            return;
        }
        pw.println("Applications Database Info:");
        for (int i = procs.size() - 1; i >= 0; i--) {
            ProcessRecord r = procs.get(i);
            int pid = r.getPid();
            IApplicationThread thread = r.getThread();
            if (thread != null) {
                pw.println("\n** Database info for pid " + pid + " [" + r.processName + "] **");
                pw.flush();
                try {
                    TransferPipe tp = new TransferPipe();
                    try {
                        tp.goAsyncBegin(fd);
                        thread.dumpDbInfo(tp.getWriteFd(), args);
                        tp.goAsyncEnd();
                        tp.kill();
                    } catch (Throwable th) {
                        tp.kill();
                        throw th;
                        break;
                    }
                } catch (RemoteException e) {
                    pw.println("Got a RemoteException while dumping the app " + r);
                    pw.flush();
                } catch (IOException e2) {
                    pw.println("Failure while dumping the app: " + r);
                    pw.flush();
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* loaded from: classes.dex */
    public static final class MemItem {
        final boolean hasActivities;
        final int id;
        final boolean isProc;
        final String label;
        final long mRss;
        final long pss;
        final String shortLabel;
        ArrayList<MemItem> subitems;
        final long swapPss;

        MemItem(String label, String shortLabel, long pss, long swapPss, long rss, int id, boolean hasActivities) {
            this.isProc = true;
            this.label = label;
            this.shortLabel = shortLabel;
            this.pss = pss;
            this.swapPss = swapPss;
            this.mRss = rss;
            this.id = id;
            this.hasActivities = hasActivities;
        }

        MemItem(String label, String shortLabel, long pss, long swapPss, long rss, int id) {
            this.isProc = false;
            this.label = label;
            this.shortLabel = shortLabel;
            this.pss = pss;
            this.swapPss = swapPss;
            this.mRss = rss;
            this.id = id;
            this.hasActivities = false;
        }
    }

    private static void sortMemItems(List<MemItem> items, final boolean pss) {
        Collections.sort(items, new Comparator<MemItem>() { // from class: com.android.server.am.ActivityManagerService.18
            /* JADX DEBUG: Method merged with bridge method */
            @Override // java.util.Comparator
            public int compare(MemItem lhs, MemItem rhs) {
                long lss = pss ? lhs.pss : lhs.mRss;
                long rss = pss ? rhs.pss : rhs.mRss;
                if (lss < rss) {
                    return 1;
                }
                if (lss > rss) {
                    return -1;
                }
                return 0;
            }
        });
    }

    static final void dumpMemItems(PrintWriter pw, String prefix, String tag, ArrayList<MemItem> items, boolean sort, boolean isCompact, boolean dumpPss, boolean dumpSwapPss) {
        if (sort && !isCompact) {
            sortMemItems(items, dumpPss);
        }
        for (int i = 0; i < items.size(); i++) {
            MemItem mi = items.get(i);
            if (isCompact) {
                if (mi.isProc) {
                    pw.print("proc,");
                    pw.print(tag);
                    pw.print(",");
                    pw.print(mi.shortLabel);
                    pw.print(",");
                    pw.print(mi.id);
                    pw.print(",");
                    pw.print(dumpPss ? mi.pss : mi.mRss);
                    pw.print(",");
                    pw.print(dumpSwapPss ? Long.valueOf(mi.swapPss) : "N/A");
                    pw.println(mi.hasActivities ? ",a" : ",e");
                } else {
                    pw.print(tag);
                    pw.print(",");
                    pw.print(mi.shortLabel);
                    pw.print(",");
                    pw.print(dumpPss ? mi.pss : mi.mRss);
                    pw.print(",");
                    pw.println(dumpSwapPss ? Long.valueOf(mi.swapPss) : "N/A");
                }
            } else if (dumpPss && dumpSwapPss) {
                pw.printf("%s%s: %-60s (%s in swap)\n", prefix, stringifyKBSize(mi.pss), mi.label, stringifyKBSize(mi.swapPss));
            } else {
                Object[] objArr = new Object[3];
                objArr[0] = prefix;
                objArr[1] = stringifyKBSize(dumpPss ? mi.pss : mi.mRss);
                objArr[2] = mi.label;
                pw.printf("%s%s: %s\n", objArr);
            }
            if (mi.subitems != null) {
                dumpMemItems(pw, prefix + "    ", mi.shortLabel, mi.subitems, true, isCompact, dumpPss, dumpSwapPss);
            }
        }
    }

    static final void dumpMemItems(ProtoOutputStream proto, long fieldId, String tag, ArrayList<MemItem> items, boolean sort, boolean dumpPss, boolean dumpSwapPss) {
        if (sort) {
            sortMemItems(items, dumpPss);
        }
        for (int i = 0; i < items.size(); i++) {
            MemItem mi = items.get(i);
            long token = proto.start(fieldId);
            proto.write(CompanionAppsPermissions.AppPermissions.PACKAGE_NAME, tag);
            proto.write(1138166333442L, mi.shortLabel);
            proto.write(1133871366148L, mi.isProc);
            proto.write(1120986464259L, mi.id);
            proto.write(1133871366149L, mi.hasActivities);
            proto.write(1112396529670L, mi.pss);
            proto.write(1112396529673L, mi.mRss);
            if (dumpSwapPss) {
                proto.write(1112396529671L, mi.swapPss);
            }
            if (mi.subitems != null) {
                dumpMemItems(proto, 2246267895816L, mi.shortLabel, mi.subitems, true, dumpPss, dumpSwapPss);
            }
            proto.end(token);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static final void appendMemBucket(StringBuilder out, long memKB, String label, boolean stackLike) {
        int start = label.lastIndexOf(46);
        int start2 = start >= 0 ? start + 1 : 0;
        int end = label.length();
        int i = 0;
        while (true) {
            long[] jArr = DUMP_MEM_BUCKETS;
            if (i < jArr.length) {
                long j = jArr[i];
                if (j < memKB) {
                    i++;
                } else {
                    long bucket = j / GadgetFunction.NCM;
                    out.append(bucket);
                    out.append(stackLike ? "MB." : "MB ");
                    out.append((CharSequence) label, start2, end);
                    return;
                }
            } else {
                out.append(memKB / GadgetFunction.NCM);
                out.append(stackLike ? "MB." : "MB ");
                out.append((CharSequence) label, start2, end);
                return;
            }
        }
    }

    private final void dumpApplicationMemoryUsageHeader(PrintWriter pw, long uptime, long realtime, boolean isCheckinRequest, boolean isCompact) {
        if (isCompact) {
            pw.print("version,");
            pw.println(1);
        }
        if (isCheckinRequest || isCompact) {
            pw.print("time,");
            pw.print(uptime);
            pw.print(",");
            pw.println(realtime);
            return;
        }
        pw.println("Applications Memory Usage (in Kilobytes):");
        pw.println("Uptime: " + uptime + " Realtime: " + realtime);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static final long[] getKsmInfo() {
        int[] SINGLE_LONG_FORMAT = {8224};
        Process.readProcFile("/sys/kernel/mm/ksm/pages_shared", SINGLE_LONG_FORMAT, null, longTmp, null);
        long[] longTmp = {0};
        Process.readProcFile("/sys/kernel/mm/ksm/pages_sharing", SINGLE_LONG_FORMAT, null, longTmp, null);
        longTmp[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_unshared", SINGLE_LONG_FORMAT, null, longTmp, null);
        longTmp[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_volatile", SINGLE_LONG_FORMAT, null, longTmp, null);
        long[] longOut = {(longTmp[0] * 4096) / GadgetFunction.NCM, (longTmp[0] * 4096) / GadgetFunction.NCM, (longTmp[0] * 4096) / GadgetFunction.NCM, (longTmp[0] * 4096) / GadgetFunction.NCM};
        return longOut;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static String stringifySize(long size, int order) {
        Locale locale = Locale.US;
        switch (order) {
            case 1:
                return String.format(locale, "%,13d", Long.valueOf(size));
            case 1024:
                return String.format(locale, "%,9dK", Long.valueOf(size / GadgetFunction.NCM));
            case 1048576:
                return String.format(locale, "%,5dM", Long.valueOf((size / GadgetFunction.NCM) / GadgetFunction.NCM));
            case 1073741824:
                return String.format(locale, "%,1dG", Long.valueOf(((size / GadgetFunction.NCM) / GadgetFunction.NCM) / GadgetFunction.NCM));
            default:
                throw new IllegalArgumentException("Invalid size order");
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static String stringifyKBSize(long size) {
        return stringifySize(GadgetFunction.NCM * size, 1024);
    }

    /* JADX INFO: Access modifiers changed from: private */
    /* loaded from: classes.dex */
    public static class MemoryUsageDumpOptions {
        boolean dumpDalvik;
        boolean dumpDetails;
        boolean dumpFullDetails;
        boolean dumpProto;
        boolean dumpSummaryOnly;
        boolean dumpSwapPss;
        boolean dumpUnreachable;
        boolean isCheckinRequest;
        boolean isCompact;
        boolean localOnly;
        boolean oomOnly;
        boolean packages;

        private MemoryUsageDumpOptions() {
        }
    }

    @NeverCompile
    final void dumpApplicationMemoryUsage(FileDescriptor fd, PrintWriter pw, String prefix, String[] args, boolean brief, PrintWriter categoryPw, boolean asProto) {
        String opt;
        MemoryUsageDumpOptions opts = new MemoryUsageDumpOptions();
        opts.dumpDetails = false;
        opts.dumpFullDetails = false;
        opts.dumpDalvik = false;
        opts.dumpSummaryOnly = false;
        opts.dumpUnreachable = false;
        opts.oomOnly = false;
        opts.isCompact = false;
        opts.localOnly = false;
        opts.packages = false;
        opts.isCheckinRequest = false;
        opts.dumpSwapPss = false;
        opts.dumpProto = asProto;
        ITranActivityManagerService.Instance().dumpApplicationMemoryUsage();
        int opti = 0;
        while (opti < args.length && (opt = args[opti]) != null && opt.length() > 0 && opt.charAt(0) == '-') {
            opti++;
            if ("-a".equals(opt)) {
                opts.dumpDetails = true;
                opts.dumpFullDetails = true;
                opts.dumpDalvik = true;
                opts.dumpSwapPss = true;
            } else if ("-d".equals(opt)) {
                opts.dumpDalvik = true;
            } else if (!"-c".equals(opt)) {
                if (ITranActivityManagerService.Instance().DumpsysMeminfoCC(pw, opt)) {
                    opts.isCompact = true;
                } else if ("-s".equals(opt)) {
                    opts.dumpDetails = true;
                    opts.dumpSummaryOnly = true;
                } else if ("-S".equals(opt)) {
                    opts.dumpSwapPss = true;
                } else if ("--unreachable".equals(opt)) {
                    opts.dumpUnreachable = true;
                } else if ("--oom".equals(opt)) {
                    opts.oomOnly = true;
                } else if ("--local".equals(opt)) {
                    opts.localOnly = true;
                } else if ("--package".equals(opt)) {
                    opts.packages = true;
                } else if ("--checkin".equals(opt)) {
                    opts.isCheckinRequest = true;
                } else if ("--proto".equals(opt)) {
                    opts.dumpProto = true;
                } else if ("-h".equals(opt)) {
                    pw.println("meminfo dump options: [-a] [-d] [-c] [-s] [--oom] [process]");
                    pw.println("  -a: include all available information for each process.");
                    pw.println("  -d: include dalvik details.");
                    pw.println("  -c: dump in a compact machine-parseable representation.");
                    pw.println("  -s: dump only summary of application memory usage.");
                    pw.println("  -S: dump also SwapPss.");
                    pw.println("  --oom: only show processes organized by oom adj.");
                    pw.println("  --local: only collect details locally, don't call process.");
                    pw.println("  --package: interpret process arg as package, dumping all");
                    pw.println("             processes that have loaded that package.");
                    pw.println("  --checkin: dump data for a checkin");
                    pw.println("  --proto: dump data to proto");
                    pw.println("If [process] is specified it can be the name or ");
                    pw.println("pid of a specific process to dump.");
                    return;
                } else {
                    pw.println("Unknown argument: " + opt + "; use -h for help");
                }
            } else {
                opts.isCompact = true;
            }
        }
        String[] innerArgs = new String[args.length - opti];
        System.arraycopy(args, opti, innerArgs, 0, args.length - opti);
        ArrayList<ProcessRecord> procs = collectProcesses(pw, opti, opts.packages, args);
        if (opts.dumpProto) {
            dumpApplicationMemoryUsage(fd, opts, innerArgs, brief, procs);
        } else {
            dumpApplicationMemoryUsage(fd, pw, prefix, opts, innerArgs, brief, procs, categoryPw);
        }
    }

    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [12334=6, 12437=4] */
    /* JADX DEBUG: Incorrect finally slice size: {[MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, CONST] complete}, expected: {[MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE, MOVE] complete} */
    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:117:0x0332  */
    /* JADX WARN: Removed duplicated region for block: B:158:0x0425  */
    /* JADX WARN: Removed duplicated region for block: B:373:0x0c19  */
    /* JADX WARN: Removed duplicated region for block: B:374:0x0c62  */
    /* JADX WARN: Removed duplicated region for block: B:376:0x0c8a  */
    /* JADX WARN: Removed duplicated region for block: B:40:0x011c  */
    /* JADX WARN: Removed duplicated region for block: B:430:0x0454 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:444:0x011f A[SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r22v4 */
    /* JADX WARN: Type inference failed for: r22v5 */
    /* JADX WARN: Type inference failed for: r22v7 */
    @NeverCompile
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final void dumpApplicationMemoryUsage(FileDescriptor fd, PrintWriter pw, String prefix, final MemoryUsageDumpOptions opts, final String[] innerArgs, final boolean brief, ArrayList<ProcessRecord> procs, PrintWriter categoryPw) {
        PrintWriter printWriter;
        MemoryUsageDumpOptions memoryUsageDumpOptions;
        ActivityManagerService activityManagerService;
        ArrayList<MemItem> procMems;
        long[] ss;
        ?? r22;
        char c;
        char c2;
        PrintWriter printWriter2;
        ActivityManagerService activityManagerService2;
        ArrayList<MemItem> oomMems;
        MemoryUsageDumpOptions memoryUsageDumpOptions2;
        ArrayList<MemItem> catMems;
        char c3;
        MemoryUsageDumpOptions memoryUsageDumpOptions3;
        ActivityManagerService activityManagerService3;
        PrintWriter printWriter3;
        PrintWriter printWriter4;
        ActivityManagerService activityManagerService4;
        MemoryUsageDumpOptions memoryUsageDumpOptions4;
        long cachedPss;
        long kernelUsed;
        long kernelUsed2;
        long kernelUsed3;
        ActivityManagerService activityManagerService5;
        PrintWriter printWriter5;
        MemoryUsageDumpOptions memoryUsageDumpOptions5;
        int memItemStart;
        int memItemStart2;
        IApplicationThread thread;
        int pid;
        int oomAdj;
        boolean hasActivities;
        long[] memtrackTmp;
        long[] miscSwapPss;
        long[] miscPss;
        SparseArray<MemItem> procMemsMap;
        ArrayList<MemItem> procMems2;
        MemoryUsageDumpOptions memoryUsageDumpOptions6;
        long[] tmpLong;
        long[] oomRss;
        long[] miscRss;
        long[] dalvikSubitemPss;
        Debug.MemoryInfo mi;
        int pid2;
        long[] dalvikSubitemPss2;
        long endTime;
        long startTime;
        long memtrackGl;
        long memtrackGraphics;
        boolean hasSwapPss;
        int reportType;
        boolean hasSwapPss2;
        ArrayList<MemItem> procMems3;
        ActivityManagerService activityManagerService6;
        Debug.MemoryInfo mi2;
        long[] oomPss;
        char c4;
        int oomAdj2;
        TransferPipe tp;
        PrintWriter printWriter6;
        String proc;
        int findPid;
        MemoryUsageDumpOptions memoryUsageDumpOptions7;
        PrintWriter printWriter7;
        long[] tmpLong2;
        String proc2;
        PrintWriter printWriter8 = pw;
        MemoryUsageDumpOptions memoryUsageDumpOptions8 = opts;
        ArrayList<ProcessRecord> arrayList = procs;
        long uptime = SystemClock.uptimeMillis();
        long realtime = SystemClock.elapsedRealtime();
        long[] tmpLong3 = new long[3];
        if (arrayList == null) {
            String proc3 = "N/A";
            if (innerArgs.length > 0) {
                String proc4 = innerArgs[0];
                if (proc4.charAt(0) != '-') {
                    final ArrayList<ProcessCpuTracker.Stats> nativeProcs = new ArrayList<>();
                    updateCpuStatsNow();
                    try {
                        findPid = Integer.parseInt(innerArgs[0]);
                    } catch (NumberFormatException e) {
                        findPid = -1;
                    }
                    final int fFindPid = findPid;
                    this.mAppProfiler.forAllCpuStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda1
                        @Override // java.util.function.Consumer
                        public final void accept(Object obj) {
                            ActivityManagerService.lambda$dumpApplicationMemoryUsage$14(fFindPid, innerArgs, nativeProcs, (ProcessCpuTracker.Stats) obj);
                        }
                    });
                    if (nativeProcs.size() > 0) {
                        ArrayList<ProcessCpuTracker.Stats> nativeProcs2 = nativeProcs;
                        dumpApplicationMemoryUsageHeader(pw, uptime, realtime, memoryUsageDumpOptions8.isCheckinRequest, memoryUsageDumpOptions8.isCompact);
                        Debug.MemoryInfo mi3 = null;
                        int i = nativeProcs2.size() - 1;
                        while (i >= 0) {
                            ArrayList<ProcessCpuTracker.Stats> nativeProcs3 = nativeProcs2;
                            ProcessCpuTracker.Stats r = nativeProcs3.get(i);
                            int pid3 = r.pid;
                            if (mi3 == null) {
                                mi3 = new Debug.MemoryInfo();
                            }
                            if (memoryUsageDumpOptions8.dumpDetails || !(brief || memoryUsageDumpOptions8.oomOnly)) {
                                if (!Debug.getMemoryInfo(pid3, mi3)) {
                                    memoryUsageDumpOptions7 = memoryUsageDumpOptions8;
                                    printWriter7 = printWriter8;
                                    tmpLong2 = tmpLong3;
                                    proc2 = proc4;
                                }
                                if (!memoryUsageDumpOptions8.isCheckinRequest && memoryUsageDumpOptions8.dumpDetails) {
                                    printWriter8.println("\n** MEMINFO in pid " + pid3 + " [" + r.baseName + "] **");
                                }
                                tmpLong2 = tmpLong3;
                                proc2 = proc4;
                                memoryUsageDumpOptions7 = memoryUsageDumpOptions8;
                                printWriter7 = printWriter8;
                                ActivityThread.dumpMemInfoTable(pw, mi3, memoryUsageDumpOptions8.isCheckinRequest, memoryUsageDumpOptions8.dumpFullDetails, memoryUsageDumpOptions8.dumpDalvik, memoryUsageDumpOptions8.dumpSummaryOnly, pid3, r.baseName, 0L, 0L, 0L, 0L, 0L, 0L);
                                if (!memoryUsageDumpOptions7.isCheckinRequest) {
                                    pw.println();
                                }
                            } else {
                                long pss = Debug.getPss(pid3, tmpLong3, null);
                                if (pss == 0) {
                                    memoryUsageDumpOptions7 = memoryUsageDumpOptions8;
                                    printWriter7 = printWriter8;
                                    tmpLong2 = tmpLong3;
                                    proc2 = proc4;
                                } else {
                                    mi3.nativePss = (int) pss;
                                    mi3.nativePrivateDirty = (int) tmpLong3[0];
                                    mi3.nativeRss = (int) tmpLong3[2];
                                    if (!memoryUsageDumpOptions8.isCheckinRequest) {
                                        printWriter8.println("\n** MEMINFO in pid " + pid3 + " [" + r.baseName + "] **");
                                    }
                                    tmpLong2 = tmpLong3;
                                    proc2 = proc4;
                                    memoryUsageDumpOptions7 = memoryUsageDumpOptions8;
                                    printWriter7 = printWriter8;
                                    ActivityThread.dumpMemInfoTable(pw, mi3, memoryUsageDumpOptions8.isCheckinRequest, memoryUsageDumpOptions8.dumpFullDetails, memoryUsageDumpOptions8.dumpDalvik, memoryUsageDumpOptions8.dumpSummaryOnly, pid3, r.baseName, 0L, 0L, 0L, 0L, 0L, 0L);
                                    if (!memoryUsageDumpOptions7.isCheckinRequest) {
                                    }
                                }
                            }
                            i--;
                            arrayList = procs;
                            nativeProcs2 = nativeProcs3;
                            memoryUsageDumpOptions8 = memoryUsageDumpOptions7;
                            proc4 = proc2;
                            tmpLong3 = tmpLong2;
                            printWriter8 = printWriter7;
                        }
                        return;
                    }
                    printWriter6 = printWriter8;
                    proc = proc4;
                } else {
                    printWriter6 = printWriter8;
                    proc = proc4;
                }
                proc3 = proc;
            } else {
                printWriter6 = printWriter8;
            }
            printWriter6.println("No process found for: " + proc3);
            return;
        }
        if (!brief && !memoryUsageDumpOptions8.oomOnly && (procs.size() == 1 || memoryUsageDumpOptions8.isCheckinRequest || memoryUsageDumpOptions8.packages)) {
            memoryUsageDumpOptions8.dumpDetails = true;
        }
        int numProcs = procs.size();
        boolean collectNative = (memoryUsageDumpOptions8.isCheckinRequest || numProcs <= 1 || memoryUsageDumpOptions8.packages) ? false : true;
        if (collectNative) {
            updateCpuStatsNow();
        }
        boolean z = memoryUsageDumpOptions8.isCheckinRequest;
        boolean z2 = memoryUsageDumpOptions8.isCompact;
        MemoryUsageDumpOptions memoryUsageDumpOptions9 = memoryUsageDumpOptions8;
        long[] tmpLong4 = tmpLong3;
        dumpApplicationMemoryUsageHeader(pw, uptime, realtime, z, z2);
        ArrayList<MemItem> procMems4 = new ArrayList<>();
        SparseArray<MemItem> procMemsMap2 = new SparseArray<>();
        final long[] ss2 = new long[15];
        long[] dalvikSubitemPss3 = memoryUsageDumpOptions9.dumpDalvik ? new long[15] : EmptyArray.LONG;
        final long[] dalvikSubitemSwapPss = memoryUsageDumpOptions9.dumpDalvik ? new long[15] : EmptyArray.LONG;
        final long[] dalvikSubitemRss = memoryUsageDumpOptions9.dumpDalvik ? new long[15] : EmptyArray.LONG;
        long[] miscPss2 = new long[17];
        long[] miscSwapPss2 = new long[17];
        long[] miscRss2 = new long[17];
        long[] memtrackTmp2 = new long[4];
        String[] strArr = DUMP_MEM_OOM_LABEL;
        long[] oomPss2 = new long[strArr.length];
        long[] oomSwapPss = new long[strArr.length];
        long[] oomRss2 = new long[strArr.length];
        final ArrayList<MemItem>[] oomProcs = new ArrayList[strArr.length];
        Debug.MemoryInfo mi4 = null;
        boolean hasSwapPss3 = false;
        long cachedPss2 = 0;
        long cachedSwapPss = 0;
        int i2 = numProcs - 1;
        while (true) {
            final long[] oomSwapPss2 = oomSwapPss;
            if (i2 < 0) {
                final long[] memtrackTmp3 = memtrackTmp2;
                final long[] miscSwapPss3 = miscSwapPss2;
                final long[] miscPss3 = miscPss2;
                final ArrayList<MemItem> procMems5 = procMems4;
                MemoryUsageDumpOptions memoryUsageDumpOptions10 = memoryUsageDumpOptions9;
                final long[] miscRss3 = miscRss2;
                final long[] tmpLong5 = tmpLong4;
                final long[] oomRss3 = oomRss2;
                long cachedPss3 = cachedPss2;
                final long[] dalvikSubitemPss4 = dalvikSubitemPss3;
                final SparseArray<MemItem> procMemsMap3 = procMemsMap2;
                if (collectNative) {
                    final Debug.MemoryInfo[] memInfos = new Debug.MemoryInfo[1];
                    final long[] oomPss3 = oomPss2;
                    this.mAppProfiler.forAllCpuStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda3
                        @Override // java.util.function.Consumer
                        public final void accept(Object obj) {
                            ActivityManagerService.lambda$dumpApplicationMemoryUsage$16(procMemsMap3, memInfos, brief, opts, tmpLong5, memtrackTmp3, ss2, procMems5, dalvikSubitemPss4, dalvikSubitemSwapPss, dalvikSubitemRss, miscPss3, miscSwapPss3, miscRss3, oomPss3, oomSwapPss2, oomProcs, oomRss3, (ProcessCpuTracker.Stats) obj);
                        }
                    });
                    ArrayList<MemItem> catMems2 = new ArrayList<>();
                    catMems2.add(new MemItem("Native", "Native", ss2[0], ss2[1], ss2[2], -1));
                    catMems2.add(new MemItem("Dalvik", "Dalvik", ss2[3], ss2[4], ss2[5], -2));
                    catMems2.add(new MemItem("Unknown", "Unknown", ss2[6], ss2[7], ss2[8], -3));
                    for (int j = 0; j < 17; j++) {
                        String label = Debug.MemoryInfo.getOtherLabel(j);
                        catMems2.add(new MemItem(label, label, miscPss3[j], miscSwapPss3[j], miscRss3[j], j));
                    }
                    int j2 = dalvikSubitemPss4.length;
                    if (j2 > 0) {
                        Iterator<MemItem> it = catMems2.iterator();
                        while (it.hasNext()) {
                            MemItem memItem = it.next();
                            if (memItem.id == -2) {
                                memItemStart = 0;
                                memItemStart2 = 3;
                            } else {
                                int memItemStart3 = memItem.id;
                                if (memItemStart3 == 0) {
                                    memItemStart = 4;
                                    memItemStart2 = 9;
                                } else {
                                    int memItemStart4 = memItem.id;
                                    if (memItemStart4 == 10) {
                                        memItemStart = 10;
                                        memItemStart2 = 12;
                                    } else {
                                        int memItemStart5 = memItem.id;
                                        if (memItemStart5 == 12) {
                                            memItemStart = 13;
                                            memItemStart2 = 14;
                                        }
                                    }
                                }
                            }
                            memItem.subitems = new ArrayList<>();
                            for (int j3 = memItemStart; j3 <= memItemStart2; j3++) {
                                String name = Debug.MemoryInfo.getOtherLabel(j3 + 17);
                                memItem.subitems.add(new MemItem(name, name, dalvikSubitemPss4[j3], dalvikSubitemSwapPss[j3], dalvikSubitemRss[j3], j3));
                            }
                        }
                    }
                    ArrayList<MemItem> oomMems2 = new ArrayList<>();
                    int j4 = 0;
                    while (true) {
                        long[] oomPss4 = oomPss3;
                        if (j4 >= oomPss4.length) {
                            break;
                        }
                        if (oomPss4[j4] != 0) {
                            String label2 = memoryUsageDumpOptions10.isCompact ? DUMP_MEM_OOM_COMPACT_LABEL[j4] : DUMP_MEM_OOM_LABEL[j4];
                            MemItem item = new MemItem(label2, label2, oomPss4[j4], oomSwapPss2[j4], oomRss3[j4], DUMP_MEM_OOM_ADJ[j4]);
                            item.subitems = oomProcs[j4];
                            oomMems2.add(item);
                        }
                        j4++;
                        oomPss3 = oomPss4;
                    }
                    if (!memoryUsageDumpOptions10.isCompact) {
                        pw.println();
                    }
                    if (brief || memoryUsageDumpOptions10.oomOnly || memoryUsageDumpOptions10.isCompact) {
                        printWriter = pw;
                        memoryUsageDumpOptions = memoryUsageDumpOptions10;
                        activityManagerService = this;
                        procMems = procMems5;
                        ss = ss2;
                        r22 = 1;
                        c = 14;
                        c2 = '\n';
                    } else {
                        pw.println();
                        pw.println("Total RSS by process:");
                        r22 = 1;
                        memoryUsageDumpOptions = memoryUsageDumpOptions10;
                        c = 14;
                        c2 = '\n';
                        ss = ss2;
                        activityManagerService = this;
                        printWriter = pw;
                        procMems = procMems5;
                        dumpMemItems(pw, "  ", "proc", procMems5, true, memoryUsageDumpOptions10.isCompact, false, false);
                        pw.println();
                    }
                    if (!memoryUsageDumpOptions.isCompact) {
                        printWriter.println("Total RSS by OOM adjustment:");
                    }
                    dumpMemItems(pw, "  ", "oom", oomMems2, false, memoryUsageDumpOptions.isCompact, false, false);
                    if (brief || memoryUsageDumpOptions.oomOnly) {
                        printWriter2 = printWriter;
                        activityManagerService2 = activityManagerService;
                        oomMems = oomMems2;
                        memoryUsageDumpOptions2 = memoryUsageDumpOptions;
                        catMems = catMems2;
                        c3 = '\f';
                    } else {
                        PrintWriter out = categoryPw != null ? categoryPw : printWriter;
                        if (!memoryUsageDumpOptions.isCompact) {
                            out.println();
                            out.println("Total RSS by category:");
                        }
                        printWriter2 = printWriter;
                        activityManagerService2 = activityManagerService;
                        oomMems = oomMems2;
                        memoryUsageDumpOptions2 = memoryUsageDumpOptions;
                        c3 = '\f';
                        catMems = catMems2;
                        dumpMemItems(out, "  ", "cat", catMems2, true, memoryUsageDumpOptions.isCompact, false, false);
                    }
                    memoryUsageDumpOptions2.dumpSwapPss = (memoryUsageDumpOptions2.dumpSwapPss && hasSwapPss3 && ss[c2] != 0) ? r22 : false;
                    if (brief || memoryUsageDumpOptions2.oomOnly || memoryUsageDumpOptions2.isCompact) {
                        memoryUsageDumpOptions3 = memoryUsageDumpOptions2;
                        activityManagerService3 = activityManagerService2;
                        printWriter3 = printWriter2;
                    } else {
                        pw.println();
                        printWriter2.println("Total PSS by process:");
                        memoryUsageDumpOptions3 = memoryUsageDumpOptions2;
                        activityManagerService3 = activityManagerService2;
                        printWriter3 = printWriter2;
                        dumpMemItems(pw, "  ", "proc", procMems, true, memoryUsageDumpOptions2.isCompact, true, memoryUsageDumpOptions2.dumpSwapPss);
                        pw.println();
                    }
                    if (!memoryUsageDumpOptions3.isCompact) {
                        printWriter3.println("Total PSS by OOM adjustment:");
                    }
                    dumpMemItems(pw, "  ", "oom", oomMems, false, memoryUsageDumpOptions3.isCompact, true, memoryUsageDumpOptions3.dumpSwapPss);
                    if (brief || memoryUsageDumpOptions3.oomOnly) {
                        printWriter4 = printWriter3;
                        activityManagerService4 = activityManagerService3;
                        memoryUsageDumpOptions4 = memoryUsageDumpOptions3;
                    } else {
                        PrintWriter out2 = categoryPw != null ? categoryPw : printWriter3;
                        if (!memoryUsageDumpOptions3.isCompact) {
                            out2.println();
                            out2.println("Total PSS by category:");
                        }
                        printWriter4 = printWriter3;
                        activityManagerService4 = activityManagerService3;
                        memoryUsageDumpOptions4 = memoryUsageDumpOptions3;
                        dumpMemItems(out2, "  ", "cat", catMems, true, memoryUsageDumpOptions3.isCompact, true, memoryUsageDumpOptions3.dumpSwapPss);
                    }
                    if (!memoryUsageDumpOptions4.isCompact) {
                        pw.println();
                    }
                    MemInfoReader memInfo = new MemInfoReader();
                    memInfo.readMemInfo();
                    if (ss[c3] > 0) {
                        synchronized (activityManagerService4.mProcessStats.mLock) {
                            long cachedKb = memInfo.getCachedSizeKb();
                            long freeKb = memInfo.getFreeSizeKb();
                            long zramKb = memInfo.getZramTotalSizeKb();
                            long kernelKb = memInfo.getKernelUsedSizeKb();
                            EventLogTags.writeAmMeminfo(cachedKb * GadgetFunction.NCM, freeKb * GadgetFunction.NCM, zramKb * GadgetFunction.NCM, kernelKb * GadgetFunction.NCM, ss[c3] * GadgetFunction.NCM);
                            activityManagerService4.mProcessStats.addSysMemUsageLocked(cachedKb, freeKb, zramKb, kernelKb, ss[c3]);
                        }
                    }
                    if (brief) {
                        cachedPss = cachedPss3;
                    } else if (memoryUsageDumpOptions4.isCompact) {
                        cachedPss = cachedPss3;
                        if (!ITranActivityManagerService.Instance().doDumpPss(printWriter4, cachedPss, memInfo)) {
                            printWriter4.print("ram,");
                            printWriter4.print(memInfo.getTotalSizeKb());
                            printWriter4.print(",");
                            printWriter4.print(memInfo.getCachedSizeKb() + cachedPss + memInfo.getFreeSizeKb());
                            printWriter4.print(",");
                            printWriter4.println(ss[9] - cachedPss);
                        }
                    } else {
                        printWriter4.print("Total RAM: ");
                        printWriter4.print(stringifyKBSize(memInfo.getTotalSizeKb()));
                        printWriter4.print(" (status ");
                        activityManagerService4.mAppProfiler.dumpLastMemoryLevelLocked(printWriter4);
                        printWriter4.print(" Free RAM: ");
                        cachedPss = cachedPss3;
                        printWriter4.print(stringifyKBSize(memInfo.getCachedSizeKb() + cachedPss + memInfo.getFreeSizeKb()));
                        printWriter4.print(" (");
                        printWriter4.print(stringifyKBSize(cachedPss));
                        printWriter4.print(" cached pss + ");
                        printWriter4.print(stringifyKBSize(memInfo.getCachedSizeKb()));
                        printWriter4.print(" cached kernel + ");
                        printWriter4.print(stringifyKBSize(memInfo.getFreeSizeKb()));
                        printWriter4.println(" free)");
                    }
                    long kernelUsed4 = memInfo.getKernelUsedSizeKb();
                    long ionHeap = Debug.getIonHeapsSizeKb();
                    long ionPool = Debug.getIonPoolsSizeKb();
                    long dmabufMapped = Debug.getDmabufMappedSizeKb();
                    if (ionHeap < 0 || ionPool < 0) {
                        long totalExportedDmabuf = Debug.getDmabufTotalExportedKb();
                        if (totalExportedDmabuf >= 0) {
                            long dmabufUnmapped = totalExportedDmabuf - dmabufMapped;
                            printWriter4.print("DMA-BUF: ");
                            printWriter4.print(stringifyKBSize(totalExportedDmabuf));
                            printWriter4.print(" (");
                            printWriter4.print(stringifyKBSize(dmabufMapped));
                            printWriter4.print(" mapped + ");
                            printWriter4.print(stringifyKBSize(dmabufUnmapped));
                            printWriter4.println(" unmapped)");
                            kernelUsed4 += dmabufUnmapped;
                            ss[9] = ss[9] - ss[13];
                            ss[9] = ss[9] + dmabufMapped;
                        }
                        long totalDmabufHeapExported = Debug.getDmabufHeapTotalExportedKb();
                        if (totalDmabufHeapExported >= 0) {
                            printWriter4.print("DMA-BUF Heaps: ");
                            printWriter4.println(stringifyKBSize(totalDmabufHeapExported));
                        }
                        long totalDmabufHeapPool = Debug.getDmabufHeapPoolsSizeKb();
                        if (totalDmabufHeapPool >= 0) {
                            kernelUsed = kernelUsed4;
                            printWriter4.print("DMA-BUF Heaps pool: ");
                            printWriter4.println(stringifyKBSize(totalDmabufHeapPool));
                        } else {
                            kernelUsed = kernelUsed4;
                        }
                        kernelUsed2 = kernelUsed;
                    } else {
                        long ionUnmapped = ionHeap - dmabufMapped;
                        printWriter4.print("      ION: ");
                        printWriter4.print(stringifyKBSize(ionHeap + ionPool));
                        printWriter4.print(" (");
                        printWriter4.print(stringifyKBSize(dmabufMapped));
                        printWriter4.print(" mapped + ");
                        printWriter4.print(stringifyKBSize(ionUnmapped));
                        printWriter4.print(" unmapped + ");
                        printWriter4.print(stringifyKBSize(ionPool));
                        printWriter4.println(" pools)");
                        kernelUsed2 = kernelUsed4 + ionUnmapped;
                        ss[9] = ss[9] - ss[13];
                        ss[9] = ss[9] + dmabufMapped;
                    }
                    long gpuUsage = Debug.getGpuTotalUsageKb();
                    if (gpuUsage >= 0) {
                        long gpuPrivateUsage = Debug.getGpuPrivateMemoryKb();
                        if (gpuPrivateUsage >= 0) {
                            long gpuDmaBufUsage = gpuUsage - gpuPrivateUsage;
                            printWriter4.print("      GPU: ");
                            printWriter4.print(stringifyKBSize(gpuUsage));
                            printWriter4.print(" (");
                            printWriter4.print(stringifyKBSize(gpuDmaBufUsage));
                            printWriter4.print(" dmabuf + ");
                            printWriter4.print(stringifyKBSize(gpuPrivateUsage));
                            printWriter4.println(" private)");
                            ss[9] = ss[9] - ss[c];
                            kernelUsed3 = kernelUsed2 + gpuPrivateUsage;
                            long lostRAM = ((((memInfo.getTotalSizeKb() - (ss[9] - ss[c2])) - memInfo.getFreeSizeKb()) - memInfo.getCachedSizeKb()) - kernelUsed3) - memInfo.getZramTotalSizeKb();
                            if (memoryUsageDumpOptions4.isCompact) {
                                printWriter4.print(" Used RAM: ");
                                printWriter4.print(stringifyKBSize((ss[9] - cachedPss) + kernelUsed3));
                                printWriter4.print(" (");
                                printWriter4.print(stringifyKBSize(ss[9] - cachedPss));
                                printWriter4.print(" used pss + ");
                                printWriter4.print(stringifyKBSize(kernelUsed3));
                                printWriter4.print(" kernel)\n");
                                printWriter4.print(" Lost RAM: ");
                                printWriter4.println(stringifyKBSize(lostRAM));
                                activityManagerService5 = this;
                                memoryUsageDumpOptions5 = memoryUsageDumpOptions4;
                                printWriter5 = printWriter4;
                            } else {
                                long lostRAM2 = cachedPss;
                                activityManagerService5 = this;
                                printWriter5 = printWriter4;
                                memoryUsageDumpOptions5 = memoryUsageDumpOptions4;
                                ITranActivityManagerService.Instance().doDumpUsedPss(pw, ss, lostRAM2, 9, kernelUsed3);
                                printWriter5.print("lostram,");
                                printWriter5.println(lostRAM);
                            }
                            if (!brief) {
                                if (memInfo.getZramTotalSizeKb() != 0) {
                                    if (memoryUsageDumpOptions5.isCompact) {
                                        printWriter5.print("zram,");
                                        printWriter5.print(memInfo.getZramTotalSizeKb());
                                        printWriter5.print(",");
                                        printWriter5.print(memInfo.getSwapTotalSizeKb());
                                        printWriter5.print(",");
                                        printWriter5.println(memInfo.getSwapFreeSizeKb());
                                    } else {
                                        printWriter5.print("     ZRAM: ");
                                        printWriter5.print(stringifyKBSize(memInfo.getZramTotalSizeKb()));
                                        printWriter5.print(" physical used for ");
                                        printWriter5.print(stringifyKBSize(memInfo.getSwapTotalSizeKb() - memInfo.getSwapFreeSizeKb()));
                                        printWriter5.print(" in swap (");
                                        printWriter5.print(stringifyKBSize(memInfo.getSwapTotalSizeKb()));
                                        printWriter5.println(" total swap)");
                                    }
                                }
                                long[] ksm = getKsmInfo();
                                if (memoryUsageDumpOptions5.isCompact) {
                                    printWriter5.print("ksm,");
                                    printWriter5.print(ksm[r22]);
                                    printWriter5.print(",");
                                    printWriter5.print(ksm[0]);
                                    printWriter5.print(",");
                                    printWriter5.print(ksm[2]);
                                    printWriter5.print(",");
                                    printWriter5.println(ksm[3]);
                                    printWriter5.print("tuning,");
                                    printWriter5.print(ActivityManager.staticGetMemoryClass());
                                    printWriter5.print(',');
                                    printWriter5.print(ActivityManager.staticGetLargeMemoryClass());
                                    printWriter5.print(',');
                                    printWriter5.print(activityManagerService5.mProcessList.getMemLevel(999) / GadgetFunction.NCM);
                                    if (ActivityManager.isLowRamDeviceStatic()) {
                                        printWriter5.print(",low-ram");
                                    }
                                    if (ActivityManager.isHighEndGfx()) {
                                        printWriter5.print(",high-end-gfx");
                                    }
                                    pw.println();
                                } else {
                                    if (ksm[r22] != 0 || ksm[0] != 0 || ksm[2] != 0 || ksm[3] != 0) {
                                        printWriter5.print("      KSM: ");
                                        printWriter5.print(stringifyKBSize(ksm[r22]));
                                        printWriter5.print(" saved from shared ");
                                        printWriter5.print(stringifyKBSize(ksm[0]));
                                        printWriter5.print("           ");
                                        printWriter5.print(stringifyKBSize(ksm[2]));
                                        printWriter5.print(" unshared; ");
                                        printWriter5.print(stringifyKBSize(ksm[3]));
                                        printWriter5.println(" volatile");
                                    }
                                    printWriter5.print("   Tuning: ");
                                    printWriter5.print(ActivityManager.staticGetMemoryClass());
                                    printWriter5.print(" (large ");
                                    printWriter5.print(ActivityManager.staticGetLargeMemoryClass());
                                    printWriter5.print("), oom ");
                                    printWriter5.print(stringifySize(activityManagerService5.mProcessList.getMemLevel(999), 1024));
                                    printWriter5.print(", restore limit ");
                                    printWriter5.print(stringifyKBSize(activityManagerService5.mProcessList.getCachedRestoreThresholdKb()));
                                    if (ActivityManager.isLowRamDeviceStatic()) {
                                        printWriter5.print(" (low-ram)");
                                    }
                                    if (ActivityManager.isHighEndGfx()) {
                                        printWriter5.print(" (high-end-gfx)");
                                    }
                                    pw.println();
                                }
                            }
                            return;
                        }
                        printWriter4.print("      GPU: ");
                        printWriter4.println(stringifyKBSize(gpuUsage));
                    }
                    kernelUsed3 = kernelUsed2;
                    long lostRAM3 = ((((memInfo.getTotalSizeKb() - (ss[9] - ss[c2])) - memInfo.getFreeSizeKb()) - memInfo.getCachedSizeKb()) - kernelUsed3) - memInfo.getZramTotalSizeKb();
                    if (memoryUsageDumpOptions4.isCompact) {
                    }
                    if (!brief) {
                    }
                    return;
                }
                return;
            }
            int numProcs2 = numProcs;
            int i3 = i2;
            final ProcessRecord r2 = procs.get(i2);
            long[] miscRss4 = miscRss2;
            synchronized (this.mProcLock) {
                try {
                    boostPriorityForProcLockedSection();
                    thread = r2.getThread();
                    pid = r2.getPid();
                    oomAdj = r2.mState.getSetAdjWithServices();
                    hasActivities = r2.hasActivities();
                } catch (Throwable th) {
                    th = th;
                    while (true) {
                        try {
                            break;
                        } catch (Throwable th2) {
                            th = th2;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            if (thread != null) {
                if (mi4 == null) {
                    Debug.MemoryInfo mi5 = new Debug.MemoryInfo();
                    mi = mi5;
                } else {
                    mi = mi4;
                }
                if (memoryUsageDumpOptions9.dumpDetails) {
                    miscSwapPss = miscSwapPss2;
                    miscPss = miscPss2;
                    pid2 = pid;
                    dalvikSubitemPss2 = dalvikSubitemPss3;
                } else if (brief || memoryUsageDumpOptions9.oomOnly) {
                    long startTime2 = SystemClock.currentThreadTimeMillis();
                    miscSwapPss = miscSwapPss2;
                    miscPss = miscPss2;
                    pid2 = pid;
                    dalvikSubitemPss2 = dalvikSubitemPss3;
                    long pss2 = Debug.getPss(pid2, tmpLong4, memtrackTmp2);
                    if (pss2 == 0) {
                        memtrackTmp = memtrackTmp2;
                        procMemsMap = procMemsMap2;
                        procMems2 = procMems4;
                        memoryUsageDumpOptions6 = memoryUsageDumpOptions9;
                        mi4 = mi;
                        tmpLong = tmpLong4;
                        oomRss = oomRss2;
                        miscRss = miscRss4;
                        dalvikSubitemPss = dalvikSubitemPss2;
                    } else {
                        mi.dalvikPss = (int) pss2;
                        long endTime2 = SystemClock.currentThreadTimeMillis();
                        mi.dalvikPrivateDirty = (int) tmpLong4[0];
                        mi.dalvikRss = (int) tmpLong4[2];
                        long memtrackGraphics2 = memtrackTmp2[1];
                        long memtrackGl2 = memtrackTmp2[2];
                        memtrackGraphics = memtrackGraphics2;
                        memtrackGl = memtrackGl2;
                        startTime = startTime2;
                        reportType = 3;
                        endTime = endTime2;
                        hasSwapPss = hasSwapPss3;
                        if (memoryUsageDumpOptions9.isCheckinRequest && memoryUsageDumpOptions9.dumpDetails) {
                            hasSwapPss2 = hasSwapPss;
                            pw.println("\n** MEMINFO in pid " + pid2 + " [" + r2.processName + "] **");
                        } else {
                            hasSwapPss2 = hasSwapPss;
                        }
                        if (memoryUsageDumpOptions9.dumpDetails) {
                            memtrackTmp = memtrackTmp2;
                            procMemsMap = procMemsMap2;
                            procMems3 = procMems4;
                            memoryUsageDumpOptions6 = memoryUsageDumpOptions9;
                            activityManagerService6 = this;
                            mi2 = mi;
                            oomPss = oomPss2;
                            tmpLong = tmpLong4;
                            oomRss = oomRss2;
                            miscRss = miscRss4;
                            c4 = 3;
                        } else if (memoryUsageDumpOptions9.localOnly) {
                            mi2 = mi;
                            miscRss = miscRss4;
                            memtrackTmp = memtrackTmp2;
                            long[] memtrackTmp4 = oomPss2;
                            c4 = 3;
                            tmpLong = tmpLong4;
                            oomPss = memtrackTmp4;
                            oomRss = oomRss2;
                            memoryUsageDumpOptions6 = memoryUsageDumpOptions9;
                            procMemsMap = procMemsMap2;
                            activityManagerService6 = this;
                            ActivityThread.dumpMemInfoTable(pw, mi2, memoryUsageDumpOptions9.isCheckinRequest, memoryUsageDumpOptions9.dumpFullDetails, memoryUsageDumpOptions9.dumpDalvik, memoryUsageDumpOptions9.dumpSummaryOnly, pid2, r2.processName, 0L, 0L, 0L, 0L, 0L, 0L);
                            if (memoryUsageDumpOptions6.isCheckinRequest) {
                                pw.println();
                                procMems3 = procMems4;
                            } else {
                                procMems3 = procMems4;
                            }
                        } else {
                            memtrackTmp = memtrackTmp2;
                            procMemsMap = procMemsMap2;
                            memoryUsageDumpOptions6 = memoryUsageDumpOptions9;
                            activityManagerService6 = this;
                            mi2 = mi;
                            oomPss = oomPss2;
                            tmpLong = tmpLong4;
                            oomRss = oomRss2;
                            miscRss = miscRss4;
                            c4 = 3;
                            pw.flush();
                            try {
                                TransferPipe tp2 = new TransferPipe();
                                try {
                                    procMems3 = procMems4;
                                    tp = tp2;
                                    try {
                                        thread.dumpMemInfo(tp2.getWriteFd(), mi2, memoryUsageDumpOptions6.isCheckinRequest, memoryUsageDumpOptions6.dumpFullDetails, memoryUsageDumpOptions6.dumpDalvik, memoryUsageDumpOptions6.dumpSummaryOnly, memoryUsageDumpOptions6.dumpUnreachable, innerArgs);
                                        try {
                                            tp.go(fd, memoryUsageDumpOptions6.dumpUnreachable ? 30000L : 5000L);
                                        } catch (Throwable th3) {
                                            th = th3;
                                            tp.kill();
                                            throw th;
                                            break;
                                        }
                                    } catch (Throwable th4) {
                                        th = th4;
                                    }
                                } catch (Throwable th5) {
                                    th = th5;
                                    procMems3 = procMems4;
                                    tp = tp2;
                                }
                            } catch (RemoteException e2) {
                                e = e2;
                                procMems3 = procMems4;
                            } catch (IOException e3) {
                                e = e3;
                                procMems3 = procMems4;
                            }
                            try {
                                tp.kill();
                            } catch (RemoteException e4) {
                                e = e4;
                                if (!memoryUsageDumpOptions6.isCheckinRequest) {
                                    pw.println("Got RemoteException! " + e);
                                    pw.flush();
                                }
                                final long myTotalPss = mi2.getTotalPss();
                                final long myTotalUss = mi2.getTotalUss();
                                final long myTotalRss = mi2.getTotalRss();
                                int pid4 = pid2;
                                long myTotalSwapPss = mi2.getTotalSwappedOutPss();
                                synchronized (activityManagerService6.mProcLock) {
                                }
                            } catch (IOException e5) {
                                e = e5;
                                if (!memoryUsageDumpOptions6.isCheckinRequest) {
                                    pw.println("Got IoException! " + e);
                                    pw.flush();
                                }
                                final long myTotalPss2 = mi2.getTotalPss();
                                final long myTotalUss2 = mi2.getTotalUss();
                                final long myTotalRss2 = mi2.getTotalRss();
                                int pid42 = pid2;
                                long myTotalSwapPss2 = mi2.getTotalSwappedOutPss();
                                synchronized (activityManagerService6.mProcLock) {
                                }
                            }
                        }
                        final long myTotalPss22 = mi2.getTotalPss();
                        final long myTotalUss22 = mi2.getTotalUss();
                        final long myTotalRss22 = mi2.getTotalRss();
                        int pid422 = pid2;
                        long myTotalSwapPss22 = mi2.getTotalSwappedOutPss();
                        synchronized (activityManagerService6.mProcLock) {
                            try {
                                boostPriorityForProcLockedSection();
                                if (r2.getThread() != null) {
                                    try {
                                        if (oomAdj == r2.mState.getSetAdjWithServices()) {
                                            try {
                                                r2.mProfile.addPss(myTotalPss22, myTotalUss22, myTotalRss22, true, reportType, endTime - startTime);
                                                oomAdj2 = oomAdj;
                                            } catch (Throwable th6) {
                                                th = th6;
                                            }
                                            try {
                                                final int i4 = reportType;
                                                final long j5 = endTime;
                                                final long j6 = startTime;
                                                r2.getPkgList().forEachPackageProcessStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda2
                                                    @Override // java.util.function.Consumer
                                                    public final void accept(Object obj) {
                                                        FrameworkStatsLog.write(18, r0.info.uid, r12.state.getName(), r12.state.getPackage(), myTotalPss22, myTotalUss22, myTotalRss22, i4, j5 - j6, ((ProcessStats.ProcessStateHolder) obj).appVersion, r0.mProfile.getCurrentHostingComponentTypes(), ProcessRecord.this.mProfile.getHistoricalHostingComponentTypes());
                                                    }
                                                });
                                            } catch (Throwable th7) {
                                                th = th7;
                                                while (true) {
                                                    try {
                                                        break;
                                                    } catch (Throwable th8) {
                                                        th = th8;
                                                    }
                                                }
                                                resetPriorityAfterProcLockedSection();
                                                throw th;
                                            }
                                        } else {
                                            oomAdj2 = oomAdj;
                                        }
                                    } catch (Throwable th9) {
                                        th = th9;
                                    }
                                } else {
                                    oomAdj2 = oomAdj;
                                }
                            } catch (Throwable th10) {
                                th = th10;
                            }
                            try {
                            } catch (Throwable th11) {
                                th = th11;
                                while (true) {
                                    break;
                                    break;
                                }
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                        resetPriorityAfterProcLockedSection();
                        if (memoryUsageDumpOptions6.isCheckinRequest || mi2 == null) {
                            dalvikSubitemPss = dalvikSubitemPss2;
                            oomPss2 = oomPss;
                            procMems2 = procMems3;
                            mi4 = mi2;
                            cachedPss2 = cachedPss2;
                            hasSwapPss3 = hasSwapPss2;
                        } else {
                            ss2[9] = ss2[9] + myTotalPss22;
                            ss2[10] = ss2[10] + myTotalSwapPss22;
                            ss2[11] = ss2[11] + myTotalRss22;
                            ss2[13] = ss2[13] + memtrackGraphics;
                            ss2[14] = ss2[14] + memtrackGl;
                            MemItem pssItem = new MemItem(r2.processName + " (pid " + pid422 + (hasActivities ? " / activities)" : ")"), r2.processName, myTotalPss22, myTotalSwapPss22, myTotalRss22, pid422, hasActivities);
                            procMems2 = procMems3;
                            procMems2.add(pssItem);
                            procMemsMap.put(pid422, pssItem);
                            ss2[0] = ss2[0] + mi2.nativePss;
                            ss2[1] = ss2[1] + mi2.nativeSwappedOutPss;
                            ss2[2] = ss2[2] + mi2.nativeRss;
                            ss2[c4] = ss2[c4] + mi2.dalvikPss;
                            ss2[4] = ss2[4] + mi2.dalvikSwappedOutPss;
                            ss2[5] = ss2[5] + mi2.dalvikRss;
                            int j7 = 0;
                            while (true) {
                                dalvikSubitemPss = dalvikSubitemPss2;
                                if (j7 >= dalvikSubitemPss.length) {
                                    break;
                                }
                                dalvikSubitemPss[j7] = dalvikSubitemPss[j7] + mi2.getOtherPss(j7 + 17);
                                dalvikSubitemSwapPss[j7] = dalvikSubitemSwapPss[j7] + mi2.getOtherSwappedOutPss(j7 + 17);
                                dalvikSubitemRss[j7] = dalvikSubitemRss[j7] + mi2.getOtherRss(j7 + 17);
                                j7++;
                                dalvikSubitemPss2 = dalvikSubitemPss;
                                myTotalRss22 = myTotalRss22;
                            }
                            long myTotalRss3 = myTotalRss22;
                            ss2[6] = ss2[6] + mi2.otherPss;
                            ss2[8] = ss2[8] + mi2.otherRss;
                            ss2[7] = ss2[7] + mi2.otherSwappedOutPss;
                            for (int j8 = 0; j8 < 17; j8++) {
                                long mem = mi2.getOtherPss(j8);
                                miscPss[j8] = miscPss[j8] + mem;
                                ss2[6] = ss2[6] - mem;
                                long mem2 = mi2.getOtherSwappedOutPss(j8);
                                miscSwapPss[j8] = miscSwapPss[j8] + mem2;
                                ss2[7] = ss2[7] - mem2;
                                long mem3 = mi2.getOtherRss(j8);
                                miscRss[j8] = miscRss[j8] + mem3;
                                ss2[8] = ss2[8] - mem3;
                            }
                            int oomAdj3 = oomAdj2;
                            if (oomAdj3 >= 900) {
                                cachedPss2 += myTotalPss22;
                                cachedSwapPss += myTotalSwapPss22;
                            }
                            int oomIndex = 0;
                            while (true) {
                                oomPss2 = oomPss;
                                if (oomIndex >= oomPss2.length) {
                                    break;
                                }
                                if (oomIndex == oomPss2.length - 1) {
                                    break;
                                }
                                int[] iArr = DUMP_MEM_OOM_ADJ;
                                if (oomAdj3 >= iArr[oomIndex] && oomAdj3 < iArr[oomIndex + 1]) {
                                    break;
                                }
                                oomIndex++;
                                oomPss = oomPss2;
                            }
                            oomPss2[oomIndex] = oomPss2[oomIndex] + myTotalPss22;
                            oomSwapPss2[oomIndex] = oomSwapPss2[oomIndex] + myTotalSwapPss22;
                            if (oomProcs[oomIndex] == null) {
                                oomProcs[oomIndex] = new ArrayList<>();
                            }
                            oomProcs[oomIndex].add(pssItem);
                            oomRss[oomIndex] = oomRss[oomIndex] + myTotalRss3;
                            mi4 = mi2;
                            hasSwapPss3 = hasSwapPss2;
                        }
                    }
                } else {
                    miscSwapPss = miscSwapPss2;
                    miscPss = miscPss2;
                    pid2 = pid;
                    dalvikSubitemPss2 = dalvikSubitemPss3;
                }
                long startTime3 = SystemClock.currentThreadTimeMillis();
                if (Debug.getMemoryInfo(pid2, mi)) {
                    long endTime3 = SystemClock.currentThreadTimeMillis();
                    boolean hasSwapPss4 = mi.hasSwappedOutPss;
                    long memtrackGraphics3 = mi.getOtherPrivate(14);
                    memtrackGl = mi.getOtherPrivate(15);
                    memtrackGraphics = memtrackGraphics3;
                    startTime = startTime3;
                    reportType = 4;
                    endTime = endTime3;
                    hasSwapPss = hasSwapPss4;
                    if (memoryUsageDumpOptions9.isCheckinRequest) {
                    }
                    hasSwapPss2 = hasSwapPss;
                    if (memoryUsageDumpOptions9.dumpDetails) {
                    }
                    final long myTotalPss222 = mi2.getTotalPss();
                    final long myTotalUss222 = mi2.getTotalUss();
                    final long myTotalRss222 = mi2.getTotalRss();
                    int pid4222 = pid2;
                    long myTotalSwapPss222 = mi2.getTotalSwappedOutPss();
                    synchronized (activityManagerService6.mProcLock) {
                    }
                }
                memtrackTmp = memtrackTmp2;
                procMemsMap = procMemsMap2;
                procMems2 = procMems4;
                memoryUsageDumpOptions6 = memoryUsageDumpOptions9;
                mi4 = mi;
                tmpLong = tmpLong4;
                oomRss = oomRss2;
                miscRss = miscRss4;
                dalvikSubitemPss = dalvikSubitemPss2;
            } else {
                memtrackTmp = memtrackTmp2;
                miscSwapPss = miscSwapPss2;
                miscPss = miscPss2;
                procMemsMap = procMemsMap2;
                procMems2 = procMems4;
                memoryUsageDumpOptions6 = memoryUsageDumpOptions9;
                tmpLong = tmpLong4;
                oomRss = oomRss2;
                miscRss = miscRss4;
                dalvikSubitemPss = dalvikSubitemPss3;
            }
            memoryUsageDumpOptions9 = memoryUsageDumpOptions6;
            procMems4 = procMems2;
            dalvikSubitemPss3 = dalvikSubitemPss;
            oomSwapPss = oomSwapPss2;
            numProcs = numProcs2;
            miscSwapPss2 = miscSwapPss;
            miscPss2 = miscPss;
            miscRss2 = miscRss;
            memtrackTmp2 = memtrackTmp;
            tmpLong4 = tmpLong;
            oomRss2 = oomRss;
            procMemsMap2 = procMemsMap;
            i2 = i3 - 1;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ void lambda$dumpApplicationMemoryUsage$14(int fFindPid, String[] innerArgs, ArrayList nativeProcs, ProcessCpuTracker.Stats st) {
        if (st.pid == fFindPid || (st.baseName != null && st.baseName.equals(innerArgs[0]))) {
            nativeProcs.add(st);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* JADX WARN: Removed duplicated region for block: B:25:0x0131 A[LOOP:0: B:23:0x012e->B:25:0x0131, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:29:0x0179 A[LOOP:1: B:27:0x0175->B:29:0x0179, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:32:0x01bf  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public static /* synthetic */ void lambda$dumpApplicationMemoryUsage$16(SparseArray procMemsMap, Debug.MemoryInfo[] memInfos, boolean brief, MemoryUsageDumpOptions opts, long[] tmpLong, long[] memtrackTmp, long[] ss, ArrayList procMems, long[] dalvikSubitemPss, long[] dalvikSubitemSwapPss, long[] dalvikSubitemRss, long[] miscPss, long[] miscSwapPss, long[] miscRss, long[] oomPss, long[] oomSwapPss, ArrayList[] oomProcs, long[] oomRss, ProcessCpuTracker.Stats st) {
        long memtrackGraphics;
        long memtrackGl;
        int j;
        int j2;
        if (st.vsize > 0 && procMemsMap.indexOfKey(st.pid) < 0) {
            if (memInfos[0] == null) {
                memInfos[0] = new Debug.MemoryInfo();
            }
            Debug.MemoryInfo info = memInfos[0];
            if (!brief && !opts.oomOnly) {
                if (!Debug.getMemoryInfo(st.pid, info)) {
                    return;
                }
                long memtrackGraphics2 = info.getOtherPrivate(14);
                memtrackGl = info.getOtherPrivate(15);
                memtrackGraphics = memtrackGraphics2;
                long myTotalPss = info.getTotalPss();
                long myTotalSwapPss = info.getTotalSwappedOutPss();
                long myTotalRss = info.getTotalRss();
                ss[9] = ss[9] + myTotalPss;
                ss[10] = ss[10] + myTotalSwapPss;
                ss[11] = ss[11] + myTotalRss;
                ss[12] = ss[12] + myTotalPss;
                ss[13] = ss[13] + memtrackGraphics;
                ss[14] = ss[14] + memtrackGl;
                String str = st.name;
                long memtrackGl2 = info.getSummaryTotalSwapPss();
                MemItem pssItem = new MemItem(st.name + " (pid " + st.pid + ")", str, myTotalPss, memtrackGl2, myTotalRss, st.pid, false);
                procMems.add(pssItem);
                ss[0] = ss[0] + info.nativePss;
                ss[1] = ss[1] + info.nativeSwappedOutPss;
                ss[2] = ss[2] + info.nativeRss;
                ss[3] = ss[3] + info.dalvikPss;
                ss[4] = ss[4] + info.dalvikSwappedOutPss;
                ss[5] = ss[5] + info.dalvikRss;
                for (j = 0; j < dalvikSubitemPss.length; j++) {
                    dalvikSubitemPss[j] = dalvikSubitemPss[j] + info.getOtherPss(j + 17);
                    dalvikSubitemSwapPss[j] = dalvikSubitemSwapPss[j] + info.getOtherSwappedOutPss(j + 17);
                    dalvikSubitemRss[j] = dalvikSubitemRss[j] + info.getOtherRss(j + 17);
                }
                ss[6] = ss[6] + info.otherPss;
                ss[7] = ss[7] + info.otherSwappedOutPss;
                ss[8] = ss[8] + info.otherRss;
                for (j2 = 0; j2 < 17; j2++) {
                    long mem = info.getOtherPss(j2);
                    miscPss[j2] = miscPss[j2] + mem;
                    ss[6] = ss[6] - mem;
                    long mem2 = info.getOtherSwappedOutPss(j2);
                    miscSwapPss[j2] = miscSwapPss[j2] + mem2;
                    ss[7] = ss[7] - mem2;
                    long mem3 = info.getOtherRss(j2);
                    miscRss[j2] = miscRss[j2] + mem3;
                    ss[8] = ss[8] - mem3;
                }
                oomPss[0] = oomPss[0] + myTotalPss;
                oomSwapPss[0] = oomSwapPss[0] + myTotalSwapPss;
                if (oomProcs[0] == null) {
                    oomProcs[0] = new ArrayList();
                }
                oomProcs[0].add(pssItem);
                oomRss[0] = oomRss[0] + myTotalRss;
            }
            long pss = Debug.getPss(st.pid, tmpLong, memtrackTmp);
            if (pss == 0) {
                return;
            }
            info.nativePss = (int) pss;
            info.nativePrivateDirty = (int) tmpLong[0];
            info.nativeRss = (int) tmpLong[2];
            memtrackGraphics = memtrackTmp[1];
            memtrackGl = memtrackTmp[2];
            long myTotalPss2 = info.getTotalPss();
            long myTotalSwapPss2 = info.getTotalSwappedOutPss();
            long myTotalRss2 = info.getTotalRss();
            ss[9] = ss[9] + myTotalPss2;
            ss[10] = ss[10] + myTotalSwapPss2;
            ss[11] = ss[11] + myTotalRss2;
            ss[12] = ss[12] + myTotalPss2;
            ss[13] = ss[13] + memtrackGraphics;
            ss[14] = ss[14] + memtrackGl;
            String str2 = st.name;
            long memtrackGl22 = info.getSummaryTotalSwapPss();
            MemItem pssItem2 = new MemItem(st.name + " (pid " + st.pid + ")", str2, myTotalPss2, memtrackGl22, myTotalRss2, st.pid, false);
            procMems.add(pssItem2);
            ss[0] = ss[0] + info.nativePss;
            ss[1] = ss[1] + info.nativeSwappedOutPss;
            ss[2] = ss[2] + info.nativeRss;
            ss[3] = ss[3] + info.dalvikPss;
            ss[4] = ss[4] + info.dalvikSwappedOutPss;
            ss[5] = ss[5] + info.dalvikRss;
            while (j < dalvikSubitemPss.length) {
            }
            ss[6] = ss[6] + info.otherPss;
            ss[7] = ss[7] + info.otherSwappedOutPss;
            ss[8] = ss[8] + info.otherRss;
            while (j2 < 17) {
            }
            oomPss[0] = oomPss[0] + myTotalPss2;
            oomSwapPss[0] = oomSwapPss[0] + myTotalSwapPss2;
            if (oomProcs[0] == null) {
            }
            oomProcs[0].add(pssItem2);
            oomRss[0] = oomRss[0] + myTotalRss2;
        }
    }

    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [13003=5, 13094=4] */
    /* JADX DEBUG: Failed to insert an additional move for type inference into block B:124:0x0405 */
    /* JADX DEBUG: Failed to insert an additional move for type inference into block B:126:0x0407 */
    /* JADX DEBUG: Failed to insert an additional move for type inference into block B:327:? */
    /* JADX WARN: Code restructure failed: missing block: B:187:0x0668, code lost:
        r5[r1] = r5[r1] + r2;
        r50[r1] = r50[r1] + r8;
     */
    /* JADX WARN: Code restructure failed: missing block: B:188:0x0674, code lost:
        if (r64[r1] != null) goto L149;
     */
    /* JADX WARN: Code restructure failed: missing block: B:189:0x0676, code lost:
        r64[r1] = new java.util.ArrayList<>();
     */
    /* JADX WARN: Code restructure failed: missing block: B:190:0x067d, code lost:
        r64[r1].add(r0);
        r51[r1] = r51[r1] + r6;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:108:0x0305  */
    /* JADX WARN: Removed duplicated region for block: B:135:0x0463  */
    /* JADX WARN: Removed duplicated region for block: B:302:0x04a0 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r44v1 */
    /* JADX WARN: Type inference failed for: r44v12 */
    /* JADX WARN: Type inference failed for: r44v16 */
    /* JADX WARN: Type inference failed for: r44v17 */
    /* JADX WARN: Type inference failed for: r44v18 */
    /* JADX WARN: Type inference failed for: r44v2 */
    @NeverCompile
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    private final void dumpApplicationMemoryUsage(FileDescriptor fd, final MemoryUsageDumpOptions opts, final String[] innerArgs, final boolean brief, ArrayList<ProcessRecord> procs) {
        int i;
        ProtoOutputStream proto;
        ActivityManagerService activityManagerService;
        long cachedPss;
        int memItemStart;
        int memItemEnd;
        IApplicationThread thread;
        int pid;
        int oomAdj;
        boolean hasActivities;
        Debug.MemoryInfo mi;
        long realtimeMs;
        long[] ss;
        int pid2;
        boolean z;
        long endTime;
        long startTime;
        boolean hasSwapPss;
        int reportType;
        Debug.MemoryInfo mi2;
        long[] oomPss;
        long[] tmpLong;
        ?? r44;
        int i2;
        long[] miscPss;
        long[] dalvikSubitemPss;
        long[] dalvikSubitemPss2;
        long[] oomSwapPss;
        long realtimeMs2;
        char c;
        SparseArray<MemItem> procMemsMap;
        ArrayList<MemItem> procMems;
        ProtoOutputStream proto2;
        int oomAdj2;
        Debug.MemoryInfo mi3;
        long[] dalvikSubitemPss3;
        long cachedPss2;
        long[] oomPss2;
        boolean z2;
        ByteTransferPipe tp;
        String proc;
        long realtimeMs3;
        long[] tmpLong2;
        ArrayList<ProcessCpuTracker.Stats> nativeProcs;
        long uptimeMs;
        final ActivityManagerService activityManagerService2 = this;
        MemoryUsageDumpOptions memoryUsageDumpOptions = opts;
        ArrayList<ProcessRecord> arrayList = procs;
        long uptimeMs2 = SystemClock.uptimeMillis();
        long realtimeMs4 = SystemClock.elapsedRealtime();
        long[] tmpLong3 = new long[3];
        if (arrayList == null) {
            if (innerArgs.length > 0) {
                String proc2 = innerArgs[0];
                if (proc2.charAt(0) != '-') {
                    final ArrayList<ProcessCpuTracker.Stats> nativeProcs2 = new ArrayList<>();
                    updateCpuStatsNow();
                    int findPid = -1;
                    try {
                        findPid = Integer.parseInt(innerArgs[0]);
                    } catch (NumberFormatException e) {
                    }
                    final int fFindPid = findPid;
                    activityManagerService2.mAppProfiler.forAllCpuStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda30
                        @Override // java.util.function.Consumer
                        public final void accept(Object obj) {
                            ActivityManagerService.this.m1045xc9212553(fFindPid, innerArgs, nativeProcs2, (ProcessCpuTracker.Stats) obj);
                        }
                    });
                    if (nativeProcs2.size() > 0) {
                        ProtoOutputStream proto3 = new ProtoOutputStream(fd);
                        proto3.write(1112396529665L, uptimeMs2);
                        proto3.write(1112396529666L, realtimeMs4);
                        Debug.MemoryInfo mi4 = null;
                        int i3 = nativeProcs2.size() - 1;
                        while (i3 >= 0) {
                            ProcessCpuTracker.Stats r = nativeProcs2.get(i3);
                            int fFindPid2 = fFindPid;
                            int fFindPid3 = r.pid;
                            if (mi4 == null) {
                                mi4 = new Debug.MemoryInfo();
                            }
                            String proc3 = proc2;
                            if (memoryUsageDumpOptions.dumpDetails) {
                                realtimeMs3 = realtimeMs4;
                                tmpLong2 = tmpLong3;
                                nativeProcs = nativeProcs2;
                            } else if (brief || memoryUsageDumpOptions.oomOnly) {
                                realtimeMs3 = realtimeMs4;
                                tmpLong2 = tmpLong3;
                                nativeProcs = nativeProcs2;
                                long pss = Debug.getPss(fFindPid3, tmpLong2, null);
                                if (pss == 0) {
                                    uptimeMs = uptimeMs2;
                                    i3--;
                                    nativeProcs2 = nativeProcs;
                                    fFindPid = fFindPid2;
                                    realtimeMs4 = realtimeMs3;
                                    uptimeMs2 = uptimeMs;
                                    tmpLong3 = tmpLong2;
                                    proc2 = proc3;
                                } else {
                                    mi4.nativePss = (int) pss;
                                    mi4.nativePrivateDirty = (int) tmpLong2[0];
                                    mi4.nativeRss = (int) tmpLong2[2];
                                    long nToken = proto3.start(2246267895811L);
                                    uptimeMs = uptimeMs2;
                                    proto3.write(CompanionMessage.MESSAGE_ID, fFindPid3);
                                    proto3.write(1138166333442L, r.baseName);
                                    ActivityThread.dumpMemInfoTable(proto3, mi4, memoryUsageDumpOptions.dumpDalvik, memoryUsageDumpOptions.dumpSummaryOnly, 0L, 0L, 0L, 0L, 0L, 0L);
                                    proto3.end(nToken);
                                    i3--;
                                    nativeProcs2 = nativeProcs;
                                    fFindPid = fFindPid2;
                                    realtimeMs4 = realtimeMs3;
                                    uptimeMs2 = uptimeMs;
                                    tmpLong3 = tmpLong2;
                                    proc2 = proc3;
                                }
                            } else {
                                realtimeMs3 = realtimeMs4;
                                tmpLong2 = tmpLong3;
                                nativeProcs = nativeProcs2;
                            }
                            if (!Debug.getMemoryInfo(fFindPid3, mi4)) {
                                uptimeMs = uptimeMs2;
                                i3--;
                                nativeProcs2 = nativeProcs;
                                fFindPid = fFindPid2;
                                realtimeMs4 = realtimeMs3;
                                uptimeMs2 = uptimeMs;
                                tmpLong3 = tmpLong2;
                                proc2 = proc3;
                            }
                            long nToken2 = proto3.start(2246267895811L);
                            uptimeMs = uptimeMs2;
                            proto3.write(CompanionMessage.MESSAGE_ID, fFindPid3);
                            proto3.write(1138166333442L, r.baseName);
                            ActivityThread.dumpMemInfoTable(proto3, mi4, memoryUsageDumpOptions.dumpDalvik, memoryUsageDumpOptions.dumpSummaryOnly, 0L, 0L, 0L, 0L, 0L, 0L);
                            proto3.end(nToken2);
                            i3--;
                            nativeProcs2 = nativeProcs;
                            fFindPid = fFindPid2;
                            realtimeMs4 = realtimeMs3;
                            uptimeMs2 = uptimeMs;
                            tmpLong3 = tmpLong2;
                            proc2 = proc3;
                        }
                        proto3.flush();
                        return;
                    }
                    proc = proc2;
                } else {
                    proc = proc2;
                }
            }
            Log.d(TAG, "No process found for: " + innerArgs[0]);
            return;
        }
        long[] tmpLong4 = tmpLong3;
        if (brief || memoryUsageDumpOptions.oomOnly) {
            i = 1;
        } else if (procs.size() == 1 || memoryUsageDumpOptions.isCheckinRequest || memoryUsageDumpOptions.packages) {
            i = 1;
            memoryUsageDumpOptions.dumpDetails = true;
        } else {
            i = 1;
        }
        int numProcs = procs.size();
        int i4 = (numProcs <= i || memoryUsageDumpOptions.packages) ? 0 : i;
        if (i4 != 0) {
            updateCpuStatsNow();
        }
        ProtoOutputStream proto4 = new ProtoOutputStream(fd);
        proto4.write(1112396529665L, uptimeMs2);
        long realtimeMs5 = realtimeMs4;
        proto4.write(1112396529666L, realtimeMs5);
        ArrayList<MemItem> procMems2 = new ArrayList<>();
        SparseArray<MemItem> procMemsMap2 = new SparseArray<>();
        long[] ss2 = new long[15];
        long[] dalvikSubitemPss4 = memoryUsageDumpOptions.dumpDalvik ? new long[15] : EmptyArray.LONG;
        final long[] dalvikSubitemSwapPss = memoryUsageDumpOptions.dumpDalvik ? new long[15] : EmptyArray.LONG;
        final long[] dalvikSubitemRss = memoryUsageDumpOptions.dumpDalvik ? new long[15] : EmptyArray.LONG;
        long[] miscPss2 = new long[17];
        final long[] miscSwapPss = new long[17];
        final long[] miscSwapPss2 = new long[17];
        String[] strArr = DUMP_MEM_OOM_LABEL;
        long[] oomPss3 = new long[strArr.length];
        long[] oomSwapPss2 = dalvikSubitemPss4;
        long[] oomSwapPss3 = new long[strArr.length];
        long[] oomRss = oomSwapPss3;
        long[] oomRss2 = new long[strArr.length];
        ArrayList<MemItem>[] oomProcs = new ArrayList[strArr.length];
        Debug.MemoryInfo mi5 = null;
        boolean hasSwapPss2 = false;
        long cachedPss3 = 0;
        long cachedSwapPss = 0;
        int numProcs2 = numProcs - 1;
        while (true) {
            final ArrayList<MemItem>[] oomProcs2 = oomProcs;
            if (numProcs2 < 0) {
                final long[] tmpLong5 = tmpLong4;
                final long[] ss3 = ss2;
                ProtoOutputStream proto5 = proto4;
                final long[] miscPss3 = miscPss2;
                final long[] dalvikSubitemPss5 = oomSwapPss2;
                final long[] dalvikSubitemPss6 = oomRss;
                long cachedPss4 = cachedPss3;
                final long[] oomSwapPss4 = oomRss2;
                long[] oomPss4 = oomPss3;
                final SparseArray<MemItem> procMemsMap3 = procMemsMap2;
                final ArrayList<MemItem> procMems3 = procMems2;
                if (i4 != 0) {
                    final Debug.MemoryInfo[] memInfos = new Debug.MemoryInfo[1];
                    final long[] oomPss5 = oomPss4;
                    this.mAppProfiler.forAllCpuStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda32
                        @Override // java.util.function.Consumer
                        public final void accept(Object obj) {
                            ActivityManagerService.this.m1046x3c104091(procMemsMap3, memInfos, brief, opts, tmpLong5, ss3, procMems3, dalvikSubitemPss5, dalvikSubitemSwapPss, dalvikSubitemRss, miscPss3, miscSwapPss, miscSwapPss2, oomPss5, dalvikSubitemPss6, oomProcs2, oomSwapPss4, (ProcessCpuTracker.Stats) obj);
                        }
                    });
                    ArrayList<MemItem> catMems = new ArrayList<>();
                    catMems.add(new MemItem("Native", "Native", ss3[0], ss3[1], ss3[2], -1));
                    catMems.add(new MemItem("Dalvik", "Dalvik", ss3[3], ss3[4], ss3[5], -2));
                    catMems.add(new MemItem("Unknown", "Unknown", ss3[6], ss3[7], ss3[8], -3));
                    for (int j = 0; j < 17; j++) {
                        String label = Debug.MemoryInfo.getOtherLabel(j);
                        catMems.add(new MemItem(label, label, miscPss3[j], miscSwapPss[j], miscSwapPss2[j], j));
                    }
                    int i5 = 12;
                    if (dalvikSubitemPss5.length > 0) {
                        Iterator<MemItem> it = catMems.iterator();
                        while (it.hasNext()) {
                            MemItem memItem = it.next();
                            if (memItem.id == -2) {
                                memItemStart = 0;
                                memItemEnd = 3;
                            } else if (memItem.id == 0) {
                                memItemStart = 4;
                                memItemEnd = 9;
                            } else if (memItem.id == 10) {
                                memItemStart = 10;
                                memItemEnd = 12;
                            } else if (memItem.id == i5) {
                                memItemStart = 13;
                                memItemEnd = 14;
                            } else {
                                i5 = 12;
                            }
                            memItem.subitems = new ArrayList<>();
                            for (int j2 = memItemStart; j2 <= memItemEnd; j2++) {
                                String name = Debug.MemoryInfo.getOtherLabel(j2 + 17);
                                memItem.subitems.add(new MemItem(name, name, dalvikSubitemPss5[j2], dalvikSubitemSwapPss[j2], dalvikSubitemRss[j2], j2));
                            }
                            i5 = 12;
                        }
                    }
                    ArrayList<MemItem> oomMems = new ArrayList<>();
                    int j3 = 0;
                    while (true) {
                        long[] oomPss6 = oomPss5;
                        if (j3 >= oomPss6.length) {
                            break;
                        }
                        if (oomPss6[j3] != 0) {
                            String label2 = opts.isCompact ? DUMP_MEM_OOM_COMPACT_LABEL[j3] : DUMP_MEM_OOM_LABEL[j3];
                            MemItem item = new MemItem(label2, label2, oomPss6[j3], dalvikSubitemPss6[j3], oomSwapPss4[j3], DUMP_MEM_OOM_ADJ[j3]);
                            item.subitems = oomProcs2[j3];
                            oomMems.add(item);
                        }
                        j3++;
                        oomPss5 = oomPss6;
                    }
                    if (!opts.oomOnly) {
                        dumpMemItems(proto5, 2246267895837L, "proc", procMems3, true, false, false);
                    }
                    dumpMemItems(proto5, 2246267895838L, "oom", oomMems, false, false, false);
                    if (!brief && !opts.oomOnly) {
                        dumpMemItems(proto5, 2246267895839L, "cat", catMems, true, false, false);
                    }
                    opts.dumpSwapPss = opts.dumpSwapPss && hasSwapPss2 && ss3[10] != 0;
                    if (!opts.oomOnly) {
                        dumpMemItems(proto5, 2246267895813L, "proc", procMems3, true, true, opts.dumpSwapPss);
                    }
                    dumpMemItems(proto5, 2246267895814L, "oom", oomMems, false, true, opts.dumpSwapPss);
                    if (!brief && !opts.oomOnly) {
                        dumpMemItems(proto5, 2246267895815L, "cat", catMems, true, true, opts.dumpSwapPss);
                    }
                    MemInfoReader memInfo = new MemInfoReader();
                    memInfo.readMemInfo();
                    if (ss3[12] > 0) {
                        activityManagerService = this;
                        synchronized (activityManagerService.mProcessStats.mLock) {
                            long cachedKb = memInfo.getCachedSizeKb();
                            long freeKb = memInfo.getFreeSizeKb();
                            long zramKb = memInfo.getZramTotalSizeKb();
                            long kernelKb = memInfo.getKernelUsedSizeKb();
                            EventLogTags.writeAmMeminfo(cachedKb * GadgetFunction.NCM, freeKb * GadgetFunction.NCM, zramKb * GadgetFunction.NCM, kernelKb * GadgetFunction.NCM, ss3[12] * GadgetFunction.NCM);
                            activityManagerService.mProcessStats.addSysMemUsageLocked(cachedKb, freeKb, zramKb, kernelKb, ss3[12]);
                        }
                    } else {
                        activityManagerService = this;
                    }
                    if (brief) {
                        proto = proto5;
                        cachedPss = cachedPss4;
                    } else {
                        proto = proto5;
                        proto.write(1112396529672L, memInfo.getTotalSizeKb());
                        proto.write(1159641169929L, activityManagerService.mAppProfiler.getLastMemoryLevelLocked());
                        cachedPss = cachedPss4;
                        proto.write(1112396529674L, cachedPss);
                        proto.write(1112396529675L, memInfo.getCachedSizeKb());
                        proto.write(1112396529676L, memInfo.getFreeSizeKb());
                    }
                    long lostRAM = ((((memInfo.getTotalSizeKb() - (ss3[9] - ss3[10])) - memInfo.getFreeSizeKb()) - memInfo.getCachedSizeKb()) - memInfo.getKernelUsedSizeKb()) - memInfo.getZramTotalSizeKb();
                    proto.write(1112396529677L, ss3[9] - cachedPss);
                    proto.write(1112396529678L, memInfo.getKernelUsedSizeKb());
                    proto.write(1112396529679L, lostRAM);
                    if (!brief) {
                        if (memInfo.getZramTotalSizeKb() != 0) {
                            proto.write(1112396529680L, memInfo.getZramTotalSizeKb());
                            proto.write(1112396529681L, memInfo.getSwapTotalSizeKb() - memInfo.getSwapFreeSizeKb());
                            proto.write(1112396529682L, memInfo.getSwapTotalSizeKb());
                        }
                        long[] ksm = getKsmInfo();
                        proto.write(1112396529683L, ksm[1]);
                        proto.write(1112396529684L, ksm[0]);
                        proto.write(1112396529685L, ksm[2]);
                        proto.write(1112396529686L, ksm[3]);
                        proto.write(1120986464279L, ActivityManager.staticGetMemoryClass());
                        proto.write(1120986464280L, ActivityManager.staticGetLargeMemoryClass());
                        proto.write(1112396529689L, activityManagerService.mProcessList.getMemLevel(999) / GadgetFunction.NCM);
                        proto.write(1112396529690L, activityManagerService.mProcessList.getCachedRestoreThresholdKb());
                        proto.write(1133871366171L, ActivityManager.isLowRamDeviceStatic());
                        proto.write(1133871366172L, ActivityManager.isHighEndGfx());
                    }
                } else {
                    proto = proto5;
                }
                proto.flush();
                return;
            }
            final ProcessRecord r2 = arrayList.get(numProcs2);
            long[] oomRss3 = oomRss2;
            synchronized (activityManagerService2.mProcLock) {
                try {
                    boostPriorityForProcLockedSection();
                    thread = r2.getThread();
                    pid = r2.getPid();
                    oomAdj = r2.mState.getSetAdjWithServices();
                    hasActivities = r2.hasActivities();
                } catch (Throwable th) {
                    th = th;
                    while (true) {
                        try {
                            break;
                        } catch (Throwable th2) {
                            th = th2;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            if (thread == null) {
                tmpLong = tmpLong4;
                realtimeMs2 = realtimeMs5;
                ss = ss2;
                proto2 = proto4;
                i2 = numProcs2;
                miscPss = miscPss2;
                dalvikSubitemPss3 = oomSwapPss2;
                dalvikSubitemPss2 = oomRss;
                oomSwapPss = oomRss3;
                oomPss2 = oomPss3;
                procMemsMap = procMemsMap2;
                procMems = procMems2;
            } else {
                if (mi5 == null) {
                    Debug.MemoryInfo mi6 = new Debug.MemoryInfo();
                    mi = mi6;
                } else {
                    mi = mi5;
                }
                if (memoryUsageDumpOptions.dumpDetails) {
                    realtimeMs = realtimeMs5;
                    ss = ss2;
                    pid2 = pid;
                    z = false;
                } else if (brief || memoryUsageDumpOptions.oomOnly) {
                    long startTime2 = SystemClock.currentThreadTimeMillis();
                    realtimeMs = realtimeMs5;
                    ss = ss2;
                    pid2 = pid;
                    long pss2 = Debug.getPss(pid2, tmpLong4, null);
                    if (pss2 == 0) {
                        z = false;
                        mi5 = mi;
                        oomPss2 = oomPss3;
                        tmpLong = tmpLong4;
                        proto2 = proto4;
                        i2 = numProcs2;
                        miscPss = miscPss2;
                        dalvikSubitemPss3 = oomSwapPss2;
                        dalvikSubitemPss2 = oomRss;
                        oomSwapPss = oomRss3;
                        realtimeMs2 = realtimeMs;
                        procMemsMap = procMemsMap2;
                        procMems = procMems2;
                    } else {
                        mi.dalvikPss = (int) pss2;
                        long endTime2 = SystemClock.currentThreadTimeMillis();
                        z = false;
                        mi.dalvikPrivateDirty = (int) tmpLong4[0];
                        mi.dalvikRss = (int) tmpLong4[2];
                        reportType = 3;
                        startTime = startTime2;
                        endTime = endTime2;
                        hasSwapPss = hasSwapPss2;
                        if (memoryUsageDumpOptions.dumpDetails) {
                            mi2 = mi;
                            oomPss = oomPss3;
                            tmpLong = tmpLong4;
                            r44 = z;
                            i2 = numProcs2;
                            miscPss = miscPss2;
                            dalvikSubitemPss = oomSwapPss2;
                            dalvikSubitemPss2 = oomRss;
                            oomSwapPss = oomRss3;
                            realtimeMs2 = realtimeMs;
                            c = 3;
                            procMemsMap = procMemsMap2;
                            procMems = procMems2;
                        } else if (memoryUsageDumpOptions.localOnly) {
                            long aToken = proto4.start(2246267895812L);
                            long mToken = proto4.start(1146756268033L);
                            proto4.write(CompanionMessage.MESSAGE_ID, pid2);
                            proto4.write(1138166333442L, r2.processName);
                            ActivityThread.dumpMemInfoTable(proto4, mi, memoryUsageDumpOptions.dumpDalvik, memoryUsageDumpOptions.dumpSummaryOnly, 0L, 0L, 0L, 0L, 0L, 0L);
                            proto4.end(mToken);
                            proto4.end(aToken);
                            mi2 = mi;
                            tmpLong = tmpLong4;
                            i2 = numProcs2;
                            miscPss = miscPss2;
                            dalvikSubitemPss = oomSwapPss2;
                            dalvikSubitemPss2 = oomRss;
                            oomSwapPss = oomRss3;
                            realtimeMs2 = realtimeMs;
                            oomPss = oomPss3;
                            c = 3;
                            r44 = 0;
                            procMemsMap = procMemsMap2;
                            procMems = procMems2;
                        } else {
                            long[] oomPss7 = oomPss3;
                            long[] tmpLong6 = tmpLong4;
                            try {
                                tp = new ByteTransferPipe();
                                try {
                                    mi2 = mi;
                                    i2 = numProcs2;
                                    long[] dalvikSubitemPss7 = oomSwapPss2;
                                    dalvikSubitemPss2 = oomRss;
                                    oomSwapPss = oomRss3;
                                    z2 = false;
                                    r44 = 0;
                                    z2 = false;
                                    z2 = false;
                                    miscPss = miscPss2;
                                    oomPss = oomPss7;
                                    tmpLong = tmpLong6;
                                    c = 3;
                                    procMemsMap = procMemsMap2;
                                    realtimeMs2 = realtimeMs;
                                    dalvikSubitemPss = dalvikSubitemPss7;
                                    procMems = procMems2;
                                    try {
                                        thread.dumpMemInfoProto(tp.getWriteFd(), mi2, memoryUsageDumpOptions.dumpFullDetails, memoryUsageDumpOptions.dumpDalvik, memoryUsageDumpOptions.dumpSummaryOnly, memoryUsageDumpOptions.dumpUnreachable, innerArgs);
                                        proto4.write(2246267895812L, tp.get());
                                    } catch (Throwable th3) {
                                        th = th3;
                                        tp.kill();
                                        throw th;
                                        break;
                                    }
                                } catch (Throwable th4) {
                                    th = th4;
                                    mi2 = mi;
                                    tmpLong = tmpLong6;
                                    i2 = numProcs2;
                                    miscPss = miscPss2;
                                    dalvikSubitemPss = oomSwapPss2;
                                    dalvikSubitemPss2 = oomRss;
                                    oomSwapPss = oomRss3;
                                    realtimeMs2 = realtimeMs;
                                    oomPss = oomPss7;
                                    c = 3;
                                    z2 = false;
                                    procMemsMap = procMemsMap2;
                                    procMems = procMems2;
                                }
                            } catch (RemoteException e2) {
                                e = e2;
                                mi2 = mi;
                                tmpLong = tmpLong6;
                                i2 = numProcs2;
                                miscPss = miscPss2;
                                dalvikSubitemPss = oomSwapPss2;
                                dalvikSubitemPss2 = oomRss;
                                oomSwapPss = oomRss3;
                                realtimeMs2 = realtimeMs;
                                oomPss = oomPss7;
                                c = 3;
                                z2 = false;
                                procMemsMap = procMemsMap2;
                                procMems = procMems2;
                            } catch (IOException e3) {
                                e = e3;
                                mi2 = mi;
                                tmpLong = tmpLong6;
                                i2 = numProcs2;
                                miscPss = miscPss2;
                                dalvikSubitemPss = oomSwapPss2;
                                dalvikSubitemPss2 = oomRss;
                                oomSwapPss = oomRss3;
                                realtimeMs2 = realtimeMs;
                                oomPss = oomPss7;
                                c = 3;
                                z2 = false;
                                procMemsMap = procMemsMap2;
                                procMems = procMems2;
                            }
                            try {
                                tp.kill();
                            } catch (RemoteException e4) {
                                e = e4;
                                Log.e(TAG, "Got RemoteException!", e);
                                r44 = z2;
                                final long myTotalPss = mi2.getTotalPss();
                                final long myTotalUss = mi2.getTotalUss();
                                final long myTotalRss = mi2.getTotalRss();
                                proto2 = proto4;
                                long myTotalSwapPss = mi2.getTotalSwappedOutPss();
                                synchronized (activityManagerService2.mProcLock) {
                                }
                            } catch (IOException e5) {
                                e = e5;
                                Log.e(TAG, "Got IOException!", e);
                                r44 = z2;
                                final long myTotalPss2 = mi2.getTotalPss();
                                final long myTotalUss2 = mi2.getTotalUss();
                                final long myTotalRss2 = mi2.getTotalRss();
                                proto2 = proto4;
                                long myTotalSwapPss2 = mi2.getTotalSwappedOutPss();
                                synchronized (activityManagerService2.mProcLock) {
                                }
                            }
                        }
                        final long myTotalPss22 = mi2.getTotalPss();
                        final long myTotalUss22 = mi2.getTotalUss();
                        final long myTotalRss22 = mi2.getTotalRss();
                        proto2 = proto4;
                        long myTotalSwapPss22 = mi2.getTotalSwappedOutPss();
                        synchronized (activityManagerService2.mProcLock) {
                            try {
                                boostPriorityForProcLockedSection();
                                if (r2.getThread() != null) {
                                    try {
                                        if (oomAdj == r2.mState.getSetAdjWithServices()) {
                                            try {
                                                r2.mProfile.addPss(myTotalPss22, myTotalUss22, myTotalRss22, true, reportType, endTime - startTime);
                                                oomAdj2 = oomAdj;
                                                try {
                                                    final int i6 = reportType;
                                                    final long j4 = endTime;
                                                    final long j5 = startTime;
                                                    r2.getPkgList().forEachPackageProcessStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda31
                                                        @Override // java.util.function.Consumer
                                                        public final void accept(Object obj) {
                                                            FrameworkStatsLog.write(18, r0.info.uid, r12.state.getName(), r12.state.getPackage(), myTotalPss22, myTotalUss22, myTotalRss22, i6, j4 - j5, ((ProcessStats.ProcessStateHolder) obj).appVersion, r0.mProfile.getCurrentHostingComponentTypes(), ProcessRecord.this.mProfile.getHistoricalHostingComponentTypes());
                                                        }
                                                    });
                                                } catch (Throwable th5) {
                                                    th = th5;
                                                    while (true) {
                                                        try {
                                                            break;
                                                        } catch (Throwable th6) {
                                                            th = th6;
                                                        }
                                                    }
                                                    resetPriorityAfterProcLockedSection();
                                                    throw th;
                                                }
                                            } catch (Throwable th7) {
                                                th = th7;
                                            }
                                        } else {
                                            oomAdj2 = oomAdj;
                                        }
                                    } catch (Throwable th8) {
                                        th = th8;
                                    }
                                } else {
                                    oomAdj2 = oomAdj;
                                }
                            } catch (Throwable th9) {
                                th = th9;
                            }
                            try {
                            } catch (Throwable th10) {
                                th = th10;
                                while (true) {
                                    break;
                                    break;
                                }
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                        resetPriorityAfterProcLockedSection();
                        if (memoryUsageDumpOptions.isCheckinRequest) {
                            mi3 = mi2;
                            dalvikSubitemPss3 = dalvikSubitemPss;
                            cachedPss2 = cachedPss3;
                            oomPss2 = oomPss;
                        } else {
                            mi3 = mi2;
                            if (mi3 != null) {
                                ss[9] = ss[9] + myTotalPss22;
                                ss[10] = ss[10] + myTotalSwapPss22;
                                ss[11] = ss[11] + myTotalRss22;
                                MemItem pssItem = new MemItem(r2.processName + " (pid " + pid2 + (hasActivities ? " / activities)" : ")"), r2.processName, myTotalPss22, myTotalSwapPss22, myTotalRss22, pid2, hasActivities);
                                procMems.add(pssItem);
                                procMemsMap.put(pid2, pssItem);
                                ss[r44] = ss[r44] + mi3.nativePss;
                                ss[1] = ss[1] + mi3.nativeSwappedOutPss;
                                ss[2] = ss[2] + mi3.nativeRss;
                                ss[c] = ss[c] + mi3.dalvikPss;
                                ss[4] = ss[4] + mi3.dalvikSwappedOutPss;
                                ss[5] = ss[5] + mi3.dalvikRss;
                                int j6 = 0;
                                while (true) {
                                    dalvikSubitemPss3 = dalvikSubitemPss;
                                    if (j6 >= dalvikSubitemPss3.length) {
                                        break;
                                    }
                                    dalvikSubitemPss3[j6] = dalvikSubitemPss3[j6] + mi3.getOtherPss(j6 + 17);
                                    dalvikSubitemSwapPss[j6] = dalvikSubitemSwapPss[j6] + mi3.getOtherSwappedOutPss(j6 + 17);
                                    dalvikSubitemRss[j6] = dalvikSubitemRss[j6] + mi3.getOtherRss(j6 + 17);
                                    j6++;
                                    dalvikSubitemPss = dalvikSubitemPss3;
                                }
                                ss[6] = ss[6] + mi3.otherPss;
                                ss[8] = ss[8] + mi3.otherRss;
                                ss[7] = ss[7] + mi3.otherSwappedOutPss;
                                for (int j7 = 0; j7 < 17; j7++) {
                                    long mem = mi3.getOtherPss(j7);
                                    miscPss[j7] = miscPss[j7] + mem;
                                    ss[6] = ss[6] - mem;
                                    long mem2 = mi3.getOtherSwappedOutPss(j7);
                                    miscSwapPss[j7] = miscSwapPss[j7] + mem2;
                                    ss[7] = ss[7] - mem2;
                                    long mem3 = mi3.getOtherRss(j7);
                                    miscSwapPss2[j7] = miscSwapPss2[j7] + mem3;
                                    ss[8] = ss[8] - mem3;
                                }
                                int oomAdj3 = oomAdj2;
                                if (oomAdj3 >= 900) {
                                    cachedPss3 += myTotalPss22;
                                    cachedSwapPss += myTotalSwapPss22;
                                }
                                int oomIndex = 0;
                                while (true) {
                                    oomPss2 = oomPss;
                                    if (oomIndex >= oomPss2.length) {
                                        break;
                                    }
                                    if (oomIndex == oomPss2.length - 1) {
                                        break;
                                    }
                                    int[] iArr = DUMP_MEM_OOM_ADJ;
                                    if (oomAdj3 >= iArr[oomIndex] && oomAdj3 < iArr[oomIndex + 1]) {
                                        break;
                                    }
                                    oomIndex++;
                                    oomPss = oomPss2;
                                }
                                mi5 = mi3;
                                hasSwapPss2 = hasSwapPss;
                            } else {
                                dalvikSubitemPss3 = dalvikSubitemPss;
                                cachedPss2 = cachedPss3;
                                oomPss2 = oomPss;
                            }
                        }
                        cachedPss3 = cachedPss2;
                        mi5 = mi3;
                        hasSwapPss2 = hasSwapPss;
                    }
                } else {
                    realtimeMs = realtimeMs5;
                    ss = ss2;
                    pid2 = pid;
                    z = false;
                }
                long startTime3 = SystemClock.currentThreadTimeMillis();
                if (Debug.getMemoryInfo(pid2, mi)) {
                    long endTime3 = SystemClock.currentThreadTimeMillis();
                    reportType = 4;
                    hasSwapPss = mi.hasSwappedOutPss;
                    startTime = startTime3;
                    endTime = endTime3;
                    if (memoryUsageDumpOptions.dumpDetails) {
                    }
                    final long myTotalPss222 = mi2.getTotalPss();
                    final long myTotalUss222 = mi2.getTotalUss();
                    final long myTotalRss222 = mi2.getTotalRss();
                    proto2 = proto4;
                    long myTotalSwapPss222 = mi2.getTotalSwappedOutPss();
                    synchronized (activityManagerService2.mProcLock) {
                    }
                }
                mi5 = mi;
                oomPss2 = oomPss3;
                tmpLong = tmpLong4;
                proto2 = proto4;
                i2 = numProcs2;
                miscPss = miscPss2;
                dalvikSubitemPss3 = oomSwapPss2;
                dalvikSubitemPss2 = oomRss;
                oomSwapPss = oomRss3;
                realtimeMs2 = realtimeMs;
                procMemsMap = procMemsMap2;
                procMems = procMems2;
            }
            activityManagerService2 = this;
            memoryUsageDumpOptions = opts;
            oomPss3 = oomPss2;
            procMems2 = procMems;
            procMemsMap2 = procMemsMap;
            ss2 = ss;
            miscPss2 = miscPss;
            proto4 = proto2;
            oomRss2 = oomSwapPss;
            oomProcs = oomProcs2;
            tmpLong4 = tmpLong;
            realtimeMs5 = realtimeMs2;
            numProcs2 = i2 - 1;
            oomRss = dalvikSubitemPss2;
            oomSwapPss2 = dalvikSubitemPss3;
            arrayList = procs;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$dumpApplicationMemoryUsage$17$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1045xc9212553(int fFindPid, String[] innerArgs, ArrayList nativeProcs, ProcessCpuTracker.Stats st) {
        if (st.pid == fFindPid || (st.baseName != null && st.baseName.equals(innerArgs[0]))) {
            if (Build.ENABLE_GB_MON_RECLAIM && (fFindPid == this.mGBMonitor.getSFPid() || "surfaceflinger".equals(innerArgs[0]))) {
                this.mGBMonitor.reclaimGB(false);
            }
            nativeProcs.add(st);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* JADX WARN: Removed duplicated region for block: B:30:0x011f A[LOOP:0: B:28:0x011c->B:30:0x011f, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:34:0x0167 A[LOOP:1: B:32:0x0163->B:34:0x0167, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:37:0x01a7  */
    /* renamed from: lambda$dumpApplicationMemoryUsage$19$com-android-server-am-ActivityManagerService  reason: not valid java name */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public /* synthetic */ void m1046x3c104091(SparseArray procMemsMap, Debug.MemoryInfo[] memInfos, boolean brief, MemoryUsageDumpOptions opts, long[] tmpLong, long[] ss, ArrayList procMems, long[] dalvikSubitemPss, long[] dalvikSubitemSwapPss, long[] dalvikSubitemRss, long[] miscPss, long[] miscSwapPss, long[] miscRss, long[] oomPss, long[] oomSwapPss, ArrayList[] oomProcs, long[] oomRss, ProcessCpuTracker.Stats st) {
        int j;
        int j2;
        if (st.vsize > 0 && procMemsMap.indexOfKey(st.pid) < 0) {
            if (memInfos[0] == null) {
                memInfos[0] = new Debug.MemoryInfo();
            }
            if (Build.ENABLE_GB_MON_RECLAIM && "surfaceflinger".equals(st.name)) {
                this.mGBMonitor.reclaimGB(false);
            }
            Debug.MemoryInfo info = memInfos[0];
            if (!brief && !opts.oomOnly) {
                if (!Debug.getMemoryInfo(st.pid, info)) {
                    return;
                }
                long myTotalPss = info.getTotalPss();
                long myTotalSwapPss = info.getTotalSwappedOutPss();
                long myTotalRss = info.getTotalRss();
                ss[9] = ss[9] + myTotalPss;
                ss[10] = ss[10] + myTotalSwapPss;
                ss[11] = ss[11] + myTotalRss;
                ss[12] = ss[12] + myTotalPss;
                MemItem pssItem = new MemItem(st.name + " (pid " + st.pid + ")", st.name, myTotalPss, info.getSummaryTotalSwapPss(), myTotalRss, st.pid, false);
                procMems.add(pssItem);
                ss[0] = ss[0] + info.nativePss;
                ss[1] = ss[1] + info.nativeSwappedOutPss;
                ss[2] = ss[2] + info.nativeRss;
                ss[3] = ss[3] + info.dalvikPss;
                ss[4] = ss[4] + info.dalvikSwappedOutPss;
                ss[5] = ss[5] + info.dalvikRss;
                for (j = 0; j < dalvikSubitemPss.length; j++) {
                    dalvikSubitemPss[j] = dalvikSubitemPss[j] + info.getOtherPss(j + 17);
                    dalvikSubitemSwapPss[j] = dalvikSubitemSwapPss[j] + info.getOtherSwappedOutPss(j + 17);
                    dalvikSubitemRss[j] = dalvikSubitemRss[j] + info.getOtherRss(j + 17);
                }
                ss[6] = ss[6] + info.otherPss;
                ss[7] = ss[7] + info.otherSwappedOutPss;
                ss[8] = ss[8] + info.otherRss;
                for (j2 = 0; j2 < 17; j2++) {
                    long mem = info.getOtherPss(j2);
                    miscPss[j2] = miscPss[j2] + mem;
                    ss[6] = ss[6] - mem;
                    long mem2 = info.getOtherSwappedOutPss(j2);
                    miscSwapPss[j2] = miscSwapPss[j2] + mem2;
                    ss[7] = ss[7] - mem2;
                    long mem3 = info.getOtherRss(j2);
                    miscRss[j2] = miscRss[j2] + mem3;
                    ss[8] = ss[8] - mem3;
                }
                oomPss[0] = oomPss[0] + myTotalPss;
                oomSwapPss[0] = oomSwapPss[0] + myTotalSwapPss;
                if (oomProcs[0] == null) {
                    oomProcs[0] = new ArrayList();
                }
                oomProcs[0].add(pssItem);
                oomRss[0] = oomRss[0] + myTotalRss;
            }
            long pss = Debug.getPss(st.pid, tmpLong, null);
            if (pss == 0) {
                return;
            }
            info.nativePss = (int) pss;
            info.nativePrivateDirty = (int) tmpLong[0];
            info.nativeRss = (int) tmpLong[2];
            long myTotalPss2 = info.getTotalPss();
            long myTotalSwapPss2 = info.getTotalSwappedOutPss();
            long myTotalRss2 = info.getTotalRss();
            ss[9] = ss[9] + myTotalPss2;
            ss[10] = ss[10] + myTotalSwapPss2;
            ss[11] = ss[11] + myTotalRss2;
            ss[12] = ss[12] + myTotalPss2;
            MemItem pssItem2 = new MemItem(st.name + " (pid " + st.pid + ")", st.name, myTotalPss2, info.getSummaryTotalSwapPss(), myTotalRss2, st.pid, false);
            procMems.add(pssItem2);
            ss[0] = ss[0] + info.nativePss;
            ss[1] = ss[1] + info.nativeSwappedOutPss;
            ss[2] = ss[2] + info.nativeRss;
            ss[3] = ss[3] + info.dalvikPss;
            ss[4] = ss[4] + info.dalvikSwappedOutPss;
            ss[5] = ss[5] + info.dalvikRss;
            while (j < dalvikSubitemPss.length) {
            }
            ss[6] = ss[6] + info.otherPss;
            ss[7] = ss[7] + info.otherSwappedOutPss;
            ss[8] = ss[8] + info.otherRss;
            while (j2 < 17) {
            }
            oomPss[0] = oomPss[0] + myTotalPss2;
            oomSwapPss[0] = oomSwapPss[0] + myTotalSwapPss2;
            if (oomProcs[0] == null) {
            }
            oomProcs[0].add(pssItem2);
            oomRss[0] = oomRss[0] + myTotalRss2;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static void appendBasicMemEntry(StringBuilder sb, int oomAdj, int procState, long pss, long memtrack, String name) {
        sb.append("  ");
        sb.append(ProcessList.makeOomAdjString(oomAdj, false));
        sb.append(' ');
        sb.append(ProcessList.makeProcStateString(procState));
        sb.append(' ');
        ProcessList.appendRamKb(sb, pss);
        sb.append(": ");
        sb.append(name);
        if (memtrack > 0) {
            sb.append(" (");
            sb.append(stringifyKBSize(memtrack));
            sb.append(" memtrack)");
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static void appendMemInfo(StringBuilder sb, ProcessMemInfo mi) {
        appendBasicMemEntry(sb, mi.oomAdj, mi.procState, mi.pss, mi.memtrack, mi.name);
        sb.append(" (pid ");
        sb.append(mi.pid);
        sb.append(") ");
        sb.append(mi.adjType);
        sb.append('\n');
        if (mi.adjReason != null) {
            sb.append("                      ");
            sb.append(mi.adjReason);
            sb.append('\n');
        }
    }

    private static boolean scanArgs(String[] args, String value) {
        if (args != null) {
            for (String arg : args) {
                if (value.equals(arg)) {
                    return true;
                }
            }
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final boolean cleanUpApplicationRecordLocked(final ProcessRecord app, int pid, boolean restarting, boolean allowRestart, int index, boolean replacingPid, boolean fromBinderDied) {
        boolean z;
        boolean restart;
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                if (index >= 0) {
                    removeLruProcessLocked(app);
                    ProcessList.remove(pid);
                }
                ProcessStatsService processStatsService = this.mProcessStats;
                if (!fromBinderDied && !app.isolated) {
                    z = false;
                    restart = app.onCleanupApplicationRecordLSP(processStatsService, allowRestart, z);
                    this.mOomAdjuster.mCachedAppOptimizer.onCleanupApplicationRecordLocked(app);
                }
                z = true;
                restart = app.onCleanupApplicationRecordLSP(processStatsService, allowRestart, z);
                this.mOomAdjuster.mCachedAppOptimizer.onCleanupApplicationRecordLocked(app);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        this.mAppProfiler.onCleanupApplicationRecordLocked(app);
        skipCurrentReceiverLocked(app);
        updateProcessForegroundLocked(app, false, 0, false);
        this.mServices.killServicesLocked(app, allowRestart);
        this.mPhantomProcessList.onAppDied(pid);
        BackupRecord backupTarget = this.mBackupTargets.get(app.userId);
        if (backupTarget != null && pid == backupTarget.app.getPid()) {
            if (ActivityManagerDebugConfig.DEBUG_BACKUP || ActivityTaskManagerDebugConfig.DEBUG_CLEANUP) {
                Slog.d(TAG_CLEANUP, "App " + backupTarget.appInfo + " died during backup");
            }
            this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService.19
                @Override // java.lang.Runnable
                public void run() {
                    try {
                        IBackupManager bm = IBackupManager.Stub.asInterface(ServiceManager.getService(HostingRecord.HOSTING_TYPE_BACKUP));
                        bm.agentDisconnectedForUser(app.userId, app.info.packageName);
                    } catch (RemoteException e) {
                    }
                }
            });
        }
        this.mProcessList.scheduleDispatchProcessDiedLocked(pid, app.info.uid);
        boolean allowRestart2 = this.mProcessList.handlePrecedingAppDiedLocked(app);
        ProcessRecord predecessor = app.mPredecessor;
        if (predecessor != null) {
            predecessor.mSuccessor = null;
            predecessor.mSuccessorStartRunnable = null;
            app.mPredecessor = null;
        }
        if (restarting) {
            return false;
        }
        if (!app.isPersistent() || app.isolated) {
            if (ActivityManagerDebugConfig.DEBUG_PROCESSES || ActivityTaskManagerDebugConfig.DEBUG_CLEANUP) {
                Slog.v(TAG_CLEANUP, "Removing non-persistent process during cleanup: " + app);
            }
            if (!replacingPid) {
                this.mProcessList.removeProcessNameLocked(app.processName, app.uid, app);
            }
            this.mAtmInternal.clearHeavyWeightProcessIfEquals(app.getWindowProcessController());
        } else if (!app.isRemoved()) {
            if (this.mPersistentStartingProcesses.indexOf(app) < 0) {
                this.mPersistentStartingProcesses.add(app);
                restart = true;
            }
            if (app.userId != this.mUserController.getCurrentUserId() && app.userId != 0) {
                Slog.e(TAG, "limit backgroud user's process restarting...");
                restart = false;
            }
        }
        if ((ActivityManagerDebugConfig.DEBUG_PROCESSES || ActivityTaskManagerDebugConfig.DEBUG_CLEANUP) && this.mProcessesOnHold.contains(app)) {
            Slog.v(TAG_CLEANUP, "Clean-up removing on hold: " + app);
        }
        this.mProcessesOnHold.remove(app);
        this.mAtmInternal.onCleanUpApplicationRecord(app.getWindowProcessController());
        this.mProcessList.noteProcessDiedLocked(app);
        if (restart && allowRestart2 && !app.isolated) {
            if (index < 0) {
                ProcessList.remove(pid);
            }
            this.mHandler.removeMessages(57, app);
            this.mProcessList.addProcessNameLocked(app);
            app.setPendingStart(false);
            this.mProcessList.startProcessLocked(app, new HostingRecord(HostingRecord.HOSTING_TYPE_RESTART, app.processName), 0);
            return true;
        }
        if (pid > 0 && pid != MY_PID) {
            removePidLocked(pid, app);
            this.mHandler.removeMessages(20, app);
            this.mBatteryStatsService.noteProcessFinish(app.processName, app.info.uid);
            if (app.isolated) {
                this.mBatteryStatsService.removeIsolatedUid(app.uid, app.info.uid);
            }
            ITranActivityManagerService.Instance().hookProcDied(app.processWrapper);
            ITranActivityManagerService.Instance().hookProcDied(app.mPid);
            app.setPid(0);
        }
        return false;
    }

    public List<ActivityManager.RunningServiceInfo> getServices(int maxNum, int flags) {
        List<ActivityManager.RunningServiceInfo> runningServiceInfoLocked;
        enforceNotIsolatedCaller("getServices");
        int callingUid = Binder.getCallingUid();
        boolean canInteractAcrossUsers = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean allowed = this.mAtmInternal.isGetTasksAllowed("getServices", Binder.getCallingPid(), callingUid);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                runningServiceInfoLocked = this.mServices.getRunningServiceInfoLocked(maxNum, flags, callingUid, allowed, canInteractAcrossUsers);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return runningServiceInfoLocked;
    }

    public PendingIntent getRunningServiceControlPanel(ComponentName name) {
        PendingIntent runningServiceControlPanelLocked;
        enforceNotIsolatedCaller("getRunningServiceControlPanel");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                runningServiceControlPanelLocked = this.mServices.getRunningServiceControlPanelLocked(name);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return runningServiceControlPanelLocked;
    }

    public ComponentName startService(IApplicationThread caller, Intent service, String resolvedType, boolean requireForeground, String callingPackage, String callingFeatureId, int userId) throws TransactionTooLargeException {
        ComponentName res;
        enforceNotIsolatedCaller("startService");
        enforceAllowedToStartOrBindServiceIfSdkSandbox(service);
        if (service != null && service.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        if (callingPackage != null) {
            if (ActivityManagerDebugConfig.DEBUG_SERVICE) {
                Slog.v(TAG_SERVICE, "*** startService: " + service + " type=" + resolvedType + " fg=" + requireForeground);
            }
            if (ITranActivityManagerService.Instance().hookPmStartService(callingPackage, service, requireForeground, resolvedType, userId)) {
                return null;
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    int callingPid = Binder.getCallingPid();
                    int callingUid = Binder.getCallingUid();
                    this.mCallingPid = callingPid;
                    long origId = Binder.clearCallingIdentity();
                    res = this.mServices.startServiceLocked(caller, service, resolvedType, callingPid, callingUid, requireForeground, callingPackage, callingFeatureId, userId);
                    Binder.restoreCallingIdentity(origId);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            return res;
        }
        throw new IllegalArgumentException("callingPackage cannot be null");
    }

    public int stopService(IApplicationThread caller, Intent service, String resolvedType, int userId) {
        int stopServiceLocked;
        enforceNotIsolatedCaller("stopService");
        if (service != null && service.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                stopServiceLocked = this.mServices.stopServiceLocked(caller, service, resolvedType, userId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return stopServiceLocked;
    }

    public IBinder peekService(Intent service, String resolvedType, String callingPackage) {
        IBinder peekServiceLocked;
        enforceNotIsolatedCaller("peekService");
        if (service != null && service.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        if (callingPackage == null) {
            throw new IllegalArgumentException("callingPackage cannot be null");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                peekServiceLocked = this.mServices.peekServiceLocked(service, resolvedType, callingPackage);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return peekServiceLocked;
    }

    public boolean stopServiceToken(ComponentName className, IBinder token, int startId) {
        boolean stopServiceTokenLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                stopServiceTokenLocked = this.mServices.stopServiceTokenLocked(className, token, startId);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return stopServiceTokenLocked;
    }

    public void setServiceForeground(ComponentName className, IBinder token, int id, Notification notification, int flags, int foregroundServiceType) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mServices.setServiceForegroundLocked(className, token, id, notification, flags, foregroundServiceType);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public int getForegroundServiceType(ComponentName className, IBinder token) {
        int foregroundServiceTypeLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                foregroundServiceTypeLocked = this.mServices.getForegroundServiceTypeLocked(className, token);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return foregroundServiceTypeLocked;
    }

    public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll, boolean requireFull, String name, String callerPackage) {
        return this.mUserController.handleIncomingUser(callingPid, callingUid, userId, allowAll, requireFull ? 2 : 0, name, callerPackage);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean isSingleton(String componentProcessName, ApplicationInfo aInfo, String className, int flags) {
        boolean result = false;
        if (UserHandle.getAppId(aInfo.uid) >= 10000) {
            if ((flags & 1073741824) != 0) {
                if (ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS", aInfo.uid) != 0) {
                    ComponentName comp = new ComponentName(aInfo.packageName, className);
                    String msg = "Permission Denial: Component " + comp.flattenToShortString() + " requests FLAG_SINGLE_USER, but app does not hold android.permission.INTERACT_ACROSS_USERS";
                    Slog.w(TAG, msg);
                    throw new SecurityException(msg);
                }
                result = true;
            }
        } else if (HostingRecord.HOSTING_TYPE_SYSTEM.equals(componentProcessName)) {
            result = true;
        } else if ((flags & 1073741824) != 0) {
            result = UserHandle.isSameApp(aInfo.uid, 1001) || (aInfo.flags & 8) != 0;
        }
        if (ActivityManagerDebugConfig.DEBUG_MU) {
            Slog.v(TAG_MU, "isSingleton(" + componentProcessName + ", " + aInfo + ", " + className + ", 0x" + Integer.toHexString(flags) + ") = " + result);
        }
        return result;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean isValidSingletonCall(int callingUid, int componentUid) {
        int componentAppId = UserHandle.getAppId(componentUid);
        return UserHandle.isSameApp(callingUid, componentUid) || componentAppId == 1000 || componentAppId == 1001 || ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", componentUid) == 0;
    }

    public int bindService(IApplicationThread caller, IBinder token, Intent service, String resolvedType, IServiceConnection connection, int flags, String callingPackage, int userId) throws TransactionTooLargeException {
        return bindServiceInstance(caller, token, service, resolvedType, connection, flags, null, callingPackage, userId);
    }

    public int bindServiceInstance(IApplicationThread caller, IBinder token, Intent service, String resolvedType, IServiceConnection connection, int flags, String instanceName, String callingPackage, int userId) throws TransactionTooLargeException {
        return bindServiceInstance(caller, token, service, resolvedType, connection, flags, instanceName, false, 0, null, callingPackage, userId);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public int bindServiceInstance(IApplicationThread caller, IBinder token, Intent service, String resolvedType, IServiceConnection connection, int flags, String instanceName, boolean isSdkSandboxService, int sdkSandboxClientAppUid, String sdkSandboxClientAppPackage, String callingPackage, int userId) throws TransactionTooLargeException {
        long j;
        enforceNotIsolatedCaller("bindService");
        enforceAllowedToStartOrBindServiceIfSdkSandbox(service);
        if (service != null && service.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        if (callingPackage == null) {
            throw new IllegalArgumentException("callingPackage cannot be null");
        }
        if (isSdkSandboxService && instanceName == null) {
            throw new IllegalArgumentException("No instance name provided for isolated process");
        }
        if (instanceName != null) {
            for (int i = 0; i < instanceName.length(); i++) {
                char c = instanceName.charAt(i);
                if ((c < 'a' || c > 'z') && ((c < 'A' || c > 'Z') && ((c < '0' || c > '9') && c != '_' && c != '.'))) {
                    throw new IllegalArgumentException("Illegal instanceName");
                }
            }
        }
        if (ITranActivityManagerService.Instance().hookPmLimitBindService(callingPackage, service, resolvedType, userId, flags)) {
            return 0;
        }
        try {
            if (Trace.isTagEnabled(64L)) {
                ComponentName cn = service.getComponent();
                Trace.traceBegin(64L, "bindService:" + (cn != null ? cn.toShortString() : service.getAction()));
            }
            try {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        int bindServiceLocked = this.mServices.bindServiceLocked(caller, token, service, resolvedType, connection, flags, instanceName, isSdkSandboxService, sdkSandboxClientAppUid, sdkSandboxClientAppPackage, callingPackage, userId);
                        resetPriorityAfterLockedSection();
                        Trace.traceEnd(64L);
                        return bindServiceLocked;
                    } catch (Throwable th) {
                        th = th;
                        j = 64;
                        try {
                            resetPriorityAfterLockedSection();
                            throw th;
                        } catch (Throwable th2) {
                            th = th2;
                            Trace.traceEnd(j);
                            throw th;
                        }
                    }
                }
            } catch (Throwable th3) {
                th = th3;
            }
        } catch (Throwable th4) {
            th = th4;
            j = 64;
        }
    }

    public void updateServiceGroup(IServiceConnection connection, int group, int importance) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mServices.updateServiceGroupLocked(connection, group, importance);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean unbindService(IServiceConnection connection) {
        boolean unbindServiceLocked;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                unbindServiceLocked = this.mServices.unbindServiceLocked(connection);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return unbindServiceLocked;
    }

    public void publishService(IBinder token, Intent intent, IBinder service) {
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!(token instanceof ServiceRecord)) {
                    throw new IllegalArgumentException("Invalid service token");
                }
                this.mServices.publishServiceLocked((ServiceRecord) token, intent, service);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void unbindFinished(IBinder token, Intent intent, boolean doRebind) {
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mServices.unbindFinishedLocked((ServiceRecord) token, intent, doRebind);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void serviceDoneExecuting(IBinder token, int type, int startId, int res) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!(token instanceof ServiceRecord)) {
                    Slog.e(TAG, "serviceDoneExecuting: Invalid service token=" + token);
                    throw new IllegalArgumentException("Invalid service token");
                }
                this.mServices.serviceDoneExecutingLocked((ServiceRecord) token, type, startId, res, false);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [13987=4] */
    public boolean bindBackupAgent(String packageName, int backupMode, int targetUserId, int operationType) {
        ApplicationInfo app;
        int newBackupUid;
        int oldBackupUid;
        int i;
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG, "bindBackupAgent: app=" + packageName + " mode=" + backupMode + " targetUserId=" + targetUserId + " callingUid = " + Binder.getCallingUid() + " uid = " + Process.myUid());
        }
        enforceCallingPermission("android.permission.CONFIRM_FULL_BACKUP", "bindBackupAgent");
        int instantiatedUserId = PackageManagerService.PLATFORM_PACKAGE_NAME.equals(packageName) ? 0 : targetUserId;
        IPackageManager pm = AppGlobals.getPackageManager();
        try {
            ApplicationInfo app2 = pm.getApplicationInfo(packageName, (long) GadgetFunction.NCM, instantiatedUserId);
            app = app2;
        } catch (RemoteException e) {
            app = null;
        }
        if (app == null) {
            Slog.w(TAG, "Unable to bind backup agent for " + packageName);
            return false;
        }
        if (app.backupAgentName != null) {
            ComponentName backupAgentName = new ComponentName(app.packageName, app.backupAgentName);
            int enableState = 0;
            try {
                enableState = pm.getComponentEnabledSetting(backupAgentName, instantiatedUserId);
            } catch (RemoteException e2) {
            }
            switch (enableState) {
                case 2:
                case 3:
                case 4:
                    Slog.w(TAG, "Unable to bind backup agent for " + backupAgentName + ", the backup agent component is disabled.");
                    return false;
            }
        }
        synchronized (this) {
            try {
                try {
                    try {
                        boostPriorityForLockedSection();
                        AppGlobals.getPackageManager().setPackageStoppedState(app.packageName, false, UserHandle.getUserId(app.uid));
                    } catch (Throwable th) {
                        th = th;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (RemoteException e3) {
                } catch (IllegalArgumentException e4) {
                    Slog.w(TAG, "Failed trying to unstop package " + app.packageName + ": " + e4);
                }
                try {
                    BackupRecord r = new BackupRecord(app, backupMode, targetUserId, operationType);
                    ComponentName hostingName = backupMode == 0 ? new ComponentName(app.packageName, app.backupAgentName) : new ComponentName(PackageManagerService.PLATFORM_PACKAGE_NAME, "FullBackupAgent");
                    ApplicationInfo app3 = app;
                    ProcessRecord proc = startProcessLocked(app.processName, app, false, 0, new HostingRecord(HostingRecord.HOSTING_TYPE_BACKUP, hostingName), 4, false, false);
                    if (proc == null) {
                        Slog.e(TAG, "Unable to start backup agent process " + r);
                        resetPriorityAfterLockedSection();
                        return false;
                    }
                    try {
                        if (UserHandle.isApp(app3.uid) && backupMode == 1) {
                            try {
                                proc.setInFullBackup(true);
                            } catch (Throwable th2) {
                                th = th2;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                        r.app = proc;
                        BackupRecord backupTarget = this.mBackupTargets.get(targetUserId);
                        int oldBackupUid2 = backupTarget != null ? backupTarget.appInfo.uid : -1;
                        int newBackupUid2 = proc.isInFullBackup() ? r.appInfo.uid : -1;
                        this.mBackupTargets.put(targetUserId, r);
                        proc.mProfile.addHostingComponentType(4);
                        updateOomAdjLocked(proc, "updateOomAdj_meh");
                        IApplicationThread thread = proc.getThread();
                        if (thread != null) {
                            if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                                Slog.v(TAG_BACKUP, "Agent proc already running: " + proc);
                            }
                            try {
                                newBackupUid = newBackupUid2;
                                oldBackupUid = oldBackupUid2;
                                i = -1;
                                try {
                                    thread.scheduleCreateBackupAgent(app3, compatibilityInfoForPackage(app3), backupMode, targetUserId, operationType);
                                } catch (RemoteException e5) {
                                }
                            } catch (RemoteException e6) {
                                newBackupUid = newBackupUid2;
                                oldBackupUid = oldBackupUid2;
                                i = -1;
                            }
                        } else {
                            newBackupUid = newBackupUid2;
                            oldBackupUid = oldBackupUid2;
                            i = -1;
                            if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
                                Slog.v(TAG_BACKUP, "Agent proc not running, waiting for attach");
                            }
                        }
                        resetPriorityAfterLockedSection();
                        JobSchedulerInternal js = (JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class);
                        if (oldBackupUid != i) {
                            js.removeBackingUpUid(oldBackupUid);
                        }
                        if (newBackupUid != i) {
                            js.addBackingUpUid(newBackupUid);
                            return true;
                        }
                        return true;
                    } catch (Throwable th3) {
                        th = th3;
                    }
                } catch (Throwable th4) {
                    th = th4;
                }
            } catch (Throwable th5) {
                th = th5;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void clearPendingBackup(int userId) {
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG_BACKUP, "clearPendingBackup: userId = " + userId + " callingUid = " + Binder.getCallingUid() + " uid = " + Process.myUid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                int indexOfKey = this.mBackupTargets.indexOfKey(userId);
                if (indexOfKey >= 0) {
                    BackupRecord backupTarget = this.mBackupTargets.valueAt(indexOfKey);
                    if (backupTarget != null && backupTarget.app != null) {
                        backupTarget.app.mProfile.clearHostingComponentType(4);
                    }
                    this.mBackupTargets.removeAt(indexOfKey);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        JobSchedulerInternal js = (JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class);
        js.clearAllBackingUpUids();
    }

    public void backupAgentCreated(String agentPackageName, IBinder agent, int userId) {
        int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, false, 2, "backupAgentCreated", null);
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG_BACKUP, "backupAgentCreated: " + agentPackageName + " = " + agent + " callingUserId = " + UserHandle.getCallingUserId() + " userId = " + userId2 + " callingUid = " + Binder.getCallingUid() + " uid = " + Process.myUid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                BackupRecord backupTarget = this.mBackupTargets.get(userId2);
                String backupAppName = backupTarget == null ? null : backupTarget.appInfo.packageName;
                if (!agentPackageName.equals(backupAppName)) {
                    Slog.e(TAG, "Backup agent created for " + agentPackageName + " but not requested!");
                    resetPriorityAfterLockedSection();
                    return;
                }
                resetPriorityAfterLockedSection();
                long oldIdent = Binder.clearCallingIdentity();
                try {
                    try {
                        IBackupManager bm = IBackupManager.Stub.asInterface(ServiceManager.getService(HostingRecord.HOSTING_TYPE_BACKUP));
                        bm.agentConnectedForUser(userId2, agentPackageName, agent);
                    } finally {
                        Binder.restoreCallingIdentity(oldIdent);
                    }
                } catch (RemoteException e) {
                } catch (Exception e2) {
                    Slog.w(TAG, "Exception trying to deliver BackupAgent binding: ");
                    e2.printStackTrace();
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [14109=4] */
    public void unbindBackupAgent(ApplicationInfo appInfo) {
        if (ActivityManagerDebugConfig.DEBUG_BACKUP) {
            Slog.v(TAG_BACKUP, "unbindBackupAgent: " + appInfo + " appInfo.uid = " + appInfo.uid + " callingUid = " + Binder.getCallingUid() + " uid = " + Process.myUid());
        }
        enforceCallingPermission("android.permission.CONFIRM_FULL_BACKUP", "unbindBackupAgent");
        if (appInfo == null) {
            Slog.w(TAG, "unbind backup agent for null app");
            return;
        }
        int userId = UserHandle.getUserId(appInfo.uid);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                BackupRecord backupTarget = this.mBackupTargets.get(userId);
                String backupAppName = backupTarget == null ? null : backupTarget.appInfo.packageName;
                if (backupAppName == null) {
                    Slog.w(TAG, "Unbinding backup agent with no active backup");
                    this.mBackupTargets.delete(userId);
                    resetPriorityAfterLockedSection();
                } else if (!backupAppName.equals(appInfo.packageName)) {
                    Slog.e(TAG, "Unbind of " + appInfo + " but is not the current backup target");
                    this.mBackupTargets.delete(userId);
                    resetPriorityAfterLockedSection();
                } else {
                    ProcessRecord proc = backupTarget.app;
                    updateOomAdjLocked(proc, "updateOomAdj_meh");
                    proc.setInFullBackup(false);
                    proc.mProfile.clearHostingComponentType(4);
                    int oldBackupUid = backupTarget != null ? backupTarget.appInfo.uid : -1;
                    IApplicationThread thread = proc.getThread();
                    if (thread != null) {
                        try {
                            thread.scheduleDestroyBackupAgent(appInfo, compatibilityInfoForPackage(appInfo), userId);
                        } catch (Exception e) {
                            Slog.e(TAG, "Exception when unbinding backup agent:");
                            e.printStackTrace();
                        }
                    }
                    this.mBackupTargets.delete(userId);
                    resetPriorityAfterLockedSection();
                    if (oldBackupUid != -1) {
                        JobSchedulerInternal js = (JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class);
                        js.removeBackingUpUid(oldBackupUid);
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    private boolean isInstantApp(ProcessRecord record, String callerPackage, int uid) {
        if (UserHandle.getAppId(uid) < 10000) {
            return false;
        }
        if (record != null) {
            return record.info.isInstantApp();
        }
        IPackageManager pm = AppGlobals.getPackageManager();
        if (callerPackage == null) {
            try {
                String[] packageNames = pm.getPackagesForUid(uid);
                if (packageNames == null || packageNames.length == 0) {
                    throw new IllegalArgumentException("Unable to determine caller package name");
                }
                callerPackage = packageNames[0];
            } catch (RemoteException e) {
                Slog.e(TAG, "Error looking up if " + callerPackage + " is an instant app.", e);
                return true;
            }
        }
        this.mAppOpsService.checkPackage(uid, callerPackage);
        return pm.isInstantApp(callerPackage, UserHandle.getUserId(uid));
    }

    boolean isPendingBroadcastProcessLocked(int pid) {
        return this.mFgBroadcastQueue.isPendingBroadcastProcessLocked(pid) || this.mBgBroadcastQueue.isPendingBroadcastProcessLocked(pid) || this.mBgOffloadBroadcastQueue.isPendingBroadcastProcessLocked(pid) || this.mFgOffloadBroadcastQueue.isPendingBroadcastProcessLocked(pid);
    }

    boolean isPendingBroadcastProcessLocked(ProcessRecord app) {
        return this.mFgBroadcastQueue.isPendingBroadcastProcessLocked(app) || this.mBgBroadcastQueue.isPendingBroadcastProcessLocked(app) || this.mBgOffloadBroadcastQueue.isPendingBroadcastProcessLocked(app) || this.mFgOffloadBroadcastQueue.isPendingBroadcastProcessLocked(app);
    }

    void skipPendingBroadcastLocked(int pid) {
        BroadcastQueue[] broadcastQueueArr;
        Slog.w(TAG, "Unattached app died before broadcast acknowledged, skipping");
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.skipPendingBroadcastLocked(pid);
        }
    }

    boolean sendPendingBroadcastsLocked(ProcessRecord app) {
        BroadcastQueue[] broadcastQueueArr;
        boolean didSomething = false;
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            didSomething |= queue.sendPendingBroadcastsLocked(app);
        }
        return didSomething;
    }

    void updateUidReadyForBootCompletedBroadcastLocked(int uid) {
        BroadcastQueue[] broadcastQueueArr;
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.updateUidReadyForBootCompletedBroadcastLocked(uid);
            queue.scheduleBroadcastsLocked();
        }
    }

    @Deprecated
    public Intent registerReceiver(IApplicationThread caller, String callerPackage, IIntentReceiver receiver, IntentFilter filter, String permission, int userId, int flags) {
        return registerReceiverWithFeature(caller, callerPackage, null, null, receiver, filter, permission, userId, flags);
    }

    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [14461=4, 14319=5] */
    public Intent registerReceiverWithFeature(IApplicationThread caller, String callerPackage, String callerFeatureId, String receiverId, IIntentReceiver receiver, IntentFilter filter, String permission, int userId, int flags) {
        int callingUid;
        String callerPackage2;
        ProcessRecord callerApp;
        int callingPid;
        boolean instantApp;
        int userId2;
        Iterator<String> actions;
        int[] userIds;
        ArrayList<Intent> stickyIntents;
        boolean onlyProtectedBroadcasts;
        int flags2;
        ArrayList<Intent> allSticky;
        ReceiverList rl;
        int callingUid2;
        int userId3;
        int N;
        int[] userIds2;
        String action;
        enforceNotIsolatedCaller("registerReceiver");
        int i = 0;
        boolean unexported = (flags & 4) != 0;
        if (this.mSdkSandboxSettings.isBroadcastReceiverRestrictionsEnforced() && Process.isSdkSandboxUid(Binder.getCallingUid()) && !unexported) {
            throw new SecurityException("SDK sandbox process not allowed to call registerReceiver");
        }
        boolean visibleToInstantApps = (flags & 1) != 0;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (caller != null) {
                    try {
                        ProcessRecord callerApp2 = getRecordForAppLOSP(caller);
                        if (callerApp2 == null) {
                            throw new SecurityException("Unable to find app for caller " + caller + " (pid=" + Binder.getCallingPid() + ") when registering receiver " + receiver);
                        }
                        if (callerApp2.info.uid != 1000 && !callerApp2.getPkgList().containsKey(callerPackage) && !PackageManagerService.PLATFORM_PACKAGE_NAME.equals(callerPackage)) {
                            throw new SecurityException("Given caller package " + callerPackage + " is not running in process " + callerApp2);
                        }
                        int callingUid3 = callerApp2.info.uid;
                        callingUid = callingUid3;
                        callerPackage2 = callerPackage;
                        callerApp = callerApp2;
                        callingPid = callerApp2.getPid();
                    } catch (Throwable th) {
                        th = th;
                    }
                } else {
                    try {
                        int callingUid4 = Binder.getCallingUid();
                        callingUid = callingUid4;
                        callerPackage2 = null;
                        callerApp = null;
                        callingPid = Binder.getCallingPid();
                    } catch (Throwable th2) {
                        th = th2;
                    }
                }
                try {
                    instantApp = isInstantApp(callerApp, callerPackage2, callingUid);
                    userId2 = this.mUserController.handleIncomingUser(callingPid, callingUid, userId, true, 2, "registerReceiver", callerPackage2);
                    try {
                        Iterator<String> actions2 = filter.actionsIterator();
                        if (actions2 == null) {
                            try {
                                ArrayList<String> noAction = new ArrayList<>(1);
                                noAction.add(null);
                                actions = noAction.iterator();
                            } catch (Throwable th3) {
                                th = th3;
                            }
                        } else {
                            actions = actions2;
                        }
                        userIds = new int[]{-1, UserHandle.getUserId(callingUid)};
                        stickyIntents = null;
                        onlyProtectedBroadcasts = true;
                    } catch (Throwable th4) {
                        th = th4;
                    }
                } catch (Throwable th5) {
                    th = th5;
                }
            } catch (Throwable th6) {
                th = th6;
            }
            while (true) {
                try {
                    boolean onlyProtectedBroadcasts2 = actions.hasNext();
                    if (!onlyProtectedBroadcasts2) {
                        break;
                    }
                    try {
                        String action2 = actions.next();
                        int length = userIds.length;
                        while (i < length) {
                            int id = userIds[i];
                            int i2 = length;
                            ArrayMap<String, ArrayList<Intent>> stickies = this.mStickyBroadcasts.get(id);
                            if (stickies != null) {
                                userIds2 = userIds;
                                action = action2;
                                ArrayList<Intent> intents = stickies.get(action);
                                if (intents != null) {
                                    if (stickyIntents == null) {
                                        stickyIntents = new ArrayList<>();
                                    }
                                    stickyIntents.addAll(intents);
                                }
                            } else {
                                userIds2 = userIds;
                                action = action2;
                            }
                            i++;
                            action2 = action;
                            userIds = userIds2;
                            length = i2;
                        }
                        int[] userIds3 = userIds;
                        String action3 = action2;
                        if (onlyProtectedBroadcasts) {
                            try {
                                onlyProtectedBroadcasts = AppGlobals.getPackageManager().isProtectedBroadcast(action3) & onlyProtectedBroadcasts;
                            } catch (RemoteException e) {
                                onlyProtectedBroadcasts = false;
                                Slog.w(TAG, "Remote exception", e);
                            }
                        }
                        userIds = userIds3;
                        i = 0;
                    } catch (Throwable th7) {
                        th = th7;
                    }
                } catch (Throwable th8) {
                    th = th8;
                }
                while (true) {
                    try {
                        break;
                    } catch (Throwable th9) {
                        th = th9;
                    }
                }
                resetPriorityAfterLockedSection();
                throw th;
            }
            boolean explicitExportStateDefined = (flags & 6) != 0;
            if ((flags & 2) != 0 && (flags & 4) != 0) {
                throw new IllegalArgumentException("Receiver can't specify both RECEIVER_EXPORTED and RECEIVER_NOT_EXPORTEDflag");
            }
            boolean requireExplicitFlagForDynamicReceivers = CompatChanges.isChangeEnabled((long) DYNAMIC_RECEIVER_EXPLICIT_EXPORT_REQUIRED, callingUid);
            if (onlyProtectedBroadcasts) {
                if ((flags & 4) == 0) {
                    flags2 = flags | 2;
                }
                flags2 = flags;
            } else if (receiver != null || explicitExportStateDefined) {
                if (requireExplicitFlagForDynamicReceivers && !explicitExportStateDefined) {
                    throw new SecurityException(callerPackage2 + ": One of RECEIVER_EXPORTED or RECEIVER_NOT_EXPORTED should be specified when a receiver isn't being registered exclusively for system broadcasts");
                }
                if (!requireExplicitFlagForDynamicReceivers && (flags & 4) == 0) {
                    flags2 = flags | 2;
                }
                flags2 = flags;
            } else {
                flags2 = flags | 2;
            }
            try {
                resetPriorityAfterLockedSection();
                boolean exported = (flags2 & 2) != 0;
                ArrayList<Intent> allSticky2 = null;
                if (stickyIntents != null) {
                    ContentResolver resolver = this.mContext.getContentResolver();
                    int i3 = 0;
                    int N2 = stickyIntents.size();
                    while (i3 < N2) {
                        Intent intent = stickyIntents.get(i3);
                        if (instantApp && (intent.getFlags() & 2097152) == 0) {
                            N = N2;
                        } else {
                            N = N2;
                            if (filter.match(resolver, intent, true, TAG) >= 0) {
                                if (allSticky2 == null) {
                                    allSticky2 = new ArrayList<>();
                                }
                                allSticky2.add(intent);
                            }
                        }
                        i3++;
                        N2 = N;
                    }
                    allSticky = allSticky2;
                } else {
                    allSticky = null;
                }
                Intent sticky = allSticky != null ? allSticky.get(0) : null;
                if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                    Slog.v(TAG_BROADCAST, "Register receiver " + filter + ": " + sticky);
                }
                if (receiver == null) {
                    return sticky;
                }
                if (callingPid != Process.myPid() && (filter.hasAction("com.android.server.net.action.SNOOZE_WARNING") || filter.hasAction("com.android.server.net.action.SNOOZE_RAPID"))) {
                    EventLog.writeEvent(1397638484, "177931370", Integer.valueOf(callingUid), "");
                }
                synchronized (this) {
                    try {
                        try {
                            boostPriorityForLockedSection();
                            if (callerApp != null) {
                                try {
                                    IApplicationThread thread = callerApp.getThread();
                                    if (thread == null || thread.asBinder() != caller.asBinder()) {
                                        resetPriorityAfterLockedSection();
                                        return null;
                                    }
                                } catch (Throwable th10) {
                                    e = th10;
                                    resetPriorityAfterLockedSection();
                                    throw e;
                                }
                            }
                            rl = this.mRegisteredReceivers.get(receiver.asBinder());
                            if (rl == null) {
                                try {
                                    int userId4 = callingPid;
                                    int callingPid2 = callingUid;
                                    callingUid2 = callingUid;
                                    try {
                                        ReceiverList rl2 = new ReceiverList(this, callerApp, userId4, callingPid2, userId2, receiver);
                                        if (rl2.app != null) {
                                            int totalReceiversForApp = rl2.app.mReceivers.numberOfReceivers();
                                            if (totalReceiversForApp >= 1000) {
                                                if (this.mRegisteredReceivers.size() > 0) {
                                                    for (ReceiverList r : this.mRegisteredReceivers.values()) {
                                                        Slog.d(TAG, "ReceiverList = " + r);
                                                        for (int i4 = 0; i4 < r.size(); i4++) {
                                                            IntentFilter object = r.get(i4);
                                                            new StringBuilder(256);
                                                            if (object instanceof BroadcastFilter) {
                                                                IntentFilter intentFilter = object;
                                                                intentFilter.printAction();
                                                            }
                                                        }
                                                    }
                                                }
                                                throw new IllegalStateException("Too many receivers, total of " + totalReceiversForApp + ", registered for pid: " + rl2.pid + ", callerPackage: " + callerPackage2);
                                            }
                                            rl2.app.mReceivers.addReceiver(rl2);
                                        } else {
                                            try {
                                                receiver.asBinder().linkToDeath(rl2, 0);
                                                rl2.linkedToDeath = true;
                                            } catch (RemoteException e2) {
                                                resetPriorityAfterLockedSection();
                                                return sticky;
                                            }
                                        }
                                        this.mRegisteredReceivers.put(receiver.asBinder(), rl2);
                                        userId3 = userId2;
                                        rl = rl2;
                                    } catch (Throwable th11) {
                                        e = th11;
                                        resetPriorityAfterLockedSection();
                                        throw e;
                                    }
                                } catch (Throwable th12) {
                                    e = th12;
                                }
                            } else {
                                int callingPid3 = callingPid;
                                callingUid2 = callingUid;
                                try {
                                    if (rl.uid != callingUid2) {
                                        throw new IllegalArgumentException("Receiver requested to register for uid " + callingUid2 + " was previously registered for uid " + rl.uid + " callerPackage is " + callerPackage2);
                                    }
                                    if (rl.pid != callingPid3) {
                                        throw new IllegalArgumentException("Receiver requested to register for pid " + callingPid3 + " was previously registered for pid " + rl.pid + " callerPackage is " + callerPackage2);
                                    }
                                    userId3 = userId2;
                                    if (rl.userId != userId3) {
                                        throw new IllegalArgumentException("Receiver requested to register for user " + userId3 + " was previously registered for user " + rl.userId + " callerPackage is " + callerPackage2);
                                    }
                                } catch (Throwable th13) {
                                    e = th13;
                                    resetPriorityAfterLockedSection();
                                    throw e;
                                }
                            }
                        } catch (Throwable th14) {
                            e = th14;
                        }
                        try {
                            ArrayList<Intent> allSticky3 = allSticky;
                            String callerPackage3 = callerPackage2;
                            BroadcastFilter bf = new BroadcastFilter(filter, rl, callerPackage2, callerFeatureId, receiverId, permission, callingUid2, userId3, instantApp, visibleToInstantApps, exported);
                            if (rl.containsFilter(filter)) {
                                Slog.w(TAG, "Receiver with filter " + filter + " already registered for pid " + rl.pid + ", callerPackage is " + callerPackage3);
                            } else {
                                rl.add(bf);
                                if (!bf.debugCheck()) {
                                    Slog.w(TAG, "==> For Dynamic broadcast");
                                }
                                this.mReceiverResolver.addFilter(getPackageManagerInternal().snapshot(), bf);
                            }
                            if (allSticky3 != null) {
                                ArrayList receivers = new ArrayList();
                                receivers.add(bf);
                                int stickyCount = allSticky3.size();
                                int i5 = 0;
                                while (i5 < stickyCount) {
                                    Intent intent2 = allSticky3.get(i5);
                                    BroadcastQueue queue = broadcastQueueForIntent(intent2);
                                    queue.enqueueParallelBroadcastLocked(new BroadcastRecord(queue, intent2, null, null, null, -1, -1, false, null, null, null, null, -1, null, receivers, null, 0, null, null, false, true, true, -1, false, null, false));
                                    queue.scheduleBroadcastsLocked();
                                    i5++;
                                    rl = rl;
                                }
                            }
                            resetPriorityAfterLockedSection();
                            return sticky;
                        } catch (Throwable th15) {
                            e = th15;
                            resetPriorityAfterLockedSection();
                            throw e;
                        }
                    } catch (Throwable th16) {
                        e = th16;
                    }
                }
            } catch (Throwable th17) {
                th = th17;
            }
        }
    }

    public void unregisterReceiver(IIntentReceiver receiver) {
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Slog.v(TAG_BROADCAST, "Unregister receiver: " + receiver);
        }
        long origId = Binder.clearCallingIdentity();
        boolean doTrim = false;
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                ReceiverList rl = this.mRegisteredReceivers.get(receiver.asBinder());
                if (rl != null) {
                    BroadcastRecord r = rl.curBroadcast;
                    if (r != null && r == r.queue.getMatchingOrderedReceiver(r)) {
                        boolean doNext = r.queue.finishReceiverLocked(r, r.resultCode, r.resultData, r.resultExtras, r.resultAbort, false);
                        if (doNext) {
                            doTrim = true;
                            r.queue.processNextBroadcastLocked(false, true);
                        }
                    }
                    if (rl.app != null) {
                        rl.app.mReceivers.removeReceiver(rl);
                    }
                    removeReceiverLocked(rl);
                    if (rl.linkedToDeath) {
                        rl.linkedToDeath = false;
                        rl.receiver.asBinder().unlinkToDeath(rl, 0);
                    }
                }
                if (doTrim) {
                    trimApplicationsLocked(false, "updateOomAdj_finishReceiver");
                    resetPriorityAfterLockedSection();
                    return;
                }
                resetPriorityAfterLockedSection();
            }
        } finally {
            Binder.restoreCallingIdentity(origId);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void removeReceiverLocked(ReceiverList rl) {
        this.mRegisteredReceivers.remove(rl.receiver.asBinder());
        for (int i = rl.size() - 1; i >= 0; i--) {
            this.mReceiverResolver.removeFilter(rl.get(i));
        }
    }

    private final void sendPackageBroadcastLocked(int cmd, String[] packages, int userId) {
        this.mProcessList.sendPackageBroadcastLocked(cmd, packages, userId);
    }

    private List<ResolveInfo> collectReceiverComponents(Intent intent, String resolvedType, int callingUid, int[] users, int[] broadcastAllowList) {
        List<ResolveInfo> newReceivers;
        int user;
        int i;
        List<ResolveInfo> newReceivers2;
        int i2;
        List<ResolveInfo> newReceivers3;
        int[] iArr = users;
        int length = iArr.length;
        List<ResolveInfo> receivers = null;
        HashSet<ComponentName> singleUserReceivers = null;
        boolean scannedFirstReceivers = false;
        int i3 = 0;
        while (i3 < length) {
            int user2 = iArr[i3];
            if (callingUid == 2000 && this.mUserController.hasUserRestriction("no_debugging_features", user2)) {
                i = i3;
            } else {
                List<ResolveInfo> newReceivers4 = this.mPackageManagerInt.queryIntentReceivers(intent, resolvedType, 268436480, callingUid, user2, true);
                if (user2 != 0 && newReceivers4 != null) {
                    int i4 = 0;
                    while (i4 < newReceivers4.size()) {
                        if ((newReceivers4.get(i4).activityInfo.flags & 536870912) != 0) {
                            newReceivers4.remove(i4);
                            i4--;
                        }
                        i4++;
                    }
                }
                if (newReceivers4 == null) {
                    newReceivers = newReceivers4;
                    user = user2;
                    i = i3;
                } else {
                    int i5 = newReceivers4.size() - 1;
                    while (i5 >= 0) {
                        int i6 = i5;
                        List<ResolveInfo> newReceivers5 = newReceivers4;
                        int user3 = user2;
                        int i7 = i3;
                        ComponentAliasResolver.Resolution<ResolveInfo> resolution = this.mComponentAliasResolver.resolveReceiver(intent, newReceivers4.get(i5), resolvedType, 268436480, user2, callingUid, true);
                        if (resolution == null) {
                            i2 = i6;
                            newReceivers3 = newReceivers5;
                            newReceivers3.remove(i2);
                        } else {
                            i2 = i6;
                            newReceivers3 = newReceivers5;
                            if (resolution.isAlias()) {
                                newReceivers3.set(i2, resolution.getTarget());
                            }
                        }
                        i5 = i2 - 1;
                        user2 = user3;
                        newReceivers4 = newReceivers3;
                        i3 = i7;
                    }
                    newReceivers = newReceivers4;
                    user = user2;
                    i = i3;
                }
                if (newReceivers != null && newReceivers.size() == 0) {
                    newReceivers2 = null;
                } else {
                    newReceivers2 = newReceivers;
                }
                if (receivers == null) {
                    receivers = newReceivers2;
                } else if (newReceivers2 != null) {
                    if (!scannedFirstReceivers) {
                        for (int i8 = 0; i8 < receivers.size(); i8++) {
                            ResolveInfo ri = receivers.get(i8);
                            if ((ri.activityInfo.flags & 1073741824) != 0) {
                                ComponentName cn = new ComponentName(ri.activityInfo.packageName, ri.activityInfo.name);
                                if (singleUserReceivers == null) {
                                    singleUserReceivers = new HashSet<>();
                                }
                                singleUserReceivers.add(cn);
                            }
                        }
                        scannedFirstReceivers = true;
                    }
                    for (int i9 = 0; i9 < newReceivers2.size(); i9++) {
                        ResolveInfo ri2 = newReceivers2.get(i9);
                        if ((ri2.activityInfo.flags & 1073741824) != 0) {
                            ComponentName cn2 = new ComponentName(ri2.activityInfo.packageName, ri2.activityInfo.name);
                            if (singleUserReceivers == null) {
                                singleUserReceivers = new HashSet<>();
                            }
                            if (!singleUserReceivers.contains(cn2)) {
                                singleUserReceivers.add(cn2);
                                receivers.add(ri2);
                            }
                        } else {
                            receivers.add(ri2);
                        }
                    }
                }
                CtaManagerFactory.getInstance().makeCtaManager().filterReceiver(this.mContext, intent, receivers, user);
            }
            i3 = i + 1;
            iArr = users;
        }
        if (receivers != null && broadcastAllowList != null) {
            for (int i10 = receivers.size() - 1; i10 >= 0; i10--) {
                int receiverAppId = UserHandle.getAppId(receivers.get(i10).activityInfo.applicationInfo.uid);
                if (receiverAppId >= 10000 && Arrays.binarySearch(broadcastAllowList, receiverAppId) < 0) {
                    receivers.remove(i10);
                }
            }
        }
        return receivers;
    }

    private void checkBroadcastFromSystem(Intent intent, ProcessRecord callerApp, String callerPackage, int callingUid, boolean isProtectedBroadcast, List receivers) {
        if ((intent.getFlags() & 4194304) != 0) {
            return;
        }
        String action = intent.getAction();
        if (isProtectedBroadcast || "android.intent.action.CLOSE_SYSTEM_DIALOGS".equals(action) || "com.android.intent.action.DISMISS_KEYBOARD_SHORTCUTS".equals(action) || "android.intent.action.MEDIA_BUTTON".equals(action) || "android.intent.action.MEDIA_SCANNER_SCAN_FILE".equals(action) || "com.android.intent.action.SHOW_KEYBOARD_SHORTCUTS".equals(action) || "android.intent.action.MASTER_CLEAR".equals(action) || "android.intent.action.FACTORY_RESET".equals(action) || "android.appwidget.action.APPWIDGET_CONFIGURE".equals(action) || "android.appwidget.action.APPWIDGET_UPDATE".equals(action) || "com.android.omadm.service.CONFIGURATION_UPDATE".equals(action) || "android.text.style.SUGGESTION_PICKED".equals(action) || "android.media.action.OPEN_AUDIO_EFFECT_CONTROL_SESSION".equals(action) || "android.media.action.CLOSE_AUDIO_EFFECT_CONTROL_SESSION".equals(action)) {
            return;
        }
        if (intent.getPackage() != null || intent.getComponent() != null) {
            if (receivers == null || receivers.size() == 0) {
                return;
            }
            boolean allProtected = true;
            int i = receivers.size() - 1;
            while (true) {
                if (i < 0) {
                    break;
                }
                Object target = receivers.get(i);
                if (target instanceof ResolveInfo) {
                    ResolveInfo ri = (ResolveInfo) target;
                    if (ri.activityInfo.exported && ri.activityInfo.permission == null) {
                        allProtected = false;
                        break;
                    }
                    i--;
                } else {
                    BroadcastFilter bf = (BroadcastFilter) target;
                    if (bf.requiredPermission != null) {
                        i--;
                    } else {
                        allProtected = false;
                        break;
                    }
                }
            }
            if (allProtected) {
                return;
            }
        }
        if (IActivityManagerServiceLice.Instance().checkBroadcastFromSystem(intent, callerApp, callerPackage, callingUid, isProtectedBroadcast, receivers)) {
            return;
        }
        if (callerApp != null) {
            Log.wtf(TAG, "Sending non-protected broadcast " + action + " from system " + callerApp.toShortString() + " pkg " + callerPackage, new Throwable());
        } else {
            Log.wtf(TAG, "Sending non-protected broadcast " + action + " from system uid " + UserHandle.formatUid(callingUid) + " pkg " + callerPackage, new Throwable());
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final int broadcastIntentLocked(ProcessRecord callerApp, String callerPackage, String callerFeatureId, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, String[] excludedPermissions, String[] excludedPackages, int appOp, Bundle bOptions, boolean ordered, boolean sticky, int callingPid, int callingUid, int realCallingUid, int realCallingPid, int userId) {
        return broadcastIntentLocked(callerApp, callerPackage, callerFeatureId, intent, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermissions, excludedPermissions, excludedPackages, appOp, bOptions, ordered, sticky, callingPid, callingUid, realCallingUid, realCallingPid, userId, false, null, null);
    }

    /* JADX DEBUG: Multi-variable search result rejected for r2v55, resolved type: boolean */
    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Code restructure failed: missing block: B:274:0x0763, code lost:
        if (r7.equals("android.intent.action.PACKAGES_UNSUSPENDED") != false) goto L446;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    final int broadcastIntentLocked(ProcessRecord callerApp, String callerPackage, String callerFeatureId, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, String[] excludedPermissions, String[] excludedPackages, int appOp, Bundle bOptions, boolean ordered, boolean sticky, int callingPid, int callingUid, int realCallingUid, int realCallingPid, int userId, boolean allowBackgroundActivityStarts, IBinder backgroundActivityStartsToken, int[] broadcastAllowList) {
        int[] broadcastAllowList2;
        Intent intent2;
        int i;
        String action;
        Intent intent3;
        int userId2;
        int userId3;
        int i2;
        boolean allowBackgroundActivityStarts2;
        IBinder backgroundActivityStartsToken2;
        BroadcastOptions brOptions;
        int i3;
        int i4;
        int i5;
        int i6;
        int i7;
        int i8;
        int userId4;
        boolean timeoutExempt;
        int[] users;
        int[] users2;
        List<BroadcastFilter> registeredReceivers;
        int[] broadcastAllowList3;
        boolean replacePending;
        Intent intent4;
        int NR;
        List receivers;
        int ir;
        Intent intent5;
        List receivers2;
        String pkgName;
        int[] users3;
        List<BroadcastFilter> registeredReceivers2;
        int i9;
        String action2;
        ArrayMap<String, ArrayList<Intent>> stickies;
        ArrayList<Intent> list;
        int i10;
        String action3;
        int userId5;
        boolean z;
        int i11;
        int userId6;
        String ssp;
        int i12;
        String ssp2;
        long j;
        int uid;
        UidRecord uidRec;
        int i13;
        int i14;
        int i15;
        int i16;
        int i17;
        boolean allowBackgroundActivityStarts3;
        IBinder backgroundActivityStartsToken3;
        ActivityManagerService activityManagerService = this;
        Intent intent6 = new Intent(intent);
        boolean callerInstantApp = activityManagerService.isInstantApp(callerApp, callerPackage, callingUid);
        if (callerInstantApp) {
            intent6.setFlags(intent6.getFlags() & (-2097153));
        }
        if (userId == -1 && broadcastAllowList != null) {
            Slog.e(TAG, "broadcastAllowList only applies when sending to individual users. Assuming restrictive whitelist.");
            broadcastAllowList2 = new int[0];
        } else {
            broadcastAllowList2 = broadcastAllowList;
        }
        intent6.addFlags(16);
        if (!activityManagerService.mProcessesReady && (intent6.getFlags() & 33554432) == 0) {
            intent6.addFlags(1073741824);
        }
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST_LIGHT) {
            Slog.v(TAG_BROADCAST, (sticky ? "Broadcast sticky: " : "Broadcast: ") + intent6 + " ordered=" + ordered + " userid=" + userId);
        }
        if (resultTo != null && !ordered) {
            Slog.w(TAG, "Broadcast " + intent6 + " not ordered but result callback requested!");
        }
        int[] broadcastAllowList4 = broadcastAllowList2;
        int userId7 = activityManagerService.mUserController.handleIncomingUser(callingPid, callingUid, userId, true, 0, "broadcast", callerPackage);
        if (userId7 == -1 || activityManagerService.mUserController.isUserOrItsParentRunning(userId7)) {
            intent2 = intent6;
        } else if (callingUid == 1000 && (intent6.getFlags() & 33554432) != 0) {
            intent2 = intent6;
        } else if ("android.intent.action.ACTION_SHUTDOWN".equals(intent6.getAction())) {
            intent2 = intent6;
        } else {
            Slog.w(TAG, "Skipping broadcast of " + intent6 + ": user " + userId7 + " and its parent (if any) are stopped");
            return -2;
        }
        String action4 = intent2.getAction();
        if (bOptions == null) {
            i = 1;
            action = action4;
            intent3 = intent2;
            userId2 = userId7;
            userId3 = callingPid;
            i2 = -1;
            allowBackgroundActivityStarts2 = allowBackgroundActivityStarts;
            backgroundActivityStartsToken2 = backgroundActivityStartsToken;
            brOptions = null;
        } else {
            BroadcastOptions brOptions2 = new BroadcastOptions(bOptions);
            if (brOptions2.getTemporaryAppAllowlistDuration() > 0) {
                i13 = realCallingUid;
                i14 = realCallingPid;
                if (checkComponentPermission("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", i14, i13, -1, true) != 0 && checkComponentPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", i14, i13, -1, true) != 0 && checkComponentPermission("android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND", i14, i13, -1, true) != 0) {
                    String msg = "Permission Denial: " + intent2.getAction() + " broadcast from " + callerPackage + " (pid=" + callingPid + ", uid=" + callingUid + ") requires android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST or android.permission.START_ACTIVITIES_FROM_BACKGROUND or android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND";
                    Slog.w(TAG, msg);
                    throw new SecurityException(msg);
                }
            } else {
                i13 = realCallingUid;
                i14 = realCallingPid;
            }
            if (brOptions2.isDontSendToRestrictedApps() && !activityManagerService.isUidActiveLOSP(callingUid) && activityManagerService.isBackgroundRestrictedNoCheck(callingUid, callerPackage)) {
                Slog.i(TAG, "Not sending broadcast " + action4 + " - app " + callerPackage + " has background restrictions");
                return -96;
            }
            if (!ITranActivityManagerService.Instance().isAppIdleEnable()) {
                i15 = i14;
                i16 = i13;
                action = action4;
                intent3 = intent2;
                userId2 = userId7;
                i17 = callingPid;
            } else if (activityManagerService.mWakefulness.get() == 1) {
                i15 = i14;
                i16 = i13;
                action = action4;
                intent3 = intent2;
                userId2 = userId7;
                i17 = callingPid;
            } else {
                i15 = i14;
                i16 = i13;
                action = action4;
                intent3 = intent2;
                userId2 = userId7;
                i17 = callingPid;
                if (ITranActivityManagerService.Instance().limitReceiver(callerApp, callerPackage, intent2, !activityManagerService.isUidActiveLOSP(callingUid), false, callingUid, ordered, sticky)) {
                    Slog.d(TAG, "TranAppIdleMgr limit broadcast callingPackage=" + callerPackage + ",intent=" + intent3);
                    return -96;
                }
            }
            if (!brOptions2.allowsBackgroundActivityStarts()) {
                i = 1;
                i2 = -1;
                allowBackgroundActivityStarts3 = allowBackgroundActivityStarts;
                backgroundActivityStartsToken3 = backgroundActivityStartsToken;
            } else {
                i = 1;
                i2 = -1;
                if (checkComponentPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", i15, i16, -1, true) != 0) {
                    String msg2 = "Permission Denial: " + intent3.getAction() + " broadcast from " + callerPackage + " (pid=" + i17 + ", uid=" + callingUid + ") requires android.permission.START_ACTIVITIES_FROM_BACKGROUND";
                    Slog.w(TAG, msg2);
                    throw new SecurityException(msg2);
                }
                allowBackgroundActivityStarts3 = true;
                backgroundActivityStartsToken3 = null;
            }
            if (brOptions2.getIdForResponseEvent() <= 0) {
                userId3 = i17;
                activityManagerService = this;
            } else {
                userId3 = i17;
                activityManagerService = this;
                activityManagerService.enforcePermission("android.permission.ACCESS_BROADCAST_RESPONSE_STATS", userId3, callingUid, "recordResponseEventWhileInBackground");
            }
            brOptions = brOptions2;
            allowBackgroundActivityStarts2 = allowBackgroundActivityStarts3;
            backgroundActivityStartsToken2 = backgroundActivityStartsToken3;
        }
        try {
            String action5 = action;
            try {
                boolean isProtectedBroadcast = AppGlobals.getPackageManager().isProtectedBroadcast(action5);
                switch (UserHandle.getAppId(callingUid)) {
                    case 0:
                    case 1000:
                    case 1001:
                    case 1002:
                    case UsbTerminalTypes.TERMINAL_BIDIR_SKRPHONE /* 1027 */:
                    case 1068:
                    case 1073:
                        i3 = 1;
                        i4 = i;
                        break;
                    default:
                        i4 = i;
                        i3 = (callerApp == null || !callerApp.isPersistent()) ? 0 : i4;
                        break;
                }
                if (i3 == 0 && !activityManagerService.isTpms(callingUid)) {
                    if (isProtectedBroadcast) {
                        String msg3 = "Permission Denial: not allowed to send broadcast " + action5 + " from pid=" + userId3 + ", uid=" + callingUid;
                        Slog.w(TAG, msg3);
                        throw new SecurityException(msg3);
                    } else if ("android.appwidget.action.APPWIDGET_CONFIGURE".equals(action5) || "android.appwidget.action.APPWIDGET_UPDATE".equals(action5)) {
                        if (callerPackage == null) {
                            String msg4 = "Permission Denial: not allowed to send broadcast " + action5 + " from unknown caller.";
                            Slog.w(TAG, msg4);
                            throw new SecurityException(msg4);
                        } else if (intent3.getComponent() != null) {
                            if (!intent3.getComponent().getPackageName().equals(callerPackage)) {
                                String msg5 = "Permission Denial: not allowed to send broadcast " + action5 + " to " + intent3.getComponent().getPackageName() + " from " + callerPackage;
                                Slog.w(TAG, msg5);
                                throw new SecurityException(msg5);
                            }
                        } else {
                            intent3.setPackage(callerPackage);
                        }
                    }
                }
                boolean timeoutExempt2 = false;
                if (action5 == null) {
                    i5 = userId3;
                    i6 = i2;
                    i7 = 1073741824;
                    i8 = i4;
                    userId4 = userId2;
                    timeoutExempt = false;
                } else {
                    if (getBackgroundLaunchBroadcasts().contains(action5)) {
                        if (ActivityManagerDebugConfig.DEBUG_BACKGROUND_CHECK) {
                            Slog.i(TAG, "Broadcast action " + action5 + " forcing include-background");
                        }
                        intent3.addFlags(16777216);
                    }
                    if (Process.isSdkSandboxUid(realCallingUid)) {
                        SdkSandboxManagerLocal sdkSandboxManagerLocal = (SdkSandboxManagerLocal) LocalManagerRegistry.getManager(SdkSandboxManagerLocal.class);
                        if (sdkSandboxManagerLocal == null) {
                            throw new IllegalStateException("SdkSandboxManagerLocal not found when sending a broadcast from an SDK sandbox uid.");
                        }
                        sdkSandboxManagerLocal.enforceAllowedToSendBroadcast(intent3);
                    }
                    char c = 6;
                    switch (action5.hashCode()) {
                        case -2098526293:
                            if (action5.equals("android.hardware.action.NEW_VIDEO")) {
                                i10 = 16;
                                break;
                            }
                            i10 = i2;
                            break;
                        case -1749672628:
                            if (action5.equals("android.intent.action.UID_REMOVED")) {
                                i10 = i4;
                                break;
                            }
                            i10 = i2;
                            break;
                        case -1403934493:
                            if (action5.equals("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE")) {
                                i10 = 4;
                                break;
                            }
                            i10 = i2;
                            break;
                        case -1338021860:
                            if (action5.equals("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE")) {
                                i10 = 5;
                                break;
                            }
                            i10 = i2;
                            break;
                        case -1001645458:
                            if (action5.equals("android.intent.action.PACKAGES_SUSPENDED")) {
                                i10 = 6;
                                break;
                            }
                            i10 = i2;
                            break;
                        case -810471698:
                            if (action5.equals("android.intent.action.PACKAGE_REPLACED")) {
                                i10 = 8;
                                break;
                            }
                            i10 = i2;
                            break;
                        case -403228793:
                            if (action5.equals("android.intent.action.CLOSE_SYSTEM_DIALOGS")) {
                                i10 = 20;
                                break;
                            }
                            i10 = i2;
                            break;
                        case 172491798:
                            if (action5.equals("android.intent.action.PACKAGE_CHANGED")) {
                                i10 = 3;
                                break;
                            }
                            i10 = i2;
                            break;
                        case 183904262:
                            if (action5.equals("android.intent.action.PROXY_CHANGE")) {
                                i10 = 14;
                                break;
                            }
                            i10 = i2;
                            break;
                        case 267468725:
                            if (action5.equals("android.intent.action.PACKAGE_DATA_CLEARED")) {
                                i10 = 10;
                                break;
                            }
                            i10 = i2;
                            break;
                        case 502473491:
                            if (action5.equals("android.intent.action.TIMEZONE_CHANGED")) {
                                i10 = 11;
                                break;
                            }
                            i10 = i2;
                            break;
                        case 505380757:
                            if (action5.equals("android.intent.action.TIME_SET")) {
                                i10 = 12;
                                break;
                            }
                            i10 = i2;
                            break;
                        case 525384130:
                            if (action5.equals("android.intent.action.PACKAGE_REMOVED")) {
                                i10 = 2;
                                break;
                            }
                            i10 = i2;
                            break;
                        case 555021408:
                            if (action5.equals("com.android.launcher.action.INSTALL_SHORTCUT")) {
                                i10 = 18;
                                break;
                            }
                            i10 = i2;
                            break;
                        case 789737439:
                            if (action5.equals("android.intent.action.PRE_BOOT_COMPLETED")) {
                                i10 = 19;
                                break;
                            }
                            i10 = i2;
                            break;
                        case 852070077:
                            if (action5.equals("android.intent.action.MEDIA_SCANNER_SCAN_FILE")) {
                                i10 = 0;
                                break;
                            }
                            i10 = i2;
                            break;
                        case 920338478:
                            if (action5.equals("android.hardware.action.NEW_PICTURE")) {
                                i10 = 15;
                                break;
                            }
                            i10 = i2;
                            break;
                        case 1290767157:
                            if (action5.equals("android.intent.action.PACKAGES_UNSUSPENDED")) {
                                i10 = 7;
                                break;
                            }
                            i10 = i2;
                            break;
                        case 1544582882:
                            if (action5.equals("android.intent.action.PACKAGE_ADDED")) {
                                i10 = 9;
                                break;
                            }
                            i10 = i2;
                            break;
                        case 1664215986:
                            if (action5.equals("android.net.action.CLEAR_DNS_CACHE")) {
                                i10 = 13;
                                break;
                            }
                            i10 = i2;
                            break;
                        case 1862858502:
                            if (action5.equals("android.security.action.TRUST_STORE_CHANGED")) {
                                i10 = 17;
                                break;
                            }
                            i10 = i2;
                            break;
                        default:
                            i10 = i2;
                            break;
                    }
                    switch (i10) {
                        case 0:
                            action3 = action5;
                            i5 = userId3;
                            i6 = i2;
                            userId5 = userId2;
                            i7 = 1073741824;
                            i8 = i4;
                            UserManagerInternal umInternal = (UserManagerInternal) LocalServices.getService(UserManagerInternal.class);
                            UserInfo userInfo = umInternal.getUserInfo(userId5);
                            if (userInfo != null && userInfo.isCloneProfile()) {
                                userId5 = umInternal.getProfileParentId(userId5);
                            }
                            if (userInfo != null && userInfo.isDualProfile()) {
                                userId5 = umInternal.getProfileParentId(userId5);
                                break;
                            }
                            break;
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                            int userId8 = userId2;
                            i7 = 1073741824;
                            if (checkComponentPermission("android.permission.BROADCAST_PACKAGE_REMOVED", userId3, callingUid, -1, i4) != 0) {
                                String msg6 = "Permission Denial: " + intent3.getAction() + " broadcast from " + callerPackage + " (pid=" + callingPid + ", uid=" + callingUid + ") requires android.permission.BROADCAST_PACKAGE_REMOVED";
                                Slog.w(TAG, msg6);
                                throw new SecurityException(msg6);
                            }
                            switch (action5.hashCode()) {
                                case -1749672628:
                                    if (action5.equals("android.intent.action.UID_REMOVED")) {
                                        c = 0;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case -1403934493:
                                    if (action5.equals("android.intent.action.EXTERNAL_APPLICATIONS_UNAVAILABLE")) {
                                        c = 1;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case -1338021860:
                                    if (action5.equals("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE")) {
                                        c = 2;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case -1001645458:
                                    if (action5.equals("android.intent.action.PACKAGES_SUSPENDED")) {
                                        c = 5;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 172491798:
                                    if (action5.equals("android.intent.action.PACKAGE_CHANGED")) {
                                        c = 4;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 525384130:
                                    if (action5.equals("android.intent.action.PACKAGE_REMOVED")) {
                                        c = 3;
                                        break;
                                    }
                                    c = 65535;
                                    break;
                                case 1290767157:
                                    break;
                                default:
                                    c = 65535;
                                    break;
                            }
                            switch (c) {
                                case 0:
                                    userId5 = userId8;
                                    action3 = action5;
                                    i8 = 1;
                                    i6 = -1;
                                    int uid2 = activityManagerService.getUidFromIntent(intent3);
                                    if (uid2 >= 0) {
                                        activityManagerService.mBatteryStatsService.removeUid(uid2);
                                        if (intent3.getBooleanExtra("android.intent.extra.REPLACING", false)) {
                                            activityManagerService.mAppOpsService.resetAllModes(UserHandle.getUserId(uid2), intent3.getStringExtra("android.intent.extra.PACKAGE_NAME"));
                                            break;
                                        } else {
                                            activityManagerService.mAppOpsService.uidRemoved(uid2);
                                            break;
                                        }
                                    } else {
                                        break;
                                    }
                                case 1:
                                    action3 = action5;
                                    i8 = 1;
                                    int i18 = -1;
                                    String[] list2 = intent3.getStringArrayExtra("android.intent.extra.changed_package_list");
                                    if (list2 == null || list2.length <= 0) {
                                        userId5 = userId8;
                                        i6 = -1;
                                        break;
                                    } else {
                                        int i19 = 0;
                                        while (i19 < list2.length) {
                                            forceStopPackageLocked(list2[i19], -1, false, true, true, false, false, userId8, "storage unmount");
                                            i19++;
                                            i18 = i18;
                                        }
                                        i6 = i18;
                                        activityManagerService.mAtmInternal.cleanupRecentTasksForUser(i6);
                                        userId5 = userId8;
                                        i8 = 1;
                                        activityManagerService.sendPackageBroadcastLocked(1, list2, userId5);
                                        break;
                                    }
                                    break;
                                case 2:
                                    action3 = action5;
                                    i8 = 1;
                                    activityManagerService.mAtmInternal.cleanupRecentTasksForUser(-1);
                                    userId5 = userId8;
                                    i6 = -1;
                                    break;
                                case 3:
                                case 4:
                                    Uri data = intent3.getData();
                                    if (data != null) {
                                        String ssp3 = data.getSchemeSpecificPart();
                                        if (ssp3 != null) {
                                            boolean removed = "android.intent.action.PACKAGE_REMOVED".equals(action5);
                                            boolean replacing = intent3.getBooleanExtra("android.intent.extra.REPLACING", false);
                                            boolean killProcess = !intent3.getBooleanExtra("android.intent.extra.DONT_KILL_APP", false);
                                            boolean fullUninstall = removed && !replacing;
                                            if (removed) {
                                                if (killProcess) {
                                                    action3 = action5;
                                                    userId6 = userId8;
                                                    forceStopPackageLocked(ssp3, UserHandle.getAppId(intent3.getIntExtra("android.intent.extra.UID", -1)), false, true, true, false, fullUninstall, userId6, removed ? "pkg removed" : "pkg changed");
                                                    ssp = ssp3;
                                                    getPackageManagerInternal().onPackageProcessKilledForUninstall(ssp);
                                                    i11 = -1;
                                                } else {
                                                    ssp = ssp3;
                                                    action3 = action5;
                                                    i11 = -1;
                                                    userId6 = userId8;
                                                    activityManagerService.forceStopAppZygoteLocked(ssp, UserHandle.getAppId(intent3.getIntExtra("android.intent.extra.UID", -1)), userId6);
                                                }
                                                if (killProcess) {
                                                    i12 = 0;
                                                } else {
                                                    i12 = 2;
                                                }
                                                int cmd = i12;
                                                i8 = 1;
                                                z = false;
                                                activityManagerService.sendPackageBroadcastLocked(cmd, new String[]{ssp}, userId6);
                                                if (fullUninstall) {
                                                    activityManagerService.mAppOpsService.packageRemoved(intent3.getIntExtra("android.intent.extra.UID", i11), ssp);
                                                    activityManagerService.mUgmInternal.removeUriPermissionsForPackage(ssp, userId6, true, false);
                                                    activityManagerService.mAtmInternal.removeRecentTasksByPackageName(ssp, userId6);
                                                    activityManagerService.mServices.forceStopPackageLocked(ssp, userId6);
                                                    activityManagerService.mAtmInternal.onPackageUninstalled(ssp, userId6);
                                                    activityManagerService.mBatteryStatsService.notePackageUninstalled(ssp);
                                                }
                                            } else {
                                                action3 = action5;
                                                z = false;
                                                i8 = 1;
                                                i11 = -1;
                                                userId6 = userId8;
                                                if (killProcess) {
                                                    int extraUid = intent3.getIntExtra("android.intent.extra.UID", -1);
                                                    synchronized (activityManagerService.mProcLock) {
                                                        try {
                                                            boostPriorityForProcLockedSection();
                                                            activityManagerService.mProcessList.killPackageProcessesLSP(ssp3, UserHandle.getAppId(extraUid), userId6, -10000, 10, 25, "change " + ssp3);
                                                        } catch (Throwable th) {
                                                            resetPriorityAfterProcLockedSection();
                                                            throw th;
                                                        }
                                                    }
                                                    resetPriorityAfterProcLockedSection();
                                                }
                                                activityManagerService.cleanupDisabledPackageComponentsLocked(ssp3, userId6, intent3.getStringArrayExtra("android.intent.extra.changed_component_name_list"));
                                                activityManagerService.mServices.schedulePendingServiceStartLocked(ssp3, userId6);
                                            }
                                            userId5 = userId6;
                                            i6 = i11;
                                            break;
                                        } else {
                                            action3 = action5;
                                            i8 = 1;
                                            userId5 = userId8;
                                            i6 = -1;
                                            break;
                                        }
                                    } else {
                                        action3 = action5;
                                        i8 = 1;
                                        userId5 = userId8;
                                        i6 = -1;
                                        break;
                                    }
                                case 5:
                                case 6:
                                    boolean suspended = "android.intent.action.PACKAGES_SUSPENDED".equals(intent3.getAction());
                                    String[] packageNames = intent3.getStringArrayExtra("android.intent.extra.changed_package_list");
                                    int userIdExtra = intent3.getIntExtra("android.intent.extra.user_handle", -10000);
                                    activityManagerService.mAtmInternal.onPackagesSuspendedChanged(packageNames, suspended, userIdExtra);
                                    userId5 = userId8;
                                    action3 = action5;
                                    i8 = 1;
                                    i6 = -1;
                                    break;
                                default:
                                    userId5 = userId8;
                                    action3 = action5;
                                    i8 = 1;
                                    i6 = -1;
                                    break;
                            }
                            i5 = callingPid;
                            break;
                            break;
                        case 8:
                            int userId9 = userId2;
                            i7 = 1073741824;
                            Uri data2 = intent3.getData();
                            if (data2 != null) {
                                String ssp4 = data2.getSchemeSpecificPart();
                                if (ssp4 == null) {
                                    userId5 = userId9;
                                    action3 = action5;
                                    i5 = userId3;
                                    i6 = -1;
                                    i8 = 1;
                                    break;
                                } else {
                                    ApplicationInfo aInfo = null;
                                    try {
                                        aInfo = AppGlobals.getPackageManager().getApplicationInfo(ssp4, (long) GadgetFunction.NCM, userId9);
                                    } catch (RemoteException e) {
                                    }
                                    if (aInfo == null) {
                                        Slog.w(TAG, "Dropping ACTION_PACKAGE_REPLACED for non-existent pkg: ssp=" + ssp4 + " data=" + data2);
                                        return 0;
                                    }
                                    activityManagerService.updateAssociationForApp(aInfo);
                                    activityManagerService.mAtmInternal.onPackageReplaced(aInfo);
                                    activityManagerService.mServices.updateServiceApplicationInfoLocked(aInfo);
                                    activityManagerService.sendPackageBroadcastLocked(3, new String[]{ssp4}, userId9);
                                    userId5 = userId9;
                                    action3 = action5;
                                    i5 = userId3;
                                    i6 = -1;
                                    i8 = 1;
                                    break;
                                }
                            } else {
                                userId5 = userId9;
                                action3 = action5;
                                i5 = userId3;
                                i6 = -1;
                                i8 = 1;
                                break;
                            }
                        case 9:
                            int userId10 = userId2;
                            i7 = 1073741824;
                            Uri data3 = intent3.getData();
                            if (data3 != null) {
                                String ssp5 = data3.getSchemeSpecificPart();
                                if (ssp5 != null) {
                                    boolean replacing2 = intent3.getBooleanExtra("android.intent.extra.REPLACING", false);
                                    activityManagerService.mAtmInternal.onPackageAdded(ssp5, replacing2);
                                    try {
                                        ApplicationInfo ai = AppGlobals.getPackageManager().getApplicationInfo(ssp5, (long) GadgetFunction.NCM, 0);
                                        BatteryStatsService batteryStatsService = activityManagerService.mBatteryStatsService;
                                        if (ai != null) {
                                            ssp2 = ssp5;
                                            try {
                                                j = ai.longVersionCode;
                                            } catch (RemoteException e2) {
                                            }
                                        } else {
                                            ssp2 = ssp5;
                                            j = 0;
                                        }
                                        try {
                                            batteryStatsService.notePackageInstalled(ssp2, j);
                                        } catch (RemoteException e3) {
                                        }
                                    } catch (RemoteException e4) {
                                    }
                                    userId5 = userId10;
                                    action3 = action5;
                                    i5 = userId3;
                                    i8 = 1;
                                    i6 = -1;
                                    break;
                                } else {
                                    userId5 = userId10;
                                    action3 = action5;
                                    i5 = userId3;
                                    i8 = 1;
                                    i6 = -1;
                                    break;
                                }
                            } else {
                                userId5 = userId10;
                                action3 = action5;
                                i5 = userId3;
                                i8 = 1;
                                i6 = -1;
                                break;
                            }
                        case 10:
                            Uri data4 = intent3.getData();
                            if (data4 != null) {
                                String ssp6 = data4.getSchemeSpecificPart();
                                if (ssp6 == null) {
                                    userId5 = userId2;
                                    action3 = action5;
                                    i5 = userId3;
                                    i6 = i2;
                                    i7 = 1073741824;
                                    i8 = i4;
                                    break;
                                } else {
                                    int userId11 = userId2;
                                    activityManagerService.mAtmInternal.onPackageDataCleared(ssp6, userId11);
                                    userId5 = userId11;
                                    action3 = action5;
                                    i5 = userId3;
                                    i6 = i2;
                                    i7 = 1073741824;
                                    i8 = i4;
                                    break;
                                }
                            } else {
                                userId5 = userId2;
                                action3 = action5;
                                i5 = userId3;
                                i6 = i2;
                                i7 = 1073741824;
                                i8 = i4;
                                break;
                            }
                        case 11:
                            activityManagerService.mHandler.sendEmptyMessage(13);
                            action3 = action5;
                            i5 = userId3;
                            i6 = i2;
                            userId5 = userId2;
                            i7 = 1073741824;
                            i8 = i4;
                            break;
                        case 12:
                            int timeFormatPreferenceMsgValue = intent3.getIntExtra("android.intent.extra.TIME_PREF_24_HOUR_FORMAT", i2);
                            if (timeFormatPreferenceMsgValue != i2) {
                                Message updateTimePreferenceMsg = activityManagerService.mHandler.obtainMessage(41, timeFormatPreferenceMsgValue, 0);
                                activityManagerService.mHandler.sendMessage(updateTimePreferenceMsg);
                            }
                            activityManagerService.mBatteryStatsService.noteCurrentTimeChanged();
                            action3 = action5;
                            i5 = userId3;
                            i6 = i2;
                            userId5 = userId2;
                            i7 = 1073741824;
                            i8 = i4;
                            break;
                        case 13:
                            activityManagerService.mHandler.sendEmptyMessage(28);
                            i7 = 1073741824;
                            action3 = action5;
                            i5 = userId3;
                            i6 = i2;
                            userId5 = userId2;
                            i8 = i4;
                            break;
                        case 14:
                            MainHandler mainHandler = activityManagerService.mHandler;
                            mainHandler.sendMessage(mainHandler.obtainMessage(29));
                            i7 = 1073741824;
                            action3 = action5;
                            i5 = userId3;
                            i6 = i2;
                            userId5 = userId2;
                            i8 = i4;
                            break;
                        case 15:
                        case 16:
                            intent3.addFlags(1073741824);
                            i7 = 1073741824;
                            action3 = action5;
                            i5 = userId3;
                            i6 = i2;
                            userId5 = userId2;
                            i8 = i4;
                            break;
                        case 17:
                            activityManagerService.mHandler.sendEmptyMessage(63);
                            action3 = action5;
                            i5 = userId3;
                            i6 = i2;
                            userId5 = userId2;
                            i7 = 1073741824;
                            i8 = i4;
                            break;
                        case 18:
                            Log.w(TAG, "Broadcast " + action5 + " no longer supported. It will not be delivered.");
                            return 0;
                        case 19:
                            timeoutExempt2 = true;
                            action3 = action5;
                            i5 = userId3;
                            i6 = i2;
                            userId5 = userId2;
                            i7 = 1073741824;
                            i8 = i4;
                            break;
                        case 20:
                            if (activityManagerService.mAtmInternal.checkCanCloseSystemDialogs(userId3, callingUid, callerPackage)) {
                                action3 = action5;
                                i5 = userId3;
                                i6 = i2;
                                userId5 = userId2;
                                i7 = 1073741824;
                                i8 = i4;
                                break;
                            } else {
                                return 0;
                            }
                        default:
                            action3 = action5;
                            i5 = userId3;
                            i6 = i2;
                            userId5 = userId2;
                            i7 = 1073741824;
                            i8 = i4;
                            break;
                    }
                    action5 = action3;
                    if (("android.intent.action.PACKAGE_ADDED".equals(action5) || "android.intent.action.PACKAGE_REMOVED".equals(action5) || "android.intent.action.PACKAGE_REPLACED".equals(action5)) && (uid = activityManagerService.getUidFromIntent(intent3)) != i6 && (uidRec = activityManagerService.mProcessList.getUidRecordLOSP(uid)) != null) {
                        uidRec.updateHasInternetPermission();
                    }
                    userId4 = userId5;
                    timeoutExempt = timeoutExempt2;
                }
                if (sticky) {
                    if (activityManagerService.checkPermission("android.permission.BROADCAST_STICKY", i5, callingUid) != 0) {
                        String msg7 = "Permission Denial: broadcastIntent() requesting a sticky broadcast from pid=" + i5 + ", uid=" + callingUid + " requires android.permission.BROADCAST_STICKY";
                        Slog.w(TAG, msg7);
                        throw new SecurityException(msg7);
                    } else if (requiredPermissions != null && requiredPermissions.length > 0) {
                        Slog.w(TAG, "Can't broadcast sticky intent " + intent3 + " and enforce permissions " + Arrays.toString(requiredPermissions));
                        return i6;
                    } else if (intent3.getComponent() != null) {
                        throw new SecurityException("Sticky broadcasts can't target a specific component");
                    } else {
                        if (userId4 != i6 && (stickies = activityManagerService.mStickyBroadcasts.get(i6)) != null && (list = stickies.get(intent3.getAction())) != null) {
                            int N = list.size();
                            for (int i20 = 0; i20 < N; i20++) {
                                if (intent3.filterEquals(list.get(i20))) {
                                    throw new IllegalArgumentException("Sticky broadcast " + intent3 + " for user " + userId4 + " conflicts with existing global broadcast");
                                }
                            }
                        }
                        ArrayMap<String, ArrayList<Intent>> stickies2 = activityManagerService.mStickyBroadcasts.get(userId4);
                        if (stickies2 == null) {
                            stickies2 = new ArrayMap<>();
                            activityManagerService.mStickyBroadcasts.put(userId4, stickies2);
                        }
                        ArrayList<Intent> list3 = stickies2.get(intent3.getAction());
                        if (list3 == null) {
                            list3 = new ArrayList<>();
                            stickies2.put(intent3.getAction(), list3);
                        }
                        int stickiesCount = list3.size();
                        int i21 = 0;
                        while (true) {
                            if (i21 < stickiesCount) {
                                if (!intent3.filterEquals(list3.get(i21))) {
                                    i21++;
                                } else {
                                    list3.set(i21, new Intent(intent3));
                                }
                            }
                        }
                        if (i21 >= stickiesCount) {
                            list3.add(new Intent(intent3));
                        }
                    }
                }
                int userId12 = userId4;
                ITranActivityManagerService.Instance().onBroadcastIntent(callerPackage, intent3, bOptions, callingUid, callingPid);
                if (userId12 == i6) {
                    users = activityManagerService.mUserController.getStartedUserArray();
                } else {
                    int[] users4 = new int[i8];
                    users4[0] = userId12;
                    users = users4;
                }
                List receivers3 = null;
                if ((intent3.getFlags() & i7) != 0) {
                    users2 = users;
                } else {
                    users2 = users;
                    receivers3 = collectReceiverComponents(intent3, resolvedType, callingUid, users, broadcastAllowList4);
                    if (TranAmHooker.hasBroadcastFinishCallback(resultTo)) {
                        if (ITranGriffinFeature.Instance().isGriffinSupport()) {
                            Slog.d("Griffin/filterReceiveBroadcast", "not limit " + intent3 + " for resultTo not null");
                        }
                    } else {
                        ITranActivityManagerService.Instance().hookPmFilterReceiveBroadcast(callerApp != null ? callerApp.processWrapper : null, callingPid, callingUid, intent3, receivers3);
                    }
                }
                if (intent3.getComponent() != null) {
                    registeredReceivers = null;
                } else {
                    PackageDataSnapshot snapshot = getPackageManagerInternal().snapshot();
                    if (userId12 == i6 && callingUid == 2000) {
                        int i22 = 0;
                        List<BroadcastFilter> registeredReceivers3 = null;
                        while (i22 < users2.length) {
                            if (activityManagerService.mUserController.hasUserRestriction("no_debugging_features", users2[i22])) {
                                i9 = i22;
                                action2 = action5;
                                users3 = users2;
                                registeredReceivers2 = registeredReceivers3;
                            } else {
                                IntentResolver<BroadcastFilter, BroadcastFilter> intentResolver = activityManagerService.mReceiverResolver;
                                int i23 = users2[i22];
                                users3 = users2;
                                registeredReceivers2 = registeredReceivers3;
                                i9 = i22;
                                action2 = action5;
                                List<BroadcastFilter> registeredReceiversForUser = intentResolver.queryIntent(snapshot, intent3, resolvedType, false, i23);
                                if (registeredReceivers2 == null) {
                                    registeredReceivers3 = registeredReceiversForUser;
                                    i22 = i9 + 1;
                                    users2 = users3;
                                    action5 = action2;
                                } else if (registeredReceiversForUser != null) {
                                    registeredReceivers2.addAll(registeredReceiversForUser);
                                }
                            }
                            registeredReceivers3 = registeredReceivers2;
                            i22 = i9 + 1;
                            users2 = users3;
                            action5 = action2;
                        }
                        registeredReceivers = registeredReceivers3;
                    }
                    List<BroadcastFilter> registeredReceivers4 = activityManagerService.mReceiverResolver.queryIntent(snapshot, intent3, resolvedType, false, userId12);
                    registeredReceivers = registeredReceivers4;
                }
                boolean replacePending2 = (intent3.getFlags() & 536870912) != 0;
                if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                    Slog.v(TAG_BROADCAST, "Enqueueing broadcast: " + intent3.getAction() + " replacePending=" + replacePending2);
                }
                if (registeredReceivers != null) {
                    broadcastAllowList3 = broadcastAllowList4;
                    if (broadcastAllowList3 != null) {
                        for (int i24 = registeredReceivers.size() - 1; i24 >= 0; i24--) {
                            int owningAppId = UserHandle.getAppId(registeredReceivers.get(i24).owningUid);
                            if (owningAppId >= 10000 && Arrays.binarySearch(broadcastAllowList3, owningAppId) < 0) {
                                registeredReceivers.remove(i24);
                            }
                        }
                    }
                } else {
                    broadcastAllowList3 = broadcastAllowList4;
                }
                int NR2 = registeredReceivers != null ? registeredReceivers.size() : 0;
                if (!ordered && NR2 > 0) {
                    if (i3 != 0) {
                        replacePending = replacePending2;
                        checkBroadcastFromSystem(intent3, callerApp, callerPackage, callingUid, isProtectedBroadcast, registeredReceivers);
                    } else {
                        replacePending = replacePending2;
                    }
                    BroadcastQueue queue = activityManagerService.broadcastQueueForIntent(intent3);
                    intent4 = intent3;
                    BroadcastRecord r = new BroadcastRecord(queue, intent3, callerApp, callerPackage, callerFeatureId, callingPid, callingUid, callerInstantApp, resolvedType, requiredPermissions, excludedPermissions, excludedPackages, appOp, brOptions, registeredReceivers, resultTo, resultCode, resultData, resultExtras, ordered, sticky, false, userId12, allowBackgroundActivityStarts2, backgroundActivityStartsToken2, timeoutExempt);
                    if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                        Slog.v(TAG_BROADCAST, "Enqueueing parallel broadcast " + r);
                    }
                    boolean replaced = replacePending && queue.replaceParallelBroadcastLocked(r) != null;
                    if (!replaced) {
                        queue.enqueueParallelBroadcastLocked(r);
                        queue.scheduleBroadcastsLocked();
                    }
                    registeredReceivers = null;
                    NR = 0;
                } else {
                    replacePending = replacePending2;
                    intent4 = intent3;
                    NR = NR2;
                }
                int ir2 = 0;
                if (receivers3 == null) {
                    receivers = receivers3;
                    ir = 0;
                } else {
                    String[] skipPackages = null;
                    if ("android.intent.action.PACKAGE_ADDED".equals(intent4.getAction()) || "android.intent.action.PACKAGE_RESTARTED".equals(intent4.getAction()) || "android.intent.action.PACKAGE_DATA_CLEARED".equals(intent4.getAction())) {
                        Uri data5 = intent4.getData();
                        if (data5 != null && (pkgName = data5.getSchemeSpecificPart()) != null) {
                            skipPackages = new String[]{pkgName};
                        }
                    } else if ("android.intent.action.EXTERNAL_APPLICATIONS_AVAILABLE".equals(intent4.getAction())) {
                        skipPackages = intent4.getStringArrayExtra("android.intent.extra.changed_package_list");
                    }
                    if (skipPackages != null && skipPackages.length > 0) {
                        for (String skipPackage : skipPackages) {
                            if (skipPackage != null) {
                                int NT = receivers3.size();
                                int it = 0;
                                while (it < NT) {
                                    ResolveInfo curt = receivers3.get(it);
                                    if (curt.activityInfo.packageName.equals(skipPackage)) {
                                        receivers3.remove(it);
                                        it--;
                                        NT--;
                                    }
                                    it++;
                                }
                            }
                        }
                    }
                    int NT2 = receivers3 != null ? receivers3.size() : 0;
                    int it2 = 0;
                    ResolveInfo curt2 = null;
                    BroadcastFilter curr = null;
                    while (it2 < NT2 && ir2 < NR) {
                        if (curt2 == null) {
                            ResolveInfo curt3 = receivers3.get(it2);
                            curt2 = curt3;
                        }
                        if (curr == null) {
                            BroadcastFilter curr2 = registeredReceivers.get(ir2);
                            curr = curr2;
                        }
                        if (curr.getPriority() >= curt2.priority) {
                            receivers3.add(it2, curr);
                            ir2++;
                            curr = null;
                            it2++;
                            NT2++;
                        } else {
                            it2++;
                            curt2 = null;
                        }
                    }
                    receivers = receivers3;
                    ir = ir2;
                }
                while (ir < NR) {
                    if (receivers != null) {
                        receivers2 = receivers;
                    } else {
                        receivers2 = new ArrayList();
                    }
                    receivers2.add(registeredReceivers.get(ir));
                    ir++;
                    receivers = receivers2;
                }
                if (i3 == 0) {
                    intent5 = intent4;
                } else {
                    intent5 = intent4;
                    checkBroadcastFromSystem(intent4, callerApp, callerPackage, callingUid, isProtectedBroadcast, receivers);
                }
                if ((receivers != null && receivers.size() > 0) || resultTo != null) {
                    BroadcastQueue queue2 = activityManagerService.broadcastQueueForIntent(intent5);
                    Intent intent7 = intent5;
                    BroadcastRecord r2 = new BroadcastRecord(queue2, intent7, callerApp, callerPackage, callerFeatureId, callingPid, callingUid, callerInstantApp, resolvedType, requiredPermissions, excludedPermissions, excludedPackages, appOp, brOptions, receivers, resultTo, resultCode, resultData, resultExtras, ordered, sticky, false, userId12, allowBackgroundActivityStarts2, backgroundActivityStartsToken2, timeoutExempt);
                    if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
                        Slog.v(TAG_BROADCAST, "Enqueueing ordered broadcast " + r2);
                    }
                    BroadcastRecord oldRecord = replacePending ? queue2.replaceOrderedBroadcastLocked(r2) : null;
                    if (oldRecord != null) {
                        if (oldRecord.resultTo != null) {
                            BroadcastQueue oldQueue = activityManagerService.broadcastQueueForIntent(oldRecord.intent);
                            try {
                                oldQueue.performReceiveLocked(oldRecord.callerApp, oldRecord.resultTo, oldRecord.intent, 0, null, null, false, false, oldRecord.userId, oldRecord.callingUid, callingUid);
                            } catch (RemoteException e5) {
                                Slog.w(TAG, "Failure [" + queue2.mQueueName + "] sending broadcast result of " + intent7, e5);
                            }
                        }
                    } else {
                        queue2.enqueueOrderedBroadcastLocked(r2);
                        queue2.scheduleBroadcastsLocked();
                    }
                    return 0;
                }
                Intent intent8 = intent5;
                if (intent8.getComponent() == null && intent8.getPackage() == null) {
                    if ((intent8.getFlags() & i7) == 0) {
                        addBroadcastStatLocked(intent8.getAction(), callerPackage, 0, 0, 0L);
                        return 0;
                    }
                    return 0;
                }
                return 0;
            } catch (RemoteException e6) {
                e = e6;
                Slog.w(TAG, "Remote exception", e);
                return 0;
            }
        } catch (RemoteException e7) {
            e = e7;
        }
    }

    private int getUidFromIntent(Intent intent) {
        if (intent == null) {
            return -1;
        }
        Bundle intentExtras = intent.getExtras();
        if (!intent.hasExtra("android.intent.extra.UID")) {
            return -1;
        }
        return intentExtras.getInt("android.intent.extra.UID");
    }

    final void rotateBroadcastStatsIfNeededLocked() {
        long now = SystemClock.elapsedRealtime();
        BroadcastStats broadcastStats = this.mCurBroadcastStats;
        if (broadcastStats == null || broadcastStats.mStartRealtime + 86400000 < now) {
            BroadcastStats broadcastStats2 = this.mCurBroadcastStats;
            this.mLastBroadcastStats = broadcastStats2;
            if (broadcastStats2 != null) {
                broadcastStats2.mEndRealtime = SystemClock.elapsedRealtime();
                this.mLastBroadcastStats.mEndUptime = SystemClock.uptimeMillis();
            }
            this.mCurBroadcastStats = new BroadcastStats();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final void addBroadcastStatLocked(String action, String srcPackage, int receiveCount, int skipCount, long dispatchTime) {
        rotateBroadcastStatsIfNeededLocked();
        this.mCurBroadcastStats.addBroadcast(action, srcPackage, receiveCount, skipCount, dispatchTime);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final void addBackgroundCheckViolationLocked(String action, String targetPackage) {
        rotateBroadcastStatsIfNeededLocked();
        this.mCurBroadcastStats.addBackgroundCheckViolation(action, targetPackage);
    }

    final Intent verifyBroadcastLocked(Intent intent) {
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        int flags = intent.getFlags();
        if (!this.mProcessesReady && (67108864 & flags) == 0 && (1073741824 & flags) == 0) {
            Slog.e(TAG, "Attempt to launch receivers of broadcast intent " + intent + " before boot completion");
            throw new IllegalStateException("Cannot broadcast before boot completed");
        } else if ((33554432 & flags) != 0) {
            throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
        } else {
            if ((flags & 4194304) != 0) {
                switch (Binder.getCallingUid()) {
                    case 0:
                    case 2000:
                        break;
                    default:
                        Slog.w(TAG, "Removing FLAG_RECEIVER_FROM_SHELL because caller is UID " + Binder.getCallingUid());
                        intent.removeFlags(4194304);
                        break;
                }
            }
            return intent;
        }
    }

    @Deprecated
    public final int broadcastIntent(IApplicationThread caller, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, int appOp, Bundle bOptions, boolean serialized, boolean sticky, int userId) {
        int i;
        int userId2;
        if (intent == null || !"android.intent.action.MEDIA_SCANNER_SCAN_FILE".equals(intent.getAction())) {
            i = userId;
        } else {
            i = userId;
            if (((UserManagerInternal) LocalServices.getService(UserManagerInternal.class)).isDualProfile(i)) {
                userId2 = -1;
                return broadcastIntentWithFeature(caller, null, intent, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermissions, null, null, appOp, bOptions, serialized, sticky, userId2);
            }
        }
        userId2 = i;
        return broadcastIntentWithFeature(caller, null, intent, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermissions, null, null, appOp, bOptions, serialized, sticky, userId2);
    }

    /* JADX DEBUG: Another duplicated slice has different insns count: {[]}, finally: {[INVOKE] complete} */
    public final int broadcastIntentWithFeature(IApplicationThread caller, String callingFeatureId, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String[] requiredPermissions, String[] excludedPermissions, String[] excludedPackages, int appOp, Bundle bOptions, boolean serialized, boolean sticky, int userId) {
        ProcessRecord callerProc;
        enforceNotIsolatedCaller("broadcastIntent");
        if (!TRAN_DISABLE_UNLOCK_ANIM_SUPPORT && intent != null && "android.intent.action.USER_PRESENT".equals(intent.getAction())) {
            try {
                this.mActivityTaskManager.boostSceneStartDuration(6, 600L);
            } catch (Exception e) {
                Slog.w(TAG, "broadcast boost failed", e);
            }
        }
        if (ITranGriffinFeature.Instance().isGriffinSupport()) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    callerProc = getRecordForAppLOSP(caller);
                } finally {
                    resetPriorityAfterLockedSection();
                }
            }
            resetPriorityAfterLockedSection();
            int callerUid = Binder.getCallingUid();
            int callerPid = Binder.getCallingPid();
            String callerPkg = callerProc != null ? callerProc.info.packageName : "";
            String action = intent.getAction();
            String pkg = intent.getPackage();
            ComponentName cmp = intent.getComponent();
            if (ITranActivityManagerService.Instance().hookPmLimitSendBroadcast(callerProc != null ? callerProc.processWrapper : null, intent, callerPkg, callerUid, callerPid, action, pkg, cmp, serialized, resolvedType, resultTo)) {
                return 0;
            }
        }
        synchronized (this) {
            try {
                try {
                    boostPriorityForLockedSection();
                    Intent intent2 = verifyBroadcastLocked(intent);
                    ProcessRecord callerApp = getRecordForAppLOSP(caller);
                    int callingPid = Binder.getCallingPid();
                    int callingUid = Binder.getCallingUid();
                    long origId = Binder.clearCallingIdentity();
                    String str = null;
                    String suppressAction = this.mAmsExt.onReadyToStartComponent(callerApp != null ? callerApp.info.packageName : null, callingUid, "broadcast", null);
                    if (suppressAction != null && suppressAction.equals("skipped")) {
                        Binder.restoreCallingIdentity(origId);
                        Slog.d(TAG, "broadcastIntentWithFeature, suppress to broadcastIntent!");
                        return 0;
                    }
                    if (callerApp != null) {
                        try {
                            str = callerApp.info.packageName;
                        } catch (Throwable th) {
                            th = th;
                            Binder.restoreCallingIdentity(origId);
                            throw th;
                        }
                    }
                    try {
                        int broadcastIntentLocked = broadcastIntentLocked(callerApp, str, callingFeatureId, intent2, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermissions, excludedPermissions, excludedPackages, appOp, bOptions, serialized, sticky, callingPid, callingUid, callingUid, callingPid, userId);
                        Binder.restoreCallingIdentity(origId);
                        resetPriorityAfterLockedSection();
                        return broadcastIntentLocked;
                    } catch (Throwable th2) {
                        th = th2;
                        Binder.restoreCallingIdentity(origId);
                        throw th;
                    }
                } catch (Throwable th3) {
                    th = th3;
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            } catch (Throwable th4) {
                th = th4;
            }
        }
    }

    int broadcastIntentInPackage(String packageName, String featureId, int uid, int realCallingUid, int realCallingPid, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String requiredPermission, Bundle bOptions, boolean serialized, boolean sticky, int userId, boolean allowBackgroundActivityStarts, IBinder backgroundActivityStartsToken, int[] broadcastAllowList) {
        Intent intent2;
        if (ITranGriffinFeature.Instance().isGriffinSupport() && ITranActivityManagerService.Instance().hookPmLimitSendBroadcastP(packageName, uid, intent, serialized, resolvedType, resultTo)) {
            return 0;
        }
        synchronized (this) {
            try {
                try {
                    boostPriorityForLockedSection();
                    intent2 = intent;
                    try {
                        Intent intent3 = verifyBroadcastLocked(intent2);
                        long origId = Binder.clearCallingIdentity();
                        String[] requiredPermissions = requiredPermission == null ? null : new String[]{requiredPermission};
                        String suppressAction = this.mAmsExt.onReadyToStartComponent(packageName, uid, "broadcast_p", null);
                        if (suppressAction != null && suppressAction.equals("skipped")) {
                            Binder.restoreCallingIdentity(origId);
                            Slog.d(TAG, "broadcastIntentInPackage, suppress to broadcastIntent!");
                            resetPriorityAfterLockedSection();
                            return 0;
                        }
                        int broadcastIntentLocked = broadcastIntentLocked(null, packageName, featureId, intent3, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermissions, null, null, -1, bOptions, serialized, sticky, -1, uid, realCallingUid, realCallingPid, userId, allowBackgroundActivityStarts, backgroundActivityStartsToken, broadcastAllowList);
                        Binder.restoreCallingIdentity(origId);
                        resetPriorityAfterLockedSection();
                        return broadcastIntentLocked;
                    } catch (Throwable th) {
                        th = th;
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    intent2 = intent;
                }
            } catch (Throwable th3) {
                th = th3;
            }
        }
    }

    public final void unbroadcastIntent(IApplicationThread caller, Intent intent, int userId) {
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 0, "removeStickyBroadcast", null);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (checkCallingPermission("android.permission.BROADCAST_STICKY") != 0) {
                    String msg = "Permission Denial: unbroadcastIntent() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.BROADCAST_STICKY";
                    Slog.w(TAG, msg);
                    throw new SecurityException(msg);
                }
                ArrayMap<String, ArrayList<Intent>> stickies = this.mStickyBroadcasts.get(userId2);
                if (stickies != null) {
                    ArrayList<Intent> list = stickies.get(intent.getAction());
                    if (list != null) {
                        int N = list.size();
                        int i = 0;
                        while (true) {
                            if (i >= N) {
                                break;
                            } else if (!intent.filterEquals(list.get(i))) {
                                i++;
                            } else {
                                list.remove(i);
                                break;
                            }
                        }
                        if (list.size() <= 0) {
                            stickies.remove(intent.getAction());
                        }
                    }
                    int N2 = stickies.size();
                    if (N2 <= 0) {
                        this.mStickyBroadcasts.remove(userId2);
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void backgroundServicesFinishedLocked(int userId) {
        BroadcastQueue[] broadcastQueueArr;
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            queue.backgroundServicesFinishedLocked(userId);
        }
    }

    public void finishReceiver(IBinder who, int resultCode, String resultData, Bundle resultExtras, boolean resultAbort, int flags) {
        BroadcastQueue queue;
        if (ActivityManagerDebugConfig.DEBUG_BROADCAST) {
            Slog.v(TAG_BROADCAST, "Finish receiver: " + who);
        }
        if (resultExtras != null && resultExtras.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Bundle");
        }
        long origId = Binder.clearCallingIdentity();
        boolean doNext = false;
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                if (isOnFgOffloadQueue(flags)) {
                    queue = this.mFgOffloadBroadcastQueue;
                } else if (isOnBgOffloadQueue(flags)) {
                    queue = this.mBgOffloadBroadcastQueue;
                } else if ((268435456 & flags) == 0) {
                    queue = this.mBgBroadcastQueue;
                } else {
                    queue = this.mFgBroadcastQueue;
                }
                BroadcastRecord r = queue.getMatchingOrderedReceiver(who);
                if (r != null) {
                    doNext = r.queue.finishReceiverLocked(r, resultCode, resultData, resultExtras, resultAbort, true);
                }
                if (doNext) {
                    r.queue.processNextBroadcastLocked(false, true);
                }
                trimApplicationsLocked(false, "updateOomAdj_finishReceiver");
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(origId);
        }
    }

    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [16002=5, 15989=4] */
    /* JADX WARN: Not initialized variable reg: 21, insn: 0x023b: MOVE  (r9 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r21 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('userId' int)]), block:B:98:0x023b */
    /* JADX WARN: Not initialized variable reg: 22, insn: 0x023d: MOVE  (r31 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r22 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('callingPid' int)]), block:B:98:0x023b */
    /* JADX WARN: Not initialized variable reg: 23, insn: 0x023f: MOVE  (r2 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY]) = (r23 I:??[int, float, boolean, short, byte, char, OBJECT, ARRAY] A[D('callingUid' int)]), block:B:98:0x023b */
    /* JADX WARN: Removed duplicated region for block: B:113:0x02ae  */
    /* JADX WARN: Removed duplicated region for block: B:114:0x02b0  */
    /* JADX WARN: Removed duplicated region for block: B:117:0x02bb  */
    /* JADX WARN: Removed duplicated region for block: B:118:0x02bd  */
    /* JADX WARN: Removed duplicated region for block: B:207:0x02cd A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:88:0x01fb A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:92:0x0208  */
    /* JADX WARN: Removed duplicated region for block: B:99:0x0243  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean startInstrumentation(ComponentName className, String profileFile, int flags, Bundle arguments, IInstrumentationWatcher watcher, IUiAutomationConnection uiAutomationConnection, int userId, String abiOverride) {
        InstrumentationInfo ii;
        ApplicationInfo ai;
        boolean z;
        boolean disableHiddenApiChecks;
        boolean z2;
        String defProcess;
        ActivityManagerGlobalLock activityManagerGlobalLock;
        ActivityManagerGlobalLock activityManagerGlobalLock2;
        boolean noRestart;
        int callingUid;
        boolean z3;
        ProcessRecord app;
        enforceNotIsolatedCaller("startInstrumentation");
        int callingUid2 = Binder.getCallingUid();
        int callingPid = Binder.getCallingPid();
        int userId2 = this.mUserController.handleIncomingUser(callingPid, callingUid2, userId, false, 2, "startInstrumentation", null);
        if (arguments != null && arguments.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Bundle");
        }
        synchronized (this) {
            try {
                try {
                    boostPriorityForLockedSection();
                    InstrumentationInfo ii2 = null;
                    ApplicationInfo ai2 = null;
                    boolean noRestart2 = (flags & 8) != 0;
                    try {
                        try {
                            ii2 = this.mContext.getPackageManager().getInstrumentationInfo(className, 1024);
                            ai2 = AppGlobals.getPackageManager().getApplicationInfo(ii2.targetPackage, (long) GadgetFunction.NCM, userId2);
                        } catch (Throwable th) {
                            th = th;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } catch (PackageManager.NameNotFoundException e) {
                    } catch (RemoteException e2) {
                        ii = ii2;
                        ai = null;
                    }
                    ii = ii2;
                    ai = ai2;
                    if (ii == null) {
                        reportStartInstrumentationFailureLocked(watcher, className, "Unable to find instrumentation info for: " + className);
                        resetPriorityAfterLockedSection();
                        return false;
                    } else if (ai == null) {
                        reportStartInstrumentationFailureLocked(watcher, className, "Unable to find instrumentation target package: " + ii.targetPackage);
                        resetPriorityAfterLockedSection();
                        return false;
                    } else {
                        if (ii.targetPackage.equals(PackageManagerService.PLATFORM_PACKAGE_NAME)) {
                            if (!noRestart2) {
                                reportStartInstrumentationFailureLocked(watcher, className, "Cannot instrument system server without 'no-restart'");
                                resetPriorityAfterLockedSection();
                                return false;
                            }
                        } else if (!ai.hasCode()) {
                            reportStartInstrumentationFailureLocked(watcher, className, "Instrumentation target has no code: " + ii.targetPackage);
                            resetPriorityAfterLockedSection();
                            return false;
                        }
                        int match = this.mContext.getPackageManager().checkSignatures(ii.targetPackage, ii.packageName);
                        if (match < 0 && match != -1) {
                            if (!Build.IS_DEBUGGABLE || callingUid2 != 0 || (flags & 16) != 0) {
                                String msg = "Permission Denial: starting instrumentation " + className + " from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " not allowed because package " + ii.packageName + " does not have a signature matching the target " + ii.targetPackage;
                                reportStartInstrumentationFailureLocked(watcher, className, msg);
                                throw new SecurityException(msg);
                            }
                            Slog.w(TAG, "Instrumentation test " + ii.packageName + " doesn't have a signature matching the target " + ii.targetPackage + ", which would not be allowed on the production Android builds");
                        }
                        if (!Build.IS_DEBUGGABLE && callingUid2 != 0 && callingUid2 != 2000 && callingUid2 != 1000 && !hasActiveInstrumentationLocked(callingPid)) {
                            String msg2 = "Permission Denial: instrumentation test " + className + " from pid=" + callingPid + ", uid=" + callingUid2 + ", pkgName=" + getPackageNameByPid(callingPid) + " not allowed because it's not started from SHELL";
                            Slog.wtfQuiet(TAG, msg2);
                            reportStartInstrumentationFailureLocked(watcher, className, msg2);
                            throw new SecurityException(msg2);
                        }
                        try {
                            if (!ai.usesNonSdkApi() && (flags & 1) == 0) {
                                z = false;
                                disableHiddenApiChecks = z;
                                if (!disableHiddenApiChecks && (flags & 4) == 0) {
                                    z2 = false;
                                    boolean disableTestApiChecks = z2;
                                    if (!disableHiddenApiChecks || disableTestApiChecks) {
                                        enforceCallingPermission("android.permission.DISABLE_HIDDEN_API_CHECKS", "disable hidden API checks");
                                    }
                                    if ((flags & 32) == 0) {
                                        boolean startInstrumentationOfSdkSandbox = startInstrumentationOfSdkSandbox(className, profileFile, arguments, watcher, uiAutomationConnection, userId2, abiOverride, ii, ai, noRestart2, disableHiddenApiChecks, disableTestApiChecks);
                                        resetPriorityAfterLockedSection();
                                        return startInstrumentationOfSdkSandbox;
                                    }
                                    ApplicationInfo ai3 = ai;
                                    InstrumentationInfo ii3 = ii;
                                    try {
                                        ActiveInstrumentation activeInstr = new ActiveInstrumentation(this);
                                        activeInstr.mClass = className;
                                        String defProcess2 = ai3.processName;
                                        try {
                                            try {
                                                if (ii3.targetProcesses == null) {
                                                    activeInstr.mTargetProcesses = new String[]{ai3.processName};
                                                } else if (!ii3.targetProcesses.equals("*")) {
                                                    activeInstr.mTargetProcesses = ii3.targetProcesses.split(",");
                                                    String defProcess3 = activeInstr.mTargetProcesses[0];
                                                    defProcess = defProcess3;
                                                    activeInstr.mTargetInfo = ai3;
                                                    activeInstr.mProfileFile = profileFile;
                                                    activeInstr.mArguments = arguments;
                                                    activeInstr.mWatcher = watcher;
                                                    activeInstr.mUiAutomationConnection = uiAutomationConnection;
                                                    activeInstr.mResultClass = className;
                                                    activeInstr.mHasBackgroundActivityStartsPermission = checkPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", callingPid, callingUid2) != 0;
                                                    activeInstr.mHasBackgroundForegroundServiceStartsPermission = checkPermission("android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND", callingPid, callingUid2) != 0;
                                                    activeInstr.mNoRestart = noRestart2;
                                                    long origId = Binder.clearCallingIdentity();
                                                    activityManagerGlobalLock = this.mProcLock;
                                                    synchronized (activityManagerGlobalLock) {
                                                        try {
                                                            boostPriorityForProcLockedSection();
                                                            try {
                                                                if (noRestart2) {
                                                                    app = getProcessRecordLocked(ai3.processName, ai3.uid);
                                                                    activityManagerGlobalLock2 = activityManagerGlobalLock;
                                                                    noRestart = noRestart2;
                                                                    callingUid = callingUid2;
                                                                    z3 = true;
                                                                } else if (className == null || !"share.sharekaro.pro".equals(className.getPackageName())) {
                                                                    activityManagerGlobalLock2 = activityManagerGlobalLock;
                                                                    noRestart = noRestart2;
                                                                    callingUid = callingUid2;
                                                                    z3 = true;
                                                                    try {
                                                                        forceStopPackageLocked(ii3.targetPackage, -1, true, false, true, true, false, userId2, "start instr");
                                                                        if (this.mUsageStatsService != null) {
                                                                            try {
                                                                                try {
                                                                                    this.mUsageStatsService.reportEvent(ii3.targetPackage, userId2, 6);
                                                                                } catch (Throwable th2) {
                                                                                    th = th2;
                                                                                    resetPriorityAfterProcLockedSection();
                                                                                    throw th;
                                                                                }
                                                                            } catch (Throwable th3) {
                                                                                th = th3;
                                                                            }
                                                                        }
                                                                        try {
                                                                            app = addAppLocked(ai3, defProcess, false, disableHiddenApiChecks, disableTestApiChecks, abiOverride, 0);
                                                                            app.mProfile.addHostingComponentType(8);
                                                                        } catch (Throwable th4) {
                                                                            th = th4;
                                                                            resetPriorityAfterProcLockedSection();
                                                                            throw th;
                                                                        }
                                                                    } catch (Throwable th5) {
                                                                        th = th5;
                                                                    }
                                                                }
                                                                app.setActiveInstrumentation(activeInstr);
                                                                activeInstr.mFinished = false;
                                                                activeInstr.mSourceUid = callingUid;
                                                                activeInstr.mRunningProcesses.add(app);
                                                                if (!this.mActiveInstrumentation.contains(activeInstr)) {
                                                                    this.mActiveInstrumentation.add(activeInstr);
                                                                }
                                                                resetPriorityAfterProcLockedSection();
                                                                if ((flags & 2) != 0) {
                                                                    this.mAppOpsService.setMode(99, ai3.uid, ii3.packageName, 0);
                                                                }
                                                                Binder.restoreCallingIdentity(origId);
                                                                if (noRestart) {
                                                                    instrumentWithoutRestart(activeInstr, ai3);
                                                                }
                                                                resetPriorityAfterLockedSection();
                                                                return z3;
                                                            } catch (Throwable th6) {
                                                                th = th6;
                                                                activityManagerGlobalLock2 = activityManagerGlobalLock;
                                                            }
                                                        } catch (Throwable th7) {
                                                            th = th7;
                                                            activityManagerGlobalLock2 = activityManagerGlobalLock;
                                                        }
                                                    }
                                                    try {
                                                        resetPriorityAfterProcLockedSection();
                                                        resetPriorityAfterLockedSection();
                                                        return false;
                                                    } catch (Throwable th8) {
                                                        th = th8;
                                                        resetPriorityAfterLockedSection();
                                                        throw th;
                                                    }
                                                } else {
                                                    activeInstr.mTargetProcesses = new String[0];
                                                }
                                                synchronized (activityManagerGlobalLock) {
                                                }
                                            } catch (Throwable th9) {
                                                th = th9;
                                            }
                                            activeInstr.mHasBackgroundActivityStartsPermission = checkPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", callingPid, callingUid2) != 0;
                                            activeInstr.mHasBackgroundForegroundServiceStartsPermission = checkPermission("android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND", callingPid, callingUid2) != 0;
                                            activeInstr.mNoRestart = noRestart2;
                                            long origId2 = Binder.clearCallingIdentity();
                                            activityManagerGlobalLock = this.mProcLock;
                                        } catch (Throwable th10) {
                                            th = th10;
                                        }
                                        defProcess = defProcess2;
                                        activeInstr.mTargetInfo = ai3;
                                        activeInstr.mProfileFile = profileFile;
                                        activeInstr.mArguments = arguments;
                                        activeInstr.mWatcher = watcher;
                                        activeInstr.mUiAutomationConnection = uiAutomationConnection;
                                        activeInstr.mResultClass = className;
                                    } catch (Throwable th11) {
                                        th = th11;
                                    }
                                }
                                z2 = true;
                                boolean disableTestApiChecks2 = z2;
                                if (!disableHiddenApiChecks) {
                                }
                                enforceCallingPermission("android.permission.DISABLE_HIDDEN_API_CHECKS", "disable hidden API checks");
                                if ((flags & 32) == 0) {
                                }
                            }
                            if (!disableHiddenApiChecks) {
                                z2 = false;
                                boolean disableTestApiChecks22 = z2;
                                if (!disableHiddenApiChecks) {
                                }
                                enforceCallingPermission("android.permission.DISABLE_HIDDEN_API_CHECKS", "disable hidden API checks");
                                if ((flags & 32) == 0) {
                                }
                            }
                            if ((flags & 32) == 0) {
                            }
                        } catch (Throwable th12) {
                            th = th12;
                        }
                        z = true;
                        disableHiddenApiChecks = z;
                        z2 = true;
                        boolean disableTestApiChecks222 = z2;
                        if (!disableHiddenApiChecks) {
                        }
                        enforceCallingPermission("android.permission.DISABLE_HIDDEN_API_CHECKS", "disable hidden API checks");
                    }
                } catch (Throwable th13) {
                    th = th13;
                }
            } catch (Throwable th14) {
                th = th14;
            }
        }
    }

    private boolean startInstrumentationOfSdkSandbox(ComponentName className, String profileFile, Bundle arguments, IInstrumentationWatcher watcher, IUiAutomationConnection uiAutomationConnection, int userId, String abiOverride, InstrumentationInfo instrumentationInfo, ApplicationInfo sdkSandboxClientAppInfo, boolean noRestart, boolean disableHiddenApiChecks, boolean disableTestApiChecks) {
        ActivityManagerGlobalLock activityManagerGlobalLock;
        if (noRestart) {
            reportStartInstrumentationFailureLocked(watcher, className, "Instrumenting sdk sandbox with --no-restart flag is not supported");
            return false;
        }
        try {
            PackageManager pm = this.mContext.getPackageManager();
            ApplicationInfo sdkSandboxInfo = pm.getApplicationInfoAsUser(pm.getSdkSandboxPackageName(), 0, userId);
            SdkSandboxManagerLocal sandboxManagerLocal = (SdkSandboxManagerLocal) LocalManagerRegistry.getManager(SdkSandboxManagerLocal.class);
            if (sandboxManagerLocal == null) {
                reportStartInstrumentationFailureLocked(watcher, className, "Can't locate SdkSandboxManagerLocal");
                return false;
            }
            String processName = sandboxManagerLocal.getSdkSandboxProcessNameForInstrumentation(sdkSandboxClientAppInfo);
            ActiveInstrumentation activeInstr = new ActiveInstrumentation(this);
            activeInstr.mClass = className;
            activeInstr.mTargetProcesses = new String[]{processName};
            activeInstr.mTargetInfo = sdkSandboxInfo;
            activeInstr.mProfileFile = profileFile;
            activeInstr.mArguments = arguments;
            activeInstr.mWatcher = watcher;
            activeInstr.mUiAutomationConnection = uiAutomationConnection;
            activeInstr.mResultClass = className;
            activeInstr.mHasBackgroundActivityStartsPermission = false;
            activeInstr.mHasBackgroundForegroundServiceStartsPermission = false;
            activeInstr.mNoRestart = false;
            int callingUid = Binder.getCallingUid();
            long token = Binder.clearCallingIdentity();
            try {
                sandboxManagerLocal.notifyInstrumentationStarted(sdkSandboxClientAppInfo.packageName, sdkSandboxClientAppInfo.uid);
                ActivityManagerGlobalLock activityManagerGlobalLock2 = this.mProcLock;
                try {
                    try {
                        synchronized (activityManagerGlobalLock2) {
                            try {
                                boostPriorityForProcLockedSection();
                                int sdkSandboxUid = Process.toSdkSandboxUid(sdkSandboxClientAppInfo.uid);
                                activityManagerGlobalLock = activityManagerGlobalLock2;
                                try {
                                    forceStopPackageLocked(instrumentationInfo.targetPackage, -1, true, false, true, true, false, userId, "start instr");
                                    try {
                                        ProcessRecord app = addAppLocked(sdkSandboxInfo, processName, false, true, sdkSandboxUid, sdkSandboxClientAppInfo.packageName, disableHiddenApiChecks, disableTestApiChecks, abiOverride, 0);
                                        app.setActiveInstrumentation(activeInstr);
                                        activeInstr.mFinished = false;
                                        activeInstr.mSourceUid = callingUid;
                                        activeInstr.mRunningProcesses.add(app);
                                        if (!this.mActiveInstrumentation.contains(activeInstr)) {
                                            this.mActiveInstrumentation.add(activeInstr);
                                        }
                                        app.mProfile.addHostingComponentType(8);
                                        resetPriorityAfterProcLockedSection();
                                        Binder.restoreCallingIdentity(token);
                                        return true;
                                    } catch (Throwable th) {
                                        th = th;
                                        resetPriorityAfterProcLockedSection();
                                        throw th;
                                    }
                                } catch (Throwable th2) {
                                    th = th2;
                                }
                            } catch (Throwable th3) {
                                th = th3;
                                activityManagerGlobalLock = activityManagerGlobalLock2;
                            }
                        }
                    } catch (Throwable th4) {
                        th = th4;
                        Binder.restoreCallingIdentity(token);
                        throw th;
                    }
                } catch (Throwable th5) {
                    th = th5;
                }
            } catch (Throwable th6) {
                th = th6;
            }
        } catch (PackageManager.NameNotFoundException e) {
            reportStartInstrumentationFailureLocked(watcher, className, "Can't find SdkSandbox package");
            return false;
        }
    }

    private void instrumentWithoutRestart(ActiveInstrumentation activeInstr, ApplicationInfo targetInfo) {
        ProcessRecord pr;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                pr = getProcessRecordLocked(targetInfo.processName, targetInfo.uid);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        try {
            pr.getThread().instrumentWithoutRestart(activeInstr.mClass, activeInstr.mArguments, activeInstr.mWatcher, activeInstr.mUiAutomationConnection, targetInfo);
        } catch (RemoteException e) {
            Slog.i(TAG, "RemoteException from instrumentWithoutRestart", e);
        }
    }

    private boolean hasActiveInstrumentationLocked(int pid) {
        boolean z = false;
        if (pid == 0) {
            return false;
        }
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord process = this.mPidsSelfLocked.get(pid);
            if (process != null && process.getActiveInstrumentation() != null) {
                z = true;
            }
        }
        return z;
    }

    private String getPackageNameByPid(int pid) {
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord app = this.mPidsSelfLocked.get(pid);
            if (app != null && app.info != null) {
                return app.info.packageName;
            }
            return null;
        }
    }

    private boolean isCallerShell() {
        int callingUid = Binder.getCallingUid();
        return callingUid == 2000 || callingUid == 0;
    }

    private void reportStartInstrumentationFailureLocked(IInstrumentationWatcher watcher, ComponentName cn, String report) {
        Slog.w(TAG, report);
        if (watcher != null) {
            Bundle results = new Bundle();
            results.putString("id", "ActivityManagerService");
            results.putString("Error", report);
            this.mInstrumentationReporter.reportStatus(watcher, cn, -1, results);
        }
    }

    void addInstrumentationResultsLocked(ProcessRecord app, Bundle results) {
        ActiveInstrumentation instr = app.getActiveInstrumentation();
        if (instr == null) {
            Slog.w(TAG, "finishInstrumentation called on non-instrumented: " + app);
        } else if (!instr.mFinished && results != null) {
            if (instr.mCurResults == null) {
                instr.mCurResults = new Bundle(results);
            } else {
                instr.mCurResults.putAll(results);
            }
        }
    }

    public void addInstrumentationResults(IApplicationThread target, Bundle results) {
        UserHandle.getCallingUserId();
        if (results != null && results.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord app = getRecordForAppLOSP(target);
                if (app == null) {
                    Slog.w(TAG, "addInstrumentationResults: no app for " + target);
                    resetPriorityAfterLockedSection();
                    return;
                }
                long origId = Binder.clearCallingIdentity();
                addInstrumentationResultsLocked(app, results);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    void finishInstrumentationLocked(ProcessRecord app, int resultCode, Bundle results) {
        ActiveInstrumentation instr = app.getActiveInstrumentation();
        if (instr == null) {
            Slog.w(TAG, "finishInstrumentation called on non-instrumented: " + app);
            return;
        }
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                if (!instr.mFinished) {
                    if (instr.mWatcher != null) {
                        Bundle finalResults = instr.mCurResults;
                        if (finalResults != null) {
                            if (instr.mCurResults != null && results != null) {
                                finalResults.putAll(results);
                            }
                        } else {
                            finalResults = results;
                        }
                        this.mInstrumentationReporter.reportFinished(instr.mWatcher, instr.mClass, resultCode, finalResults);
                    }
                    if (instr.mUiAutomationConnection != null) {
                        this.mAppOpsService.setMode(99, app.uid, app.info.packageName, 2);
                        this.mAppOpsService.setAppOpsServiceDelegate(null);
                        getPermissionManagerInternal().stopShellPermissionIdentityDelegation();
                        this.mHandler.obtainMessage(56, instr.mUiAutomationConnection).sendToTarget();
                    }
                    instr.mFinished = true;
                }
                instr.removeProcess(app);
                app.setActiveInstrumentation(null);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        app.mProfile.clearHostingComponentType(8);
        if (app.isSdkSandbox) {
            killUid(UserHandle.getAppId(app.uid), UserHandle.getUserId(app.uid), "finished instr");
            SdkSandboxManagerLocal sandboxManagerLocal = (SdkSandboxManagerLocal) LocalManagerRegistry.getManager(SdkSandboxManagerLocal.class);
            if (sandboxManagerLocal != null) {
                sandboxManagerLocal.notifyInstrumentationFinished(app.sdkSandboxClientAppPackage, Process.getAppUidForSdkSandboxUid(app.uid));
            }
        } else if (!instr.mNoRestart) {
            forceStopPackageLocked(app.info.packageName, -1, false, false, true, true, false, app.userId, "finished inst");
        }
    }

    public void finishInstrumentation(IApplicationThread target, int resultCode, Bundle results) {
        UserHandle.getCallingUserId();
        if (results != null && results.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord app = getRecordForAppLOSP(target);
                if (app == null) {
                    Slog.w(TAG, "finishInstrumentation: no app for " + target);
                    resetPriorityAfterLockedSection();
                    return;
                }
                long origId = Binder.clearCallingIdentity();
                finishInstrumentationLocked(app, resultCode, results);
                Binder.restoreCallingIdentity(origId);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public ActivityTaskManager.RootTaskInfo getFocusedRootTaskInfo() throws RemoteException {
        return this.mActivityTaskManager.getFocusedRootTaskInfo();
    }

    public Configuration getConfiguration() {
        return this.mActivityTaskManager.getConfiguration();
    }

    public void suppressResizeConfigChanges(boolean suppress) throws RemoteException {
        this.mActivityTaskManager.suppressResizeConfigChanges(suppress);
    }

    public void updatePersistentConfiguration(Configuration values) {
        updatePersistentConfigurationWithAttribution(values, Settings.getPackageNameForUid(this.mContext, Binder.getCallingUid()), null);
    }

    public void updatePersistentConfigurationWithAttribution(Configuration values, String callingPackage, String callingAttributionTag) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updatePersistentConfiguration()");
        enforceWriteSettingsPermission("updatePersistentConfiguration()", callingPackage, callingAttributionTag);
        if (values == null) {
            throw new NullPointerException("Configuration must not be null");
        }
        int userId = UserHandle.getCallingUserId();
        this.mActivityTaskManager.updatePersistentConfiguration(values, userId);
    }

    private void enforceWriteSettingsPermission(String func, String callingPackage, String callingAttributionTag) {
        int uid = Binder.getCallingUid();
        if (uid == 0 || uid == 1000 || Settings.checkAndNoteWriteSettingsOperation(this.mContext, uid, callingPackage, callingAttributionTag, false)) {
            return;
        }
        String msg = "Permission Denial: " + func + " from pid=" + Binder.getCallingPid() + ", uid=" + uid + " requires android.permission.WRITE_SETTINGS";
        Slog.w(TAG, msg);
        throw new SecurityException(msg);
    }

    public boolean updateConfiguration(Configuration values) {
        return this.mActivityTaskManager.updateConfiguration(values);
    }

    public boolean updateMccMncConfiguration(String mcc, String mnc) {
        try {
            int mccInt = Integer.parseInt(mcc);
            int mncInt = Integer.parseInt(mnc);
            Configuration config = new Configuration();
            config.mcc = mccInt;
            config.mnc = mncInt == 0 ? GnssNative.GNSS_AIDING_TYPE_ALL : mncInt;
            return this.mActivityTaskManager.updateConfiguration(config);
        } catch (NumberFormatException | StringIndexOutOfBoundsException ex) {
            Slog.e(TAG, "Error parsing mcc: " + mcc + " mnc: " + mnc + ". ex=" + ex);
            return false;
        }
    }

    public int getLaunchedFromUid(IBinder activityToken) {
        return ActivityClient.getInstance().getLaunchedFromUid(activityToken);
    }

    public String getLaunchedFromPackage(IBinder activityToken) {
        return ActivityClient.getInstance().getLaunchedFromPackage(activityToken);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public boolean isReceivingBroadcastLocked(ProcessRecord app, ArraySet<BroadcastQueue> receivingQueues) {
        BroadcastQueue[] broadcastQueueArr;
        ProcessReceiverRecord prr = app.mReceivers;
        int numOfReceivers = prr.numberOfCurReceivers();
        if (numOfReceivers > 0) {
            for (int i = 0; i < numOfReceivers; i++) {
                receivingQueues.add(prr.getCurReceiverAt(i).queue);
            }
            return true;
        }
        for (BroadcastQueue queue : this.mBroadcastQueues) {
            BroadcastRecord r = queue.mPendingBroadcast;
            if (r != null && r.curApp == app) {
                receivingQueues.add(queue);
            }
        }
        return true ^ receivingQueues.isEmpty();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public Association startAssociationLocked(int sourceUid, String sourceProcess, int sourceState, int targetUid, long targetVersionCode, ComponentName targetComponent, String targetProcess) {
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components;
        SparseArray<ArrayMap<String, Association>> sourceUids;
        ArrayMap<String, Association> sourceProcesses;
        if (!this.mTrackingAssociations) {
            return null;
        }
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components2 = this.mAssociations.get(targetUid);
        if (components2 != null) {
            components = components2;
        } else {
            ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components3 = new ArrayMap<>();
            this.mAssociations.put(targetUid, components3);
            components = components3;
        }
        SparseArray<ArrayMap<String, Association>> sourceUids2 = components.get(targetComponent);
        if (sourceUids2 != null) {
            sourceUids = sourceUids2;
        } else {
            SparseArray<ArrayMap<String, Association>> sourceUids3 = new SparseArray<>();
            components.put(targetComponent, sourceUids3);
            sourceUids = sourceUids3;
        }
        ArrayMap<String, Association> sourceProcesses2 = sourceUids.get(sourceUid);
        if (sourceProcesses2 != null) {
            sourceProcesses = sourceProcesses2;
        } else {
            ArrayMap<String, Association> sourceProcesses3 = new ArrayMap<>();
            sourceUids.put(sourceUid, sourceProcesses3);
            sourceProcesses = sourceProcesses3;
        }
        Association ass = sourceProcesses.get(sourceProcess);
        if (ass == null) {
            ass = new Association(sourceUid, sourceProcess, targetUid, targetComponent, targetProcess);
            sourceProcesses.put(sourceProcess, ass);
        }
        ass.mCount++;
        ass.mNesting++;
        if (ass.mNesting == 1) {
            long uptimeMillis = SystemClock.uptimeMillis();
            ass.mLastStateUptime = uptimeMillis;
            ass.mStartTime = uptimeMillis;
            ass.mLastState = sourceState;
        }
        return ass;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void stopAssociationLocked(int sourceUid, String sourceProcess, int targetUid, long targetVersionCode, ComponentName targetComponent, String targetProcess) {
        ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> components;
        SparseArray<ArrayMap<String, Association>> sourceUids;
        ArrayMap<String, Association> sourceProcesses;
        Association ass;
        if (this.mTrackingAssociations && (components = this.mAssociations.get(targetUid)) != null && (sourceUids = components.get(targetComponent)) != null && (sourceProcesses = sourceUids.get(sourceUid)) != null && (ass = sourceProcesses.get(sourceProcess)) != null && ass.mNesting > 0) {
            ass.mNesting--;
            if (ass.mNesting == 0) {
                long uptime = SystemClock.uptimeMillis();
                ass.mTime += uptime - ass.mStartTime;
                long[] jArr = ass.mStateTimes;
                int i = ass.mLastState + 0;
                jArr[i] = jArr[i] + (uptime - ass.mLastStateUptime);
                ass.mLastState = 22;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void noteUidProcessState(int uid, int state, int capability) {
        int N1;
        ActivityManagerService activityManagerService = this;
        int i = uid;
        activityManagerService.mBatteryStatsService.noteUidProcessState(i, state);
        activityManagerService.mAppOpsService.updateUidProcState(i, state, capability);
        if (activityManagerService.mTrackingAssociations) {
            int i1 = 0;
            int N12 = activityManagerService.mAssociations.size();
            while (i1 < N12) {
                ArrayMap<ComponentName, SparseArray<ArrayMap<String, Association>>> targetComponents = activityManagerService.mAssociations.valueAt(i1);
                int i2 = 0;
                int N2 = targetComponents.size();
                while (i2 < N2) {
                    SparseArray<ArrayMap<String, Association>> sourceUids = targetComponents.valueAt(i2);
                    ArrayMap<String, Association> sourceProcesses = sourceUids.get(i);
                    if (sourceProcesses != null) {
                        int i4 = 0;
                        int N4 = sourceProcesses.size();
                        while (i4 < N4) {
                            Association ass = sourceProcesses.valueAt(i4);
                            if (ass.mNesting < 1) {
                                N1 = N12;
                            } else {
                                long uptime = SystemClock.uptimeMillis();
                                long[] jArr = ass.mStateTimes;
                                int i3 = ass.mLastState + 0;
                                N1 = N12;
                                jArr[i3] = jArr[i3] + (uptime - ass.mLastStateUptime);
                                ass.mLastState = state;
                                ass.mLastStateUptime = uptime;
                            }
                            i4++;
                            N12 = N1;
                        }
                    }
                    i2++;
                    i = uid;
                    N12 = N12;
                }
                i1++;
                activityManagerService = this;
                i = uid;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final boolean canGcNowLocked() {
        BroadcastQueue[] broadcastQueueArr;
        for (BroadcastQueue q : this.mBroadcastQueues) {
            if (!q.mParallelBroadcasts.isEmpty() || !q.mDispatcher.isIdle()) {
                return false;
            }
        }
        return this.mAtmInternal.canGcNow();
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void checkExcessivePowerUsage() {
        updateCpuStatsNow();
        final boolean monitorPhantomProcs = this.mSystemReady && FeatureFlagUtils.isEnabled(this.mContext, "settings_enable_monitor_phantom_procs");
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                final boolean doCpuKills = this.mLastPowerCheckUptime != 0;
                final long curUptime = SystemClock.uptimeMillis();
                final long uptimeSince = curUptime - this.mLastPowerCheckUptime;
                this.mLastPowerCheckUptime = curUptime;
                this.mProcessList.forEachLruProcessesLOSP(false, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda20
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.this.m1044x910521ce(curUptime, uptimeSince, doCpuKills, monitorPhantomProcs, (ProcessRecord) obj);
                    }
                });
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$checkExcessivePowerUsage$20$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1044x910521ce(long curUptime, long uptimeSince, boolean doCpuKills, boolean monitorPhantomProcs, ProcessRecord app) {
        int cpuLimit;
        if (app.getThread() != null && app.mState.getSetProcState() >= 14) {
            long checkDur = curUptime - app.mState.getWhenUnimportant();
            if (checkDur <= this.mConstants.POWER_CHECK_INTERVAL) {
                cpuLimit = this.mConstants.POWER_CHECK_MAX_CPU_1;
            } else if (checkDur <= this.mConstants.POWER_CHECK_INTERVAL * 2 || app.mState.getSetProcState() <= 14) {
                cpuLimit = this.mConstants.POWER_CHECK_MAX_CPU_2;
            } else if (checkDur <= this.mConstants.POWER_CHECK_INTERVAL * 3) {
                cpuLimit = this.mConstants.POWER_CHECK_MAX_CPU_3;
            } else {
                cpuLimit = this.mConstants.POWER_CHECK_MAX_CPU_4;
            }
            updateAppProcessCpuTimeLPr(uptimeSince, doCpuKills, checkDur, cpuLimit, app);
            if (monitorPhantomProcs) {
                updatePhantomProcessCpuTimeLPr(uptimeSince, doCpuKills, checkDur, cpuLimit, app);
            }
        }
    }

    private void updateAppProcessCpuTimeLPr(final long uptimeSince, boolean doCpuKills, final long checkDur, final int cpuLimit, final ProcessRecord app) {
        synchronized (this.mAppProfiler.mProfilerLock) {
            ProcessProfileRecord profile = app.mProfile;
            long curCpuTime = profile.mCurCpuTime.get();
            long lastCpuTime = profile.mLastCpuTime.get();
            if (lastCpuTime > 0) {
                final long cpuTimeUsed = curCpuTime - lastCpuTime;
                if (checkExcessivePowerUsageLPr(uptimeSince, doCpuKills, cpuTimeUsed, app.processName, app.toShortString(), cpuLimit, app)) {
                    this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda8
                        @Override // java.lang.Runnable
                        public final void run() {
                            ActivityManagerService.this.m1064xe48d85e6(app, cpuTimeUsed, uptimeSince, checkDur, cpuLimit);
                        }
                    });
                    profile.reportExcessiveCpu();
                }
            }
            profile.mLastCpuTime.set(curCpuTime);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$updateAppProcessCpuTimeLPr$21$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1064xe48d85e6(ProcessRecord app, long cpuTimeUsed, long uptimeSince, long checkDur, int cpuLimit) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                app.killLocked("excessive cpu " + cpuTimeUsed + " during " + uptimeSince + " dur=" + checkDur + " limit=" + cpuLimit, 9, 7, true);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    private void updatePhantomProcessCpuTimeLPr(final long uptimeSince, final boolean doCpuKills, final long checkDur, final int cpuLimit, final ProcessRecord app) {
        this.mPhantomProcessList.forEachPhantomProcessOfApp(app, new Function() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda36
            @Override // java.util.function.Function
            public final Object apply(Object obj) {
                return ActivityManagerService.this.m1066x6f55eb8(uptimeSince, doCpuKills, app, cpuLimit, checkDur, (PhantomProcessRecord) obj);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$updatePhantomProcessCpuTimeLPr$23$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ Boolean m1066x6f55eb8(final long uptimeSince, boolean doCpuKills, final ProcessRecord app, final int cpuLimit, final long checkDur, final PhantomProcessRecord r) {
        if (r.mLastCputime > 0) {
            final long cpuTimeUsed = r.mCurrentCputime - r.mLastCputime;
            if (checkExcessivePowerUsageLPr(uptimeSince, doCpuKills, cpuTimeUsed, app.processName, r.toString(), cpuLimit, app)) {
                this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda17
                    @Override // java.lang.Runnable
                    public final void run() {
                        ActivityManagerService.this.m1065x4d7dd119(app, r, cpuTimeUsed, uptimeSince, checkDur, cpuLimit);
                    }
                });
                return false;
            }
        }
        r.mLastCputime = r.mCurrentCputime;
        return true;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$updatePhantomProcessCpuTimeLPr$22$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1065x4d7dd119(ProcessRecord app, PhantomProcessRecord r, long cpuTimeUsed, long uptimeSince, long checkDur, int cpuLimit) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mPhantomProcessList.killPhantomProcessGroupLocked(app, r, 9, 7, "excessive cpu " + cpuTimeUsed + " during " + uptimeSince + " dur=" + checkDur + " limit=" + cpuLimit);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    private boolean checkExcessivePowerUsageLPr(long uptimeSince, boolean doCpuKills, long cputimeUsed, final String processName, String description, int cpuLimit, final ProcessRecord app) {
        if (ActivityManagerDebugConfig.DEBUG_POWER && uptimeSince > 0) {
            StringBuilder sb = new StringBuilder(128);
            sb.append("CPU for ");
            sb.append(description);
            sb.append(": over ");
            TimeUtils.formatDuration(uptimeSince, sb);
            sb.append(" used ");
            TimeUtils.formatDuration(cputimeUsed, sb);
            sb.append(" (");
            sb.append((cputimeUsed * 100.0d) / uptimeSince);
            sb.append("%)");
            Slog.i(TAG_POWER, sb.toString());
        }
        if (doCpuKills && uptimeSince > 0) {
            if ((100 * cputimeUsed) / uptimeSince >= cpuLimit) {
                this.mBatteryStatsService.reportExcessiveCpu(app.info.uid, app.processName, uptimeSince, cputimeUsed);
                app.getPkgList().forEachPackageProcessStats(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda25
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.lambda$checkExcessivePowerUsageLPr$24(ProcessRecord.this, processName, (ProcessStats.ProcessStateHolder) obj);
                    }
                });
                return true;
            }
            return false;
        }
        return false;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ void lambda$checkExcessivePowerUsageLPr$24(ProcessRecord app, String processName, ProcessStats.ProcessStateHolder holder) {
        ProcessState state = holder.state;
        FrameworkStatsLog.write(16, app.info.uid, processName, state != null ? state.getPackage() : app.info.packageName, holder.appVersion);
    }

    private boolean isEphemeralLocked(int uid) {
        String[] packages = this.mContext.getPackageManager().getPackagesForUid(uid);
        if (packages == null || packages.length != 1) {
            return false;
        }
        return getPackageManagerInternal().isPackageEphemeral(UserHandle.getUserId(uid), packages[0]);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void enqueueUidChangeLocked(UidRecord uidRec, int uid, int change) {
        int uid2 = uidRec != null ? uidRec.getUid() : uid;
        if (uid2 < 0) {
            throw new IllegalArgumentException("No UidRecord or uid");
        }
        int procState = uidRec != null ? uidRec.getSetProcState() : 20;
        long procStateSeq = uidRec != null ? uidRec.curProcStateSeq : 0L;
        int capability = uidRec != null ? uidRec.getSetCapability() : 0;
        boolean ephemeral = uidRec != null ? uidRec.isEphemeral() : isEphemeralLocked(uid2);
        if (uidRec != null && uidRec.isIdle() && (change & 2) != 0) {
            this.mProcessList.killAppIfBgRestrictedAndCachedIdleLocked(uidRec);
        }
        if (uidRec != null && !uidRec.isIdle() && (change & 1) != 0) {
            change |= 2;
        }
        int enqueuedChange = this.mUidObserverController.enqueueUidChange(uidRec == null ? null : uidRec.pendingChange, uid2, change, procState, procStateSeq, capability, ephemeral);
        if (uidRec != null) {
            uidRec.setLastReportedChange(enqueuedChange);
        }
        PowerManagerInternal powerManagerInternal = this.mLocalPowerManager;
        if (powerManagerInternal != null) {
            if ((enqueuedChange & 4) != 0) {
                powerManagerInternal.uidActive(uid2);
            }
            if ((enqueuedChange & 2) != 0) {
                this.mLocalPowerManager.uidIdle(uid2);
            }
            if ((enqueuedChange & 1) != 0) {
                this.mLocalPowerManager.uidGone(uid2);
            } else if ((Integer.MIN_VALUE & enqueuedChange) != 0) {
                this.mLocalPowerManager.updateUidProcState(uid2, procState);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final void setProcessTrackerStateLOSP(ProcessRecord proc, int memFactor) {
        if (proc.getThread() != null) {
            proc.mProfile.setProcessTrackerState(proc.mState.getReportedProcState(), memFactor);
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final void updateProcessForegroundLocked(ProcessRecord proc, boolean isForeground, int fgServiceTypes, boolean oomAdj) {
        ProcessServiceRecord psr = proc.mServices;
        boolean foregroundStateChanged = isForeground != psr.hasForegroundServices();
        if (foregroundStateChanged || psr.getForegroundServiceTypes() != fgServiceTypes) {
            if (foregroundStateChanged) {
                for (int i = this.mForegroundServiceStateListeners.size() - 1; i >= 0; i--) {
                    this.mForegroundServiceStateListeners.get(i).onForegroundServiceStateChanged(proc.info.packageName, proc.info.uid, proc.getPid(), isForeground);
                }
            }
            psr.setHasForegroundServices(isForeground, fgServiceTypes);
            ArrayList<ProcessRecord> curProcs = (ArrayList) this.mForegroundPackages.get(proc.info.packageName, proc.info.uid);
            if (isForeground) {
                if (curProcs == null) {
                    curProcs = new ArrayList<>();
                    this.mForegroundPackages.put(proc.info.packageName, proc.info.uid, curProcs);
                }
                if (!curProcs.contains(proc)) {
                    curProcs.add(proc);
                    this.mBatteryStatsService.noteEvent(32770, proc.info.packageName, proc.info.uid);
                }
            } else if (curProcs != null && curProcs.remove(proc)) {
                this.mBatteryStatsService.noteEvent(16386, proc.info.packageName, proc.info.uid);
                if (curProcs.size() <= 0) {
                    this.mForegroundPackages.remove(proc.info.packageName, proc.info.uid);
                }
            }
            psr.setReportedForegroundServiceTypes(fgServiceTypes);
            ProcessChangeItem item = this.mProcessList.enqueueProcessChangeItemLocked(proc.getPid(), proc.info.uid);
            item.changes |= 2;
            item.foregroundServiceTypes = fgServiceTypes;
        }
        if (oomAdj) {
            updateOomAdjLocked(proc, "updateOomAdj_uiVisibility");
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public ProcessRecord getTopApp() {
        String pkg;
        int uid;
        String str;
        ActivityTaskManagerInternal activityTaskManagerInternal = this.mAtmInternal;
        WindowProcessController wpc = activityTaskManagerInternal != null ? activityTaskManagerInternal.getTopApp() : null;
        ProcessRecord r = wpc != null ? (ProcessRecord) wpc.mOwner : null;
        if (r != null) {
            pkg = r.processName;
            uid = r.info.uid;
        } else {
            pkg = null;
            uid = -1;
        }
        synchronized (this.mCurResumedAppLock) {
            if (uid != this.mCurResumedUid || (pkg != (str = this.mCurResumedPackage) && (pkg == null || !pkg.equals(str)))) {
                long identity = Binder.clearCallingIdentity();
                String str2 = this.mCurResumedPackage;
                if (str2 != null) {
                    this.mBatteryStatsService.noteEvent(16387, str2, this.mCurResumedUid);
                }
                this.mCurResumedPackage = pkg;
                this.mCurResumedUid = uid;
                if (CAM_LOW_WARNING_SUPPORT) {
                    mWarnCameraProcessName = pkg;
                }
                if (pkg != null) {
                    this.mBatteryStatsService.noteEvent(32771, pkg, uid);
                }
                Binder.restoreCallingIdentity(identity);
            }
        }
        return r;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void enqueueOomAdjTargetLocked(ProcessRecord app) {
        this.mOomAdjuster.enqueueOomAdjTargetLocked(app);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void removeOomAdjTargetLocked(ProcessRecord app, boolean procDied) {
        this.mOomAdjuster.removeOomAdjTargetLocked(app, procDied);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void updateOomAdjPendingTargetsLocked(String oomAdjReason) {
        this.mOomAdjuster.updateOomAdjPendingTargetsLocked(oomAdjReason);
    }

    /* loaded from: classes.dex */
    static final class ProcStatsRunnable implements Runnable {
        private final ProcessStatsService mProcessStats;
        private final ActivityManagerService mService;

        /* JADX INFO: Access modifiers changed from: package-private */
        public ProcStatsRunnable(ActivityManagerService service, ProcessStatsService mProcessStats) {
            this.mService = service;
            this.mProcessStats = mProcessStats;
        }

        @Override // java.lang.Runnable
        public void run() {
            this.mProcessStats.writeStateAsync();
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final void updateOomAdjLocked(String oomAdjReason) {
        this.mOomAdjuster.updateOomAdjLocked(oomAdjReason);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final boolean updateOomAdjLocked(ProcessRecord app, String oomAdjReason) {
        return this.mOomAdjuster.updateOomAdjLocked(app, oomAdjReason);
    }

    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [16931=4] */
    /* JADX WARN: Removed duplicated region for block: B:64:0x0111 A[Catch: all -> 0x0116, TryCatch #3 {all -> 0x0137, blocks: (B:5:0x0027, B:7:0x0031, B:12:0x003b, B:57:0x0102, B:71:0x011c, B:72:0x0136, B:62:0x010d, B:64:0x0111, B:66:0x0115, B:53:0x00fa, B:55:0x00fe, B:56:0x0101), top: B:80:0x0027 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public void makePackageIdle(String packageName, int userId) {
        PowerManagerInternal powerManagerInternal;
        IPackageManager pm;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            String msg = "Permission Denial: makePackageIdle() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.FORCE_STOP_PACKAGES";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
        int callingPid = Binder.getCallingPid();
        int userId2 = this.mUserController.handleIncomingUser(callingPid, Binder.getCallingUid(), userId, true, 2, "makePackageIdle", null);
        long callingId = Binder.clearCallingIdentity();
        try {
            IPackageManager pm2 = AppGlobals.getPackageManager();
            int pkgUid = -1;
            try {
                pkgUid = pm2.getPackageUid(packageName, 268443648L, 0);
            } catch (RemoteException e) {
            }
            int i = -1;
            if (pkgUid == -1) {
                throw new IllegalArgumentException("Unknown package name " + packageName);
            }
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    PowerManagerInternal powerManagerInternal2 = this.mLocalPowerManager;
                    if (powerManagerInternal2 != null) {
                        try {
                            powerManagerInternal2.startUidChanges();
                        } catch (Throwable th) {
                            th = th;
                            powerManagerInternal = this.mLocalPowerManager;
                            if (powerManagerInternal != null) {
                                powerManagerInternal.finishUidChanges();
                            }
                            throw th;
                        }
                    }
                    int appId = UserHandle.getAppId(pkgUid);
                    int i2 = this.mProcessList.mActiveUids.size() - 1;
                    while (i2 >= 0) {
                        UidRecord uidRec = this.mProcessList.mActiveUids.valueAt(i2);
                        long bgTime = uidRec.getLastBackgroundTime();
                        if (bgTime <= 0 || uidRec.isIdle()) {
                            pm = pm2;
                        } else {
                            int uid = uidRec.getUid();
                            if (UserHandle.getAppId(uid) == appId) {
                                if (userId2 != i) {
                                    if (userId2 != UserHandle.getUserId(uid)) {
                                        pm = pm2;
                                    }
                                }
                                ITranOomAdjuster.Instance().hookUidChangedIdle(uidRec.getUid());
                                EventLogTags.writeAmUidIdle(uid);
                                synchronized (this.mProcLock) {
                                    boostPriorityForProcLockedSection();
                                    uidRec.setIdle(true);
                                    uidRec.setSetIdle(true);
                                }
                                resetPriorityAfterProcLockedSection();
                                pm = pm2;
                                try {
                                    Slog.w(TAG, "Idling uid " + UserHandle.formatUid(uid) + " from package " + packageName + " user " + userId2);
                                    doStopUidLocked(uid, uidRec);
                                } catch (Throwable th2) {
                                    th = th2;
                                    powerManagerInternal = this.mLocalPowerManager;
                                    if (powerManagerInternal != null) {
                                    }
                                    throw th;
                                }
                            } else {
                                pm = pm2;
                            }
                        }
                        i2--;
                        pm2 = pm;
                        i = -1;
                    }
                    PowerManagerInternal powerManagerInternal3 = this.mLocalPowerManager;
                    if (powerManagerInternal3 != null) {
                        powerManagerInternal3.finishUidChanges();
                    }
                } catch (Throwable th3) {
                    th = th3;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    final void idleUids() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mOomAdjuster.idleUidsLocked();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    final void runInBackgroundDisabled(int uid) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                UidRecord uidRec = this.mProcessList.getUidRecordLOSP(uid);
                if (uidRec != null) {
                    if (uidRec.isIdle()) {
                        doStopUidLocked(uidRec.getUid(), uidRec);
                    }
                } else {
                    doStopUidLocked(uid, null);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    final void cameraActiveChanged(int uid, boolean active) {
        synchronized (this.mActiveCameraUids) {
            int curIndex = this.mActiveCameraUids.indexOf(uid);
            if (active) {
                if (curIndex < 0) {
                    this.mActiveCameraUids.add(uid);
                }
            } else if (curIndex >= 0) {
                this.mActiveCameraUids.remove(curIndex);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final boolean isCameraActiveForUid(int uid) {
        boolean z;
        synchronized (this.mActiveCameraUids) {
            z = this.mActiveCameraUids.indexOf(uid) >= 0;
        }
        return z;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public final void doStopUidLocked(int uid, UidRecord uidRec) {
        this.mServices.stopInBackgroundLocked(uid);
        enqueueUidChangeLocked(uidRec, uid, AudioDevice.IN_AMBIENT);
    }

    void tempAllowlistForPendingIntentLocked(int callerPid, int callerUid, int targetUid, long duration, int type, int reasonCode, String reason) {
        if (ActivityManagerDebugConfig.DEBUG_ALLOWLISTS) {
            Slog.d(TAG, "tempAllowlistForPendingIntentLocked(" + callerPid + ", " + callerUid + ", " + targetUid + ", " + duration + ", " + type + ")");
        }
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord pr = this.mPidsSelfLocked.get(callerPid);
            if (pr == null) {
                Slog.w(TAG, "tempAllowlistForPendingIntentLocked() no ProcessRecord for pid " + callerPid);
            } else if (!pr.mServices.mAllowlistManager && checkPermission("android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", callerPid, callerUid) != 0 && checkPermission("android.permission.START_ACTIVITIES_FROM_BACKGROUND", callerPid, callerUid) != 0 && checkPermission("android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND", callerPid, callerUid) != 0) {
                if (ActivityManagerDebugConfig.DEBUG_ALLOWLISTS) {
                    Slog.d(TAG, "tempAllowlistForPendingIntentLocked() for target " + targetUid + ": pid " + callerPid + " is not allowed");
                }
            } else {
                tempAllowlistUidLocked(targetUid, duration, reasonCode, reason, type, callerUid);
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void tempAllowlistUidLocked(int targetUid, long duration, int reasonCode, String reason, int type, int callingUid) {
        int i;
        int type2;
        synchronized (this.mProcLock) {
            try {
                try {
                    boostPriorityForProcLockedSection();
                    DeviceIdleInternal deviceIdleInternal = this.mLocalDeviceIdleController;
                    if (deviceIdleInternal != null) {
                        i = type;
                        try {
                            type2 = deviceIdleInternal.getTempAllowListType(reasonCode, i);
                        } catch (Throwable th) {
                            th = th;
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    } else {
                        type2 = type;
                    }
                } catch (Throwable th2) {
                    th = th2;
                    i = type;
                }
                try {
                    if (type2 == -1) {
                        resetPriorityAfterProcLockedSection();
                        return;
                    }
                    this.mPendingTempAllowlist.put(targetUid, new PendingTempAllowlist(targetUid, duration, reasonCode, reason, type2, callingUid));
                    setUidTempAllowlistStateLSP(targetUid, true);
                    this.mUiHandler.obtainMessage(68).sendToTarget();
                    if (type2 == 0) {
                        this.mFgsStartTempAllowList.add(targetUid, duration, new FgsTempAllowListItem(duration, reasonCode, reason, callingUid));
                    }
                    resetPriorityAfterProcLockedSection();
                } catch (Throwable th3) {
                    th = th3;
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            } catch (Throwable th4) {
                th = th4;
            }
        }
    }

    void pushTempAllowlist() {
        int N;
        PendingTempAllowlist[] list;
        int index;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mProcLock) {
                    boostPriorityForProcLockedSection();
                    N = this.mPendingTempAllowlist.size();
                    list = new PendingTempAllowlist[N];
                    for (int i = 0; i < N; i++) {
                        list[i] = this.mPendingTempAllowlist.valueAt(i);
                    }
                }
                resetPriorityAfterProcLockedSection();
            } finally {
            }
        }
        resetPriorityAfterLockedSection();
        if (this.mLocalDeviceIdleController != null) {
            for (int i2 = 0; i2 < N; i2++) {
                PendingTempAllowlist ptw = list[i2];
                if (ptw != null) {
                    this.mLocalDeviceIdleController.addPowerSaveTempWhitelistAppDirect(ptw.targetUid, ptw.duration, ptw.type, true, ptw.reasonCode, ptw.tag, ptw.callingUid);
                }
            }
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                synchronized (this.mProcLock) {
                    boostPriorityForProcLockedSection();
                    for (int i3 = 0; i3 < N; i3++) {
                        PendingTempAllowlist ptw2 = list[i3];
                        if (ptw2 != null && (index = this.mPendingTempAllowlist.indexOfKey(ptw2.targetUid)) >= 0 && this.mPendingTempAllowlist.valueAt(index) == ptw2) {
                            this.mPendingTempAllowlist.removeAt(index);
                        }
                    }
                }
                resetPriorityAfterProcLockedSection();
            } finally {
            }
        }
        resetPriorityAfterLockedSection();
    }

    final void setAppIdTempAllowlistStateLSP(int uid, boolean onAllowlist) {
        this.mOomAdjuster.setAppIdTempAllowlistStateLSP(uid, onAllowlist);
    }

    final void setUidTempAllowlistStateLSP(int uid, boolean onAllowlist) {
        this.mOomAdjuster.setUidTempAllowlistStateLSP(uid, onAllowlist);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void trimApplications(boolean forceFullOomAdj, String oomAdjReason) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                trimApplicationsLocked(forceFullOomAdj, oomAdjReason);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    private void trimApplicationsLocked(boolean forceFullOomAdj, String oomAdjReason) {
        boolean didSomething = false;
        for (int i = this.mProcessList.mRemovedProcesses.size() - 1; i >= 0; i--) {
            ProcessRecord app = this.mProcessList.mRemovedProcesses.get(i);
            if (!app.hasActivitiesOrRecentTasks() && app.mReceivers.numberOfCurReceivers() == 0 && app.mServices.numberOfRunningServices() == 0) {
                IApplicationThread thread = app.getThread();
                Slog.i(TAG, "Exiting empty application process " + app.toShortString() + " (" + (thread != null ? thread.asBinder() : null) + ")\n");
                int pid = app.getPid();
                if (pid > 0 && pid != MY_PID) {
                    app.killLocked("empty", 13, 4, false);
                } else if (thread != null) {
                    try {
                        thread.scheduleExit();
                    } catch (Exception e) {
                    }
                }
                didSomething = true;
                cleanUpApplicationRecordLocked(app, pid, false, true, -1, false, false);
                this.mProcessList.mRemovedProcesses.remove(i);
                if (app.isPersistent()) {
                    addAppLocked(app.info, null, false, null, 2);
                    app.mProfile.addHostingComponentType(2);
                }
            }
        }
        if (didSomething || forceFullOomAdj) {
            updateOomAdjLocked(oomAdjReason);
        } else {
            updateOomAdjPendingTargetsLocked(oomAdjReason);
        }
    }

    public void signalPersistentProcesses(final int sig) throws RemoteException {
        if (sig != 10) {
            throw new SecurityException("Only SIGNAL_USR1 is allowed");
        }
        if (checkCallingPermission("android.permission.SIGNAL_PERSISTENT_PROCESSES") != 0) {
            throw new SecurityException("Requires permission android.permission.SIGNAL_PERSISTENT_PROCESSES");
        }
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                this.mProcessList.forEachLruProcessesLOSP(false, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda4
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.lambda$signalPersistentProcesses$25(sig, (ProcessRecord) obj);
                    }
                });
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static /* synthetic */ void lambda$signalPersistentProcesses$25(int sig, ProcessRecord app) {
        if (app.getThread() != null && app.isPersistent()) {
            Process.sendSignal(app.getPid(), sig);
        }
    }

    public boolean profileControl(String process, int userId, boolean start, ProfilerInfo profilerInfo, int profileType) throws RemoteException {
        boolean profileControlLPf;
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        if (start && (profilerInfo == null || profilerInfo.profileFd == null)) {
            throw new IllegalArgumentException("null profile info or fd");
        }
        ProcessRecord proc = null;
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                if (process != null) {
                    proc = findProcessLOSP(process, userId, "profileControl");
                }
                if (start && (proc == null || proc.getThread() == null)) {
                    throw new IllegalArgumentException("Unknown process: " + process);
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        synchronized (this.mAppProfiler.mProfilerLock) {
            profileControlLPf = this.mAppProfiler.profileControlLPf(proc, start, profilerInfo, profileType);
        }
        return profileControlLPf;
    }

    private ProcessRecord findProcessLOSP(String process, int userId, String callName) {
        int userId2 = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), userId, true, 2, callName, null);
        ProcessRecord proc = null;
        try {
            int pid = Integer.parseInt(process);
            synchronized (this.mPidsSelfLocked) {
                proc = this.mPidsSelfLocked.get(pid);
            }
        } catch (NumberFormatException e) {
        }
        if (proc == null) {
            ArrayMap<String, SparseArray<ProcessRecord>> all = this.mProcessList.getProcessNamesLOSP().getMap();
            SparseArray<ProcessRecord> procs = all.get(process);
            if (procs != null && procs.size() > 0) {
                ProcessRecord proc2 = procs.valueAt(0);
                ProcessRecord proc3 = proc2;
                if (userId2 != -1 && proc3.userId != userId2) {
                    for (int i = 1; i < procs.size(); i++) {
                        ProcessRecord thisProc = procs.valueAt(i);
                        if (thisProc.userId == userId2) {
                            return thisProc;
                        }
                    }
                    return proc3;
                }
                return proc3;
            }
            return proc;
        }
        return proc;
    }

    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [17315=4] */
    /* JADX WARN: Removed duplicated region for block: B:103:0x00dd A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00a4 A[Catch: all -> 0x0101, TryCatch #0 {all -> 0x0101, blocks: (B:36:0x0099, B:38:0x00a4, B:39:0x00c9, B:50:0x00e8, B:51:0x0100), top: B:90:0x001a }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
    */
    public boolean dumpHeap(String process, int userId, boolean managed, boolean mallocInfo, boolean runGc, String path, ParcelFileDescriptor fd, final RemoteCallback finishCallback) {
        ParcelFileDescriptor fd2;
        RemoteException remoteException;
        IApplicationThread thread;
        boolean z;
        boolean isDebuggable;
        try {
            try {
            } catch (Throwable e) {
                remoteException = e;
            }
        } catch (RemoteException e2) {
        } catch (Throwable th) {
            fd2 = fd;
            remoteException = th;
        }
        try {
            if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
                throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
            }
            if (fd == null) {
                throw new IllegalArgumentException("null fd");
            }
            try {
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        try {
                            ProcessRecord proc = findProcessLOSP(process, userId, "dumpHeap");
                            try {
                                if (proc != null && (thread = proc.getThread()) != null) {
                                    if (!Build.IS_DEBUGGABLE) {
                                        try {
                                            if (!"1".equals(SystemProperties.get("persist.user.root.support", "0")) && !"1".equals(SystemProperties.get("persist.sys.fans.support", "0"))) {
                                                z = false;
                                                isDebuggable = z;
                                                if (!isDebuggable && (proc.info.flags & 2) == 0 && "disable".equals(SystemProperties.get("sys.dump.heap", "disable"))) {
                                                    throw new SecurityException("Process not debuggable: " + proc);
                                                }
                                                this.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                                                RemoteCallback intermediateCallback = new RemoteCallback(new RemoteCallback.OnResultListener() { // from class: com.android.server.am.ActivityManagerService.20
                                                    public void onResult(Bundle result) {
                                                        finishCallback.sendResult(result);
                                                        ActivityManagerService.this.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
                                                    }
                                                }, (Handler) null);
                                                if (mIsAdbEnable) {
                                                    mLastDumpHeapTime = SystemClock.uptimeMillis();
                                                    mLastDumpHeapCount++;
                                                    Log.d(TAG, "AMS dumpheap mLastDumpHeapTime : " + mLastDumpHeapTime);
                                                }
                                                thread.dumpHeap(managed, mallocInfo, runGc, path, fd, intermediateCallback);
                                                ParcelFileDescriptor fd3 = null;
                                                resetPriorityAfterLockedSection();
                                                if (0 != 0) {
                                                    try {
                                                        fd3.close();
                                                    } catch (IOException e3) {
                                                    }
                                                }
                                                return true;
                                            }
                                        } catch (Throwable th2) {
                                            th = th2;
                                            try {
                                                resetPriorityAfterLockedSection();
                                                throw th;
                                            } catch (RemoteException e4) {
                                                throw new IllegalStateException("Process disappeared");
                                            }
                                        }
                                    }
                                    z = true;
                                    isDebuggable = z;
                                    if (!isDebuggable) {
                                        throw new SecurityException("Process not debuggable: " + proc);
                                    }
                                    this.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                                    RemoteCallback intermediateCallback2 = new RemoteCallback(new RemoteCallback.OnResultListener() { // from class: com.android.server.am.ActivityManagerService.20
                                        public void onResult(Bundle result) {
                                            finishCallback.sendResult(result);
                                            ActivityManagerService.this.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
                                        }
                                    }, (Handler) null);
                                    if (mIsAdbEnable) {
                                    }
                                    thread.dumpHeap(managed, mallocInfo, runGc, path, fd, intermediateCallback2);
                                    ParcelFileDescriptor fd32 = null;
                                    resetPriorityAfterLockedSection();
                                    if (0 != 0) {
                                    }
                                    return true;
                                }
                                throw new IllegalArgumentException("Unknown process: " + process);
                            } catch (Throwable th3) {
                                th = th3;
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } catch (Throwable th4) {
                            th = th4;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } catch (Throwable th5) {
                        th = th5;
                    }
                }
            } catch (Throwable th6) {
                th = th6;
            }
        } catch (RemoteException e5) {
            throw new IllegalStateException("Process disappeared");
        } catch (Throwable th7) {
            fd2 = fd;
            remoteException = th7;
            if (fd2 != null) {
                try {
                    fd2.close();
                } catch (IOException e6) {
                }
            }
            throw remoteException;
        }
    }

    public boolean dumpResources(String process, ParcelFileDescriptor fd, RemoteCallback callback) throws RemoteException {
        IApplicationThread thread;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                ProcessRecord proc = findProcessLOSP(process, -2, "dumpResources");
                if (proc == null || (thread = proc.getThread()) == null) {
                    throw new IllegalArgumentException("Unknown process: " + process);
                }
                thread.dumpResources(fd, callback);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return true;
    }

    public void dumpAllResources(ParcelFileDescriptor fd, PrintWriter pw) throws RemoteException {
        ArrayList<ProcessRecord> processes = new ArrayList<>();
        synchronized (this.mPidsSelfLocked) {
            processes.addAll(this.mProcessList.getLruProcessesLOSP());
        }
        int size = processes.size();
        for (int i = 0; i < size; i++) {
            ProcessRecord app = processes.get(i);
            pw.println(String.format("Resources History for %s (%s)", app.processName, app.info.packageName));
            pw.flush();
            try {
                TransferPipe tp = new TransferPipe("  ");
                IApplicationThread thread = app.getThread();
                if (thread != null) {
                    app.getThread().dumpResources(tp.getWriteFd(), (RemoteCallback) null);
                    tp.go(fd.getFileDescriptor(), 2000L);
                } else {
                    pw.println(String.format("  Resources history for %s (%s) failed, no thread", app.processName, app.info.packageName));
                }
                tp.kill();
            } catch (IOException e) {
                pw.println("  " + e.getMessage());
                pw.flush();
            }
        }
    }

    public void setDumpHeapDebugLimit(String processName, int uid, long maxMemSize, String reportPackage) {
        if (processName != null) {
            enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDumpHeapDebugLimit()");
        } else {
            synchronized (this.mPidsSelfLocked) {
                ProcessRecord proc = this.mPidsSelfLocked.get(Binder.getCallingPid());
                if (proc == null) {
                    throw new SecurityException("No process found for calling pid " + Binder.getCallingPid());
                }
                enforceDebuggable(proc);
                processName = proc.processName;
                uid = proc.uid;
                if (reportPackage != null && !proc.getPkgList().containsKey(reportPackage)) {
                    throw new SecurityException("Package " + reportPackage + " is not running in " + proc);
                }
            }
        }
        this.mAppProfiler.setDumpHeapDebugLimit(processName, uid, maxMemSize, reportPackage);
    }

    public void dumpHeapFinished(String path) {
        if (mIsAdbEnable && mLastDumpHeapCount > 0) {
            mLastDumpHeapTime = SystemClock.uptimeMillis();
            Log.d(TAG, "AMS dumpheap mLastDumpHeapCount : " + mLastDumpHeapCount);
        }
        this.mAppProfiler.dumpHeapFinished(path, Binder.getCallingPid());
    }

    @Override // com.android.server.Watchdog.Monitor
    public void monitor() {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void onCoreSettingsChange(Bundle settings) {
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                this.mProcessList.updateCoreSettingsLOSP(settings);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public boolean startUserInBackground(int userId) {
        return startUserInBackgroundWithListener(userId, null);
    }

    public boolean startUserInBackgroundWithListener(int userId, IProgressListener unlockListener) {
        return this.mUserController.m1523lambda$startUserInternal$13$comandroidserveramUserController(userId, false, unlockListener);
    }

    public boolean startUserInForegroundWithListener(int userId, IProgressListener unlockListener) {
        return this.mUserController.m1523lambda$startUserInternal$13$comandroidserveramUserController(userId, true, unlockListener);
    }

    public boolean unlockUser(int userId, byte[] token, byte[] secret, IProgressListener listener) {
        return this.mUserController.unlockUser(userId, secret, listener);
    }

    public boolean switchUser(int targetUserId) {
        return this.mUserController.switchUser(targetUserId);
    }

    public String getSwitchingFromUserMessage() {
        return this.mUserController.getSwitchingFromSystemUserMessage();
    }

    public String getSwitchingToUserMessage() {
        return this.mUserController.getSwitchingToSystemUserMessage();
    }

    public void setStopUserOnSwitch(int value) {
        this.mUserController.setStopUserOnSwitch(value);
    }

    public int stopUser(int userId, boolean force, IStopUserCallback callback) {
        return this.mUserController.stopUser(userId, force, false, callback, null);
    }

    public int stopUserWithDelayedLocking(int userId, boolean force, IStopUserCallback callback) {
        return this.mUserController.stopUser(userId, force, true, callback, null);
    }

    public boolean startProfile(int userId) {
        return this.mUserController.startProfile(userId);
    }

    public boolean stopProfile(int userId) {
        return this.mUserController.stopProfile(userId);
    }

    public UserInfo getCurrentUser() {
        return this.mUserController.getCurrentUser();
    }

    public int getCurrentUserId() {
        return this.mUserController.getCurrentUserIdChecked();
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public String getStartedUserState(int userId) {
        UserState userState = this.mUserController.getStartedUserState(userId);
        return UserState.stateToString(userState.state);
    }

    public boolean isUserRunning(int userId, int flags) {
        if (!this.mUserController.isSameProfileGroup(userId, UserHandle.getCallingUserId()) && checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") != 0) {
            String msg = "Permission Denial: isUserRunning() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.INTERACT_ACROSS_USERS";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
        return this.mUserController.isUserRunning(userId, flags);
    }

    public int[] getRunningUserIds() {
        if (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") != 0) {
            String msg = "Permission Denial: isUserRunning() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires android.permission.INTERACT_ACROSS_USERS";
            Slog.w(TAG, msg);
            throw new SecurityException(msg);
        }
        return this.mUserController.getStartedUserArray();
    }

    public void registerUserSwitchObserver(IUserSwitchObserver observer, String name) {
        this.mUserController.registerUserSwitchObserver(observer, name);
    }

    public void unregisterUserSwitchObserver(IUserSwitchObserver observer) {
        this.mUserController.unregisterUserSwitchObserver(observer);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public ApplicationInfo getAppInfoForUser(ApplicationInfo info, int userId) {
        if (info == null) {
            return null;
        }
        ApplicationInfo newInfo = new ApplicationInfo(info);
        newInfo.initForUser(userId);
        return newInfo;
    }

    public boolean isUserStopped(int userId) {
        return this.mUserController.getStartedUserState(userId) == null;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId) {
        if (aInfo == null || (userId < 1 && aInfo.applicationInfo.uid < 100000)) {
            return aInfo;
        }
        ActivityInfo info = new ActivityInfo(aInfo);
        info.applicationInfo = getAppInfoForUser(info.applicationInfo, userId);
        return info;
    }

    private boolean processSanityChecksLPr(ProcessRecord process, IApplicationThread thread) {
        if (process == null || thread == null) {
            return false;
        }
        return Build.IS_DEBUGGABLE || process.isDebuggable();
    }

    public boolean startBinderTracking() throws RemoteException {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                this.mBinderTransactionTrackingEnabled = true;
                this.mProcessList.forEachLruProcessesLOSP(true, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda28
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.this.m1060x97c3c75a((ProcessRecord) obj);
                    }
                });
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return true;
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$startBinderTracking$26$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1060x97c3c75a(ProcessRecord process) {
        IApplicationThread thread = process.getThread();
        if (!processSanityChecksLPr(process, thread)) {
            return;
        }
        try {
            thread.startBinderTracking();
        } catch (RemoteException e) {
            Log.v(TAG, "Process disappared");
        }
    }

    public boolean stopBinderTrackingAndDump(final ParcelFileDescriptor fd) throws RemoteException {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        boolean closeFd = true;
        try {
            synchronized (this.mProcLock) {
                boostPriorityForProcLockedSection();
                if (fd == null) {
                    throw new IllegalArgumentException("null fd");
                }
                this.mBinderTransactionTrackingEnabled = false;
                final FastPrintWriter fastPrintWriter = new FastPrintWriter(new FileOutputStream(fd.getFileDescriptor()));
                fastPrintWriter.println("Binder transaction traces for all processes.\n");
                this.mProcessList.forEachLruProcessesLOSP(true, new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda18
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        ActivityManagerService.this.m1061x2f6b8cfe(fastPrintWriter, fd, (ProcessRecord) obj);
                    }
                });
                closeFd = false;
            }
            resetPriorityAfterProcLockedSection();
            return true;
        } finally {
            if (fd != null && closeFd) {
                try {
                    fd.close();
                } catch (IOException e) {
                }
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$stopBinderTrackingAndDump$27$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1061x2f6b8cfe(PrintWriter pw, ParcelFileDescriptor fd, ProcessRecord process) {
        IApplicationThread thread = process.getThread();
        if (!processSanityChecksLPr(process, thread)) {
            return;
        }
        pw.println("Traces for process: " + process.processName);
        pw.flush();
        try {
            TransferPipe tp = new TransferPipe();
            try {
                thread.stopBinderTrackingAndDump(tp.getWriteFd());
                tp.go(fd.getFileDescriptor());
                tp.kill();
            } catch (Throwable th) {
                tp.kill();
                throw th;
            }
        } catch (RemoteException e) {
            pw.println("Got a RemoteException while dumping IPC traces from " + process + ".  Exception: " + e);
            pw.flush();
        } catch (IOException e2) {
            pw.println("Failure while dumping IPC traces from " + process + ".  Exception: " + e2);
            pw.flush();
        }
    }

    public void enableBinderTracing() {
        Binder.enableTracingForUid(Binder.getCallingUid());
    }

    /* loaded from: classes.dex */
    public final class LocalService extends ActivityManagerInternal implements ActivityManagerLocal {
        public LocalService() {
        }

        public List<PendingIntentStats> getPendingIntentStats() {
            return ActivityManagerService.this.mPendingIntentController.dumpPendingIntentStatsForStatsd();
        }

        public Pair<String, String> getAppProfileStatsForDebugging(long time, int lines) {
            return ActivityManagerService.this.mAppProfiler.getAppProfileStatsForDebugging(time, lines);
        }

        public void updateMultiWindowProcessList(int pid, String packageName) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (ActivityManagerService.this.mProcLock) {
                        ActivityManagerService.boostPriorityForProcLockedSection();
                        ActivityManagerService.this.mProcessList.addToMuteProcessList(pid, packageName, -999);
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void removeFromMuteProcessList(String packageName, int pid) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (ActivityManagerService.this.mProcLock) {
                        ActivityManagerService.boostPriorityForProcLockedSection();
                        ActivityManagerService.this.mProcessList.removeFromMuteProcessList(packageName, pid, -999);
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void clearMuteProcessList() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (ActivityManagerService.this.mProcLock) {
                        ActivityManagerService.boostPriorityForProcLockedSection();
                        ActivityManagerService.this.mProcessList.clearMuteProcessList(-999);
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void updateMultiWindowProcessList(int pid, String packageName, int multiWindowId) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (ActivityManagerService.this.mProcLock) {
                        ActivityManagerService.boostPriorityForProcLockedSection();
                        ActivityManagerService.this.mProcessList.addToMuteProcessList(pid, packageName, multiWindowId);
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void removeFromMuteProcessList(String packageName, int pid, int multiWindowId) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (ActivityManagerService.this.mProcLock) {
                        ActivityManagerService.boostPriorityForProcLockedSection();
                        ActivityManagerService.this.mProcessList.removeFromMuteProcessList(packageName, pid, multiWindowId);
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void clearMuteProcessList(int multiWindowId) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (ActivityManagerService.this.mProcLock) {
                        ActivityManagerService.boostPriorityForProcLockedSection();
                        ActivityManagerService.this.mProcessList.clearMuteProcessList(multiWindowId);
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public String checkContentProviderAccess(String authority, int userId) {
            return ActivityManagerService.this.mCpHelper.checkContentProviderAccess(authority, userId);
        }

        public int checkContentProviderUriPermission(Uri uri, int userId, int callingUid, int modeFlags) {
            return ActivityManagerService.this.mCpHelper.checkContentProviderUriPermission(uri, userId, callingUid, modeFlags);
        }

        public void onWakefulnessChanged(int wakefulness) {
            ActivityManagerService.this.onWakefulnessChanged(wakefulness);
        }

        public boolean startIsolatedProcess(String entryPoint, String[] entryPointArgs, String processName, String abiOverride, int uid, Runnable crashHandler) {
            return ActivityManagerService.this.startIsolatedProcess(entryPoint, entryPointArgs, processName, abiOverride, uid, crashHandler);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean bindSdkSandboxService(Intent service, ServiceConnection conn, int clientAppUid, String clientAppPackage, String processName, int flags) throws RemoteException {
            if (service == null) {
                throw new IllegalArgumentException("intent is null");
            }
            if (conn == null) {
                throw new IllegalArgumentException("connection is null");
            }
            if (clientAppPackage == null) {
                throw new IllegalArgumentException("clientAppPackage is null");
            }
            if (processName == null) {
                throw new IllegalArgumentException("processName is null");
            }
            if (service.getComponent() == null) {
                throw new IllegalArgumentException("service must specify explicit component");
            }
            if (!UserHandle.isApp(clientAppUid)) {
                throw new IllegalArgumentException("uid is not within application range");
            }
            if (ActivityManagerService.this.mAppOpsService.checkPackage(clientAppUid, clientAppPackage) != 0) {
                throw new IllegalArgumentException("uid does not belong to provided package");
            }
            Handler handler = ActivityManagerService.this.mContext.getMainThreadHandler();
            IServiceConnection sd = ActivityManagerService.this.mContext.getServiceDispatcher(conn, handler, flags);
            service.prepareToLeaveProcess(ActivityManagerService.this.mContext);
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            return activityManagerService.bindServiceInstance(activityManagerService.mContext.getIApplicationThread(), ActivityManagerService.this.mContext.getActivityToken(), service, service.resolveTypeIfNeeded(ActivityManagerService.this.mContext.getContentResolver()), sd, flags, processName, true, clientAppUid, clientAppPackage, ActivityManagerService.this.mContext.getOpPackageName(), UserHandle.getUserId(clientAppUid)) != 0;
        }

        public void onUserRemoved(int userId) {
            ActivityManagerService.this.mAtmInternal.onUserStopped(userId);
            ActivityManagerService.this.mBatteryStatsService.onUserRemoved(userId);
            ActivityManagerService.this.mUserController.onUserRemoved(userId);
        }

        public void killForegroundAppsForUser(int userId) {
            ArrayList<ProcessRecord> procs = new ArrayList<>();
            synchronized (ActivityManagerService.this.mProcLock) {
                try {
                    ActivityManagerService.boostPriorityForProcLockedSection();
                    int numOfProcs = ActivityManagerService.this.mProcessList.getProcessNamesLOSP().getMap().size();
                    for (int ip = 0; ip < numOfProcs; ip++) {
                        SparseArray<ProcessRecord> apps = (SparseArray) ActivityManagerService.this.mProcessList.getProcessNamesLOSP().getMap().valueAt(ip);
                        int NA = apps.size();
                        for (int ia = 0; ia < NA; ia++) {
                            ProcessRecord app = apps.valueAt(ia);
                            if (!app.isPersistent() && (app.isRemoved() || (app.userId == userId && app.mState.hasForegroundActivities()))) {
                                procs.add(app);
                            }
                        }
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterProcLockedSection();
            int numOfProcs2 = procs.size();
            if (numOfProcs2 > 0) {
                synchronized (ActivityManagerService.this) {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        for (int i = 0; i < numOfProcs2; i++) {
                            ActivityManagerService.this.mProcessList.removeProcessLocked(procs.get(i), false, true, 13, 9, "kill all fg");
                        }
                    } catch (Throwable th2) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th2;
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
            }
        }

        public void setPendingIntentAllowlistDuration(IIntentSender target, IBinder allowlistToken, long duration, int type, int reasonCode, String reason) {
            ActivityManagerService.this.mPendingIntentController.setPendingIntentAllowlistDuration(target, allowlistToken, duration, type, reasonCode, reason);
        }

        public int getPendingIntentFlags(IIntentSender target) {
            return ActivityManagerService.this.mPendingIntentController.getPendingIntentFlags(target);
        }

        public int[] getStartedUserIds() {
            return ActivityManagerService.this.mUserController.getStartedUserArray();
        }

        public void setPendingIntentAllowBgActivityStarts(IIntentSender target, IBinder allowlistToken, int flags) {
            if (!(target instanceof PendingIntentRecord)) {
                Slog.w(ActivityManagerService.TAG, "setPendingIntentAllowBgActivityStarts(): not a PendingIntentRecord: " + target);
                return;
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ((PendingIntentRecord) target).setAllowBgActivityStarts(allowlistToken, flags);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void clearPendingIntentAllowBgActivityStarts(IIntentSender target, IBinder allowlistToken) {
            if (!(target instanceof PendingIntentRecord)) {
                Slog.w(ActivityManagerService.TAG, "clearPendingIntentAllowBgActivityStarts(): not a PendingIntentRecord: " + target);
                return;
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ((PendingIntentRecord) target).clearAllowBgActivityStarts(allowlistToken);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void setDeviceIdleAllowlist(int[] allAppids, int[] exceptIdleAppids) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (ActivityManagerService.this.mProcLock) {
                        ActivityManagerService.boostPriorityForProcLockedSection();
                        ActivityManagerService.this.mDeviceIdleAllowlist = allAppids;
                        ActivityManagerService.this.mDeviceIdleExceptIdleAllowlist = exceptIdleAppids;
                        ActivityManagerService.this.mAppRestrictionController.setDeviceIdleAllowlist(allAppids, exceptIdleAppids);
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void updateDeviceIdleTempAllowlist(int[] appids, int changingUid, boolean adding, long durationMs, int type, int reasonCode, String reason, int callingUid) {
            synchronized (ActivityManagerService.this) {
                try {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        try {
                            synchronized (ActivityManagerService.this.mProcLock) {
                                try {
                                    ActivityManagerService.boostPriorityForProcLockedSection();
                                    if (appids != null) {
                                        ActivityManagerService.this.mDeviceIdleTempAllowlist = appids;
                                    }
                                    if (!adding) {
                                        ActivityManagerService.this.mFgsStartTempAllowList.removeUid(changingUid);
                                    } else if (type == 0) {
                                        ActivityManagerService.this.mFgsStartTempAllowList.add(changingUid, durationMs, new FgsTempAllowListItem(durationMs, reasonCode, reason, callingUid));
                                    }
                                    ActivityManagerService.this.setAppIdTempAllowlistStateLSP(changingUid, adding);
                                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                } catch (Throwable th) {
                                    th = th;
                                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                                    throw th;
                                }
                            }
                        } catch (Throwable th2) {
                            th = th2;
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th4) {
                    th = th4;
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public int getUidProcessState(int uid) {
            return ActivityManagerService.this.getUidState(uid);
        }

        public Map<Integer, String> getProcessesWithPendingBindMounts(int userId) {
            return ActivityManagerService.this.mProcessList.getProcessesWithPendingBindMounts(userId);
        }

        public boolean isSystemReady() {
            return ActivityManagerService.this.mSystemReady;
        }

        public String getPackageNameByPid(int pid) {
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                ProcessRecord app = ActivityManagerService.this.mPidsSelfLocked.get(pid);
                if (app != null && app.info != null) {
                    return app.info.packageName;
                }
                return null;
            }
        }

        public void setHasOverlayUi(int pid, boolean hasOverlayUi) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                        ProcessRecord pr = ActivityManagerService.this.mPidsSelfLocked.get(pid);
                        if (pr == null) {
                            Slog.w(ActivityManagerService.TAG, "setHasOverlayUi called on unknown pid: " + pid);
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        } else if (pr.mState.hasOverlayUi() == hasOverlayUi) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        } else {
                            pr.mState.setHasOverlayUi(hasOverlayUi);
                            ActivityManagerService.this.updateOomAdjLocked(pr, "updateOomAdj_uiVisibility");
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public void notifyNetworkPolicyRulesUpdated(int uid, long procStateSeq) {
            if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                Slog.d(ActivityManagerService.TAG_NETWORK, "Got update from NPMS for uid: " + uid + " seq: " + procStateSeq);
            }
            synchronized (ActivityManagerService.this.mProcLock) {
                try {
                    ActivityManagerService.boostPriorityForProcLockedSection();
                    UidRecord record = ActivityManagerService.this.mProcessList.getUidRecordLOSP(uid);
                    if (record == null) {
                        if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                            Slog.d(ActivityManagerService.TAG_NETWORK, "No active uidRecord for uid: " + uid + " procStateSeq: " + procStateSeq);
                        }
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                        return;
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    synchronized (record.networkStateLock) {
                        if (record.lastNetworkUpdatedProcStateSeq >= procStateSeq) {
                            if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                                Slog.d(ActivityManagerService.TAG_NETWORK, "procStateSeq: " + procStateSeq + " has already been handled for uid: " + uid);
                            }
                            return;
                        }
                        record.lastNetworkUpdatedProcStateSeq = procStateSeq;
                        if (record.procStateSeqWaitingForNetwork != 0 && procStateSeq >= record.procStateSeqWaitingForNetwork) {
                            if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                                Slog.d(ActivityManagerService.TAG_NETWORK, "Notifying all blocking threads for uid: " + uid + ", procStateSeq: " + procStateSeq + ", procStateSeqWaitingForNetwork: " + record.procStateSeqWaitingForNetwork);
                            }
                            record.networkStateLock.notifyAll();
                        }
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
        }

        public void onUidBlockedReasonsChanged(int uid, int blockedReasons) {
            synchronized (ActivityManagerService.this.mUidNetworkBlockedReasons) {
                if (blockedReasons == 0) {
                    ActivityManagerService.this.mUidNetworkBlockedReasons.delete(uid);
                } else {
                    ActivityManagerService.this.mUidNetworkBlockedReasons.put(uid, blockedReasons);
                }
            }
        }

        public boolean isRuntimeRestarted() {
            return ActivityManagerService.this.mSystemServiceManager.isRuntimeRestarted();
        }

        public boolean canStartMoreUsers() {
            return ActivityManagerService.this.mUserController.canStartMoreUsers();
        }

        public void setSwitchingFromSystemUserMessage(String switchingFromSystemUserMessage) {
            ActivityManagerService.this.mUserController.setSwitchingFromSystemUserMessage(switchingFromSystemUserMessage);
        }

        public void setSwitchingToSystemUserMessage(String switchingToSystemUserMessage) {
            ActivityManagerService.this.mUserController.setSwitchingToSystemUserMessage(switchingToSystemUserMessage);
        }

        public int getMaxRunningUsers() {
            return ActivityManagerService.this.mUserController.getMaxRunningUsers();
        }

        public boolean isUidActive(int uid) {
            boolean isUidActiveLOSP;
            synchronized (ActivityManagerService.this.mProcLock) {
                try {
                    ActivityManagerService.boostPriorityForProcLockedSection();
                    isUidActiveLOSP = ActivityManagerService.this.isUidActiveLOSP(uid);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterProcLockedSection();
            return isUidActiveLOSP;
        }

        public List<ProcessMemoryState> getMemoryStateForProcesses() {
            List<ProcessMemoryState> processMemoryStates = new ArrayList<>();
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                int size = ActivityManagerService.this.mPidsSelfLocked.size();
                for (int i = 0; i < size; i++) {
                    ProcessRecord r = ActivityManagerService.this.mPidsSelfLocked.valueAt(i);
                    processMemoryStates.add(new ProcessMemoryState(r.uid, r.getPid(), r.processName, r.mState.getCurAdj(), r.mServices.hasForegroundServices()));
                }
            }
            return processMemoryStates;
        }

        public int handleIncomingUser(int callingPid, int callingUid, int userId, boolean allowAll, int allowMode, String name, String callerPackage) {
            return ActivityManagerService.this.mUserController.handleIncomingUser(callingPid, callingUid, userId, allowAll, allowMode, name, callerPackage);
        }

        public void enforceCallingPermission(String permission, String func) {
            ActivityManagerService.this.enforceCallingPermission(permission, func);
        }

        public int getCurrentUserId() {
            return ActivityManagerService.this.mUserController.getCurrentUserId();
        }

        public boolean isUserRunning(int userId, int flags) {
            return ActivityManagerService.this.mUserController.isUserRunning(userId, flags);
        }

        public void trimApplications() {
            ActivityManagerService.this.trimApplications(true, "updateOomAdj_activityChange");
        }

        public void killProcessesForRemovedTask(ArrayList<Object> procsToKill) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    for (int i = 0; i < procsToKill.size(); i++) {
                        WindowProcessController wpc = (WindowProcessController) procsToKill.get(i);
                        ProcessRecord pr = (ProcessRecord) wpc.mOwner;
                        if (pr.mState.getSetSchedGroup() == 0 && pr.mReceivers.numberOfCurReceivers() == 0) {
                            pr.killLocked("remove task", 10, 22, true);
                        } else {
                            pr.setWaitingToKill("remove task");
                        }
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void killProcess(String processName, int uid, String reason) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ProcessRecord proc = ActivityManagerService.this.getProcessRecordLocked(processName, uid);
                    if (proc != null) {
                        ActivityManagerService.this.mProcessList.removeProcessLocked(proc, false, true, 13, reason);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public boolean hasRunningActivity(final int uid, final String packageName) {
            boolean z;
            if (packageName == null) {
                return false;
            }
            synchronized (ActivityManagerService.this.mProcLock) {
                try {
                    ActivityManagerService.boostPriorityForProcLockedSection();
                    z = ActivityManagerService.this.mProcessList.searchEachLruProcessesLOSP(true, new Function() { // from class: com.android.server.am.ActivityManagerService$LocalService$$ExternalSyntheticLambda0
                        @Override // java.util.function.Function
                        public final Object apply(Object obj) {
                            return ActivityManagerService.LocalService.lambda$hasRunningActivity$0(uid, packageName, (ProcessRecord) obj);
                        }
                    }) != null;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterProcLockedSection();
            return z;
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public static /* synthetic */ Boolean lambda$hasRunningActivity$0(int uid, String packageName, ProcessRecord app) {
            if (app.uid == uid && app.getWindowProcessController().hasRunningActivity(packageName)) {
                return Boolean.TRUE;
            }
            return null;
        }

        public void updateOomAdj() {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.updateOomAdjLocked("updateOomAdj_meh");
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void updateCpuStats() {
            ActivityManagerService.this.updateCpuStats();
        }

        public void updateBatteryStats(ComponentName activity, int uid, int userId, boolean resumed) {
            ActivityManagerService.this.updateBatteryStats(activity, uid, userId, resumed);
        }

        public void updateActivityUsageStats(ComponentName activity, int userId, int event, IBinder appToken, ComponentName taskRoot) {
            ActivityManagerService.this.updateActivityUsageStats(activity, userId, event, appToken, taskRoot);
        }

        public void updateForegroundTimeIfOnBattery(String packageName, int uid, long cpuTimeDiff) {
            ActivityManagerService.this.mBatteryStatsService.updateForegroundTimeIfOnBattery(packageName, uid, cpuTimeDiff);
        }

        public void sendForegroundProfileChanged(int userId) {
            ActivityManagerService.this.mUserController.sendForegroundProfileChanged(userId);
        }

        public boolean shouldConfirmCredentials(int userId) {
            return ActivityManagerService.this.mUserController.shouldConfirmCredentials(userId);
        }

        public void noteAlarmFinish(PendingIntent ps, WorkSource workSource, int sourceUid, String tag) {
            ActivityManagerService.this.noteAlarmFinish(ps != null ? ps.getTarget() : null, workSource, sourceUid, tag);
        }

        public void noteAlarmStart(PendingIntent ps, WorkSource workSource, int sourceUid, String tag) {
            ActivityManagerService.this.noteAlarmStart(ps != null ? ps.getTarget() : null, workSource, sourceUid, tag);
        }

        public void noteWakeupAlarm(PendingIntent ps, WorkSource workSource, int sourceUid, String sourcePkg, String tag) {
            ActivityManagerService.this.noteWakeupAlarm(ps != null ? ps.getTarget() : null, workSource, sourceUid, sourcePkg, tag);
        }

        public boolean isAppStartModeDisabled(int uid, String packageName) {
            return ActivityManagerService.this.isAppStartModeDisabled(uid, packageName);
        }

        public int[] getCurrentProfileIds() {
            return ActivityManagerService.this.mUserController.getCurrentProfileIds();
        }

        public UserInfo getCurrentUser() {
            return ActivityManagerService.this.mUserController.getCurrentUser();
        }

        public void ensureNotSpecialUser(int userId) {
            ActivityManagerService.this.mUserController.ensureNotSpecialUser(userId);
        }

        public boolean isCurrentProfile(int userId) {
            return ActivityManagerService.this.mUserController.isCurrentProfile(userId);
        }

        public boolean hasStartedUserState(int userId) {
            return ActivityManagerService.this.mUserController.hasStartedUserState(userId);
        }

        public void finishUserSwitch(Object uss) {
            ActivityManagerService.this.mUserController.finishUserSwitch((UserState) uss);
        }

        public void scheduleAppGcs() {
            synchronized (ActivityManagerService.this.mAppProfiler.mProfilerLock) {
                ActivityManagerService.this.mAppProfiler.scheduleAppGcsLPf();
            }
        }

        public int getTaskIdForActivity(IBinder token, boolean onlyRoot) {
            return ActivityManagerService.this.getTaskForActivity(token, onlyRoot);
        }

        public ActivityPresentationInfo getActivityPresentationInfo(IBinder token) {
            ActivityClient ac = ActivityClient.getInstance();
            return new ActivityPresentationInfo(ac.getTaskForActivity(token, false), ac.getDisplayId(token), ActivityManagerService.this.mAtmInternal.getActivityName(token));
        }

        public void setBooting(boolean booting) {
            ActivityManagerService.this.mBooting = booting;
        }

        public boolean isBooting() {
            return ActivityManagerService.this.mBooting;
        }

        public void setBooted(boolean booted) {
            ActivityManagerService.this.mBooted = booted;
        }

        public boolean isBooted() {
            return ActivityManagerService.this.mBooted;
        }

        public void finishBooting() {
            ActivityManagerService.this.finishBooting();
        }

        public void tempAllowlistForPendingIntent(int callerPid, int callerUid, int targetUid, long duration, int type, int reasonCode, String reason) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.tempAllowlistForPendingIntentLocked(callerPid, callerUid, targetUid, duration, type, reasonCode, reason);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public int broadcastIntentInPackage(String packageName, String featureId, int uid, int realCallingUid, int realCallingPid, Intent intent, String resolvedType, IIntentReceiver resultTo, int resultCode, String resultData, Bundle resultExtras, String requiredPermission, Bundle bOptions, boolean serialized, boolean sticky, int userId, boolean allowBackgroundActivityStarts, IBinder backgroundActivityStartsToken, int[] broadcastAllowList) {
            int broadcastIntentInPackage;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    broadcastIntentInPackage = ActivityManagerService.this.broadcastIntentInPackage(packageName, featureId, uid, realCallingUid, realCallingPid, intent, resolvedType, resultTo, resultCode, resultData, resultExtras, requiredPermission, bOptions, serialized, sticky, userId, allowBackgroundActivityStarts, backgroundActivityStartsToken, broadcastAllowList);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return broadcastIntentInPackage;
        }

        public int broadcastIntent(Intent intent, IIntentReceiver resultTo, String[] requiredPermissions, boolean serialized, int userId, int[] appIdAllowList, Bundle bOptions) {
            Intent intent2;
            synchronized (ActivityManagerService.this) {
                try {
                    try {
                        ActivityManagerService.boostPriorityForLockedSection();
                        intent2 = intent;
                        try {
                            Intent intent3 = ActivityManagerService.this.verifyBroadcastLocked(intent2);
                            int callingPid = Binder.getCallingPid();
                            int callingUid = Binder.getCallingUid();
                            long origId = Binder.clearCallingIdentity();
                            int broadcastIntentLocked = ActivityManagerService.this.broadcastIntentLocked(null, null, null, intent3, null, resultTo, 0, null, null, requiredPermissions, null, null, -1, bOptions, serialized, false, callingPid, callingUid, callingUid, callingPid, userId, false, null, appIdAllowList);
                            Binder.restoreCallingIdentity(origId);
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            return broadcastIntentLocked;
                        } catch (Throwable th) {
                            th = th;
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        intent2 = intent;
                    }
                } catch (Throwable th3) {
                    th = th3;
                }
            }
        }

        public ComponentName startServiceInPackage(int uid, Intent service, String resolvedType, boolean fgRequired, String callingPackage, String callingFeatureId, int userId, boolean allowBackgroundActivityStarts, IBinder backgroundActivityStartsToken) throws TransactionTooLargeException {
            if (ITranActivityManagerService.Instance().hookPmLimitStartService(uid, callingPackage, service, fgRequired, resolvedType, userId, allowBackgroundActivityStarts)) {
                return null;
            }
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    if (ActivityManagerDebugConfig.DEBUG_SERVICE) {
                        try {
                            try {
                                Slog.v(ActivityManagerService.TAG_SERVICE, "startServiceInPackage: " + service + " type=" + resolvedType);
                            } catch (Throwable th) {
                                th = th;
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th;
                            }
                        } catch (Throwable th2) {
                            th = th2;
                        }
                    }
                    long origId = Binder.clearCallingIdentity();
                    ComponentName res = ActivityManagerService.this.mServices.startServiceLocked(null, service, resolvedType, -1, uid, fgRequired, callingPackage, callingFeatureId, userId, allowBackgroundActivityStarts, backgroundActivityStartsToken);
                    Binder.restoreCallingIdentity(origId);
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return res;
                } catch (Throwable th3) {
                    th = th3;
                }
            }
        }

        public void disconnectActivityFromServices(Object connectionHolder) {
            final ActivityServiceConnectionsHolder holder = (ActivityServiceConnectionsHolder) connectionHolder;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (ActivityManagerService.this.mProcLock) {
                        ActivityManagerService.boostPriorityForProcLockedSection();
                        holder.forEachConnection(new Consumer() { // from class: com.android.server.am.ActivityManagerService$LocalService$$ExternalSyntheticLambda1
                            @Override // java.util.function.Consumer
                            public final void accept(Object obj) {
                                ActivityManagerService.LocalService.this.m1067x6072084f(holder, obj);
                            }
                        });
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        /* renamed from: lambda$disconnectActivityFromServices$1$com-android-server-am-ActivityManagerService$LocalService  reason: not valid java name */
        public /* synthetic */ void m1067x6072084f(ActivityServiceConnectionsHolder holder, Object cr) {
            ActivityManagerService.this.mServices.removeConnectionLocked((ConnectionRecord) cr, null, holder, false);
        }

        public void cleanUpServices(int userId, ComponentName component, Intent baseIntent) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mServices.cleanUpServices(userId, component, baseIntent);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public ActivityInfo getActivityInfoForUser(ActivityInfo aInfo, int userId) {
            return ActivityManagerService.this.getActivityInfoForUser(aInfo, userId);
        }

        public void ensureBootCompleted() {
            ActivityManagerService.this.ensureBootCompleted();
        }

        public void updateOomLevelsForDisplay(int displayId) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    if (ActivityManagerService.this.mWindowManager != null) {
                        ActivityManagerService.this.mProcessList.applyDisplaySize(ActivityManagerService.this.mWindowManager);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public boolean isActivityStartsLoggingEnabled() {
            return ActivityManagerService.this.mConstants.mFlagActivityStartsLoggingEnabled;
        }

        public boolean isBackgroundActivityStartsEnabled() {
            return ActivityManagerService.this.mConstants.mFlagBackgroundActivityStartsEnabled;
        }

        public void reportCurKeyguardUsageEvent(boolean keyguardShowing) {
            int i;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            if (keyguardShowing) {
                i = 17;
            } else {
                i = 18;
            }
            activityManagerService.reportGlobalUsageEvent(i);
        }

        public void monitor() {
            ActivityManagerService.this.monitor();
        }

        public long inputDispatchingTimedOut(int pid, boolean aboveSystem, String reason) {
            return ActivityManagerService.this.inputDispatchingTimedOut(pid, aboveSystem, reason);
        }

        public boolean inputDispatchingTimedOut(Object proc, String activityShortComponentName, ApplicationInfo aInfo, String parentShortComponentName, Object parentProc, boolean aboveSystem, String reason) {
            return ActivityManagerService.this.inputDispatchingTimedOut((ProcessRecord) proc, activityShortComponentName, aInfo, parentShortComponentName, (WindowProcessController) parentProc, aboveSystem, reason);
        }

        public void inputDispatchingResumed(int pid) {
            ProcessRecord proc;
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                proc = ActivityManagerService.this.mPidsSelfLocked.get(pid);
            }
            if (proc != null) {
                ActivityManagerService.this.mAppErrors.handleDismissAnrDialogs(proc);
            }
        }

        public void rescheduleAnrDialog(Object data) {
            Message msg = Message.obtain();
            msg.what = 2;
            msg.obj = (AppNotRespondingDialog.Data) data;
            ActivityManagerService.this.mUiHandler.sendMessageDelayed(msg, InputConstants.DEFAULT_DISPATCHING_TIMEOUT_MILLIS);
        }

        public void broadcastGlobalConfigurationChanged(int changes, boolean initLocale) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    Intent intent = new Intent("android.intent.action.CONFIGURATION_CHANGED");
                    intent.addFlags(1881145344);
                    ActivityManagerService.this.broadcastIntentLocked(null, null, null, intent, null, null, 0, null, null, null, null, null, -1, null, false, false, ActivityManagerService.MY_PID, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    if ((changes & 4) != 0) {
                        Intent intent2 = new Intent("android.intent.action.LOCALE_CHANGED");
                        intent2.addFlags(18876416);
                        if (initLocale || !ActivityManagerService.this.mProcessesReady) {
                            intent2.addFlags(1073741824);
                        }
                        BroadcastOptions bOptions = BroadcastOptions.makeBasic();
                        bOptions.setTemporaryAppAllowlist(ActivityManagerService.this.mInternal.getBootTimeTempAllowListDuration(), 0, 206, "");
                        ActivityManagerService.this.broadcastIntentLocked(null, null, null, intent2, null, null, 0, null, null, null, null, null, -1, bOptions.toBundle(), false, false, ActivityManagerService.MY_PID, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    }
                    if (!initLocale && isSplitConfigurationChange(changes)) {
                        Intent intent3 = new Intent("android.intent.action.SPLIT_CONFIGURATION_CHANGED");
                        intent3.addFlags(AudioFormat.APTX_HD);
                        String[] permissions = {"android.permission.INSTALL_PACKAGES"};
                        ActivityManagerService.this.broadcastIntentLocked(null, null, null, intent3, null, null, 0, null, null, permissions, null, null, -1, null, false, false, ActivityManagerService.MY_PID, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        private boolean isSplitConfigurationChange(int configDiff) {
            return (configDiff & PhoneWindowManager.TOAST_WINDOW_TIMEOUT) != 0;
        }

        public void broadcastCloseSystemDialogs(String reason) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    Intent intent = new Intent("android.intent.action.CLOSE_SYSTEM_DIALOGS");
                    intent.addFlags(1342177280);
                    if (reason != null) {
                        intent.putExtra(PhoneWindowManager.SYSTEM_DIALOG_REASON_KEY, reason);
                    }
                    ActivityManagerService.this.broadcastIntentLocked(null, null, null, intent, null, null, 0, null, null, null, null, null, -1, null, false, false, -1, 1000, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void killAllBackgroundProcessesExcept(int minTargetSdk, int maxProcState) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.killAllBackgroundProcessesExcept(minTargetSdk, maxProcState);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void startProcess(String processName, ApplicationInfo info, boolean knownToBeDead, boolean isTop, String hostingType, ComponentName hostingName) {
            try {
                if (Trace.isTagEnabled(64L)) {
                    try {
                        Trace.traceBegin(64L, "startProcess:" + processName);
                    } catch (Throwable th) {
                        th = th;
                        Trace.traceEnd(64L);
                        throw th;
                    }
                }
                try {
                    try {
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                ActivityManagerService.this.startProcessLocked(processName, info, knownToBeDead, 0, new HostingRecord(hostingType, hostingName, isTop), 1, false, false);
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                Trace.traceEnd(64L);
                            } catch (Throwable th2) {
                                th = th2;
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        Trace.traceEnd(64L);
                        throw th;
                    }
                } catch (Throwable th4) {
                    th = th4;
                }
            } catch (Throwable th5) {
                th = th5;
            }
        }

        public void startProcess(String processName, ApplicationInfo info, boolean knownToBeDead, boolean isTop, String hostingType, ComponentName hostingName, boolean isPreload) {
            try {
                if (Trace.isTagEnabled(64L)) {
                    try {
                        Trace.traceBegin(64L, "startProcess:" + processName);
                    } catch (Throwable th) {
                        th = th;
                        Trace.traceEnd(64L);
                        throw th;
                    }
                }
                try {
                    try {
                        synchronized (ActivityManagerService.this) {
                            try {
                                ActivityManagerService.boostPriorityForLockedSection();
                                ProcessRecord app = ActivityManagerService.this.startProcessLocked(processName, info, knownToBeDead, 0, new HostingRecord(hostingType, hostingName, isTop), 1, false, false);
                                Slog.w(ActivityManagerService.TAG, "startProcessLocked, app = " + app);
                                if (app != null && isPreload) {
                                    app.preloadState = 2;
                                    if (ITranActivityManagerService.Instance().isAppLaunchEnable()) {
                                        WindowProcessController wpCtl = app.getWindowProcessController();
                                        if (ITranActivityManagerService.Instance().isAppLaunchDebugEnable()) {
                                            Slog.d(ActivityManagerService.TAG, "AppLaunchTracker wpc is null:" + (wpCtl == null));
                                        }
                                        if (wpCtl != null) {
                                            wpCtl.setPreloadProcType();
                                        }
                                    }
                                    if (ITranActivityManagerService.Instance().isAgaresEnable()) {
                                        WindowProcessController wpc = app.getWindowProcessController();
                                        if (wpc != null) {
                                            wpc.setAgaresProcess(true);
                                        }
                                    } else {
                                        Slog.w(ActivityManagerService.TAG, "failed to start process");
                                    }
                                }
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                Trace.traceEnd(64L);
                            } catch (Throwable th2) {
                                th = th2;
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                    } catch (Throwable th3) {
                        th = th3;
                        Trace.traceEnd(64L);
                        throw th;
                    }
                } catch (Throwable th4) {
                    th = th4;
                }
            } catch (Throwable th5) {
                th = th5;
            }
        }

        public void adjustProcessesPreloadState(String processName) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    int NP = ActivityManagerService.this.mProcessList.getProcessNamesLOSP().getMap().size();
                    for (int ip = 0; ip < NP; ip++) {
                        SparseArray<ProcessRecord> apps = (SparseArray) ActivityManagerService.this.mProcessList.getProcessNamesLOSP().getMap().valueAt(ip);
                        int NA = apps.size();
                        for (int ia = 0; ia < NA; ia++) {
                            ProcessRecord app = apps.valueAt(ia);
                            if (processName != null && processName.equals(app.processName)) {
                                app.preloadState = 0;
                            } else if (app.preloadState == 2) {
                                app.preloadState = 1;
                            }
                        }
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void setDebugFlagsForStartingActivity(ActivityInfo aInfo, int startFlags, ProfilerInfo profilerInfo, Object wmLock) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (wmLock) {
                        if ((startFlags & 2) != 0) {
                            ActivityManagerService.this.setDebugApp(aInfo.processName, true, false);
                        }
                        if ((startFlags & 8) != 0) {
                            ActivityManagerService.this.setNativeDebuggingAppLocked(aInfo.applicationInfo, aInfo.processName);
                        }
                        if ((startFlags & 4) != 0) {
                            ActivityManagerService.this.setTrackAllocationApp(aInfo.applicationInfo, aInfo.processName);
                        }
                        if (profilerInfo != null) {
                            ActivityManagerService.this.setProfileApp(aInfo.applicationInfo, aInfo.processName, profilerInfo, null);
                        }
                        wmLock.notify();
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public int getStorageMountMode(int pid, int uid) {
            int mountMode;
            if (uid == 2000 || uid == 0) {
                return 1;
            }
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                ProcessRecord pr = ActivityManagerService.this.mPidsSelfLocked.get(pid);
                mountMode = pr == null ? 0 : pr.getMountMode();
            }
            return mountMode;
        }

        public boolean isAppForeground(int uid) {
            return ActivityManagerService.this.isAppForeground(uid);
        }

        public boolean isAppBad(String processName, int uid) {
            return ActivityManagerService.this.isAppBad(processName, uid);
        }

        public void clearPendingBackup(int userId) {
            ActivityManagerService.this.clearPendingBackup(userId);
        }

        public void prepareForPossibleShutdown() {
            ActivityManagerService.this.prepareForPossibleShutdown();
        }

        public boolean hasRunningForegroundService(final int uid, final int foregroundServicetype) {
            boolean z;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    z = true;
                    if (ActivityManagerService.this.mProcessList.searchEachLruProcessesLOSP(true, new Function() { // from class: com.android.server.am.ActivityManagerService$LocalService$$ExternalSyntheticLambda2
                        @Override // java.util.function.Function
                        public final Object apply(Object obj) {
                            return ActivityManagerService.LocalService.lambda$hasRunningForegroundService$2(uid, foregroundServicetype, (ProcessRecord) obj);
                        }
                    }) == null) {
                        z = false;
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return z;
        }

        /* JADX INFO: Access modifiers changed from: package-private */
        public static /* synthetic */ Boolean lambda$hasRunningForegroundService$2(int uid, int foregroundServicetype, ProcessRecord app) {
            if (app.uid == uid && (app.mServices.getForegroundServiceTypes() & foregroundServicetype) != 0) {
                return Boolean.TRUE;
            }
            return null;
        }

        public boolean hasForegroundServiceNotification(String pkg, int userId, String channelId) {
            boolean hasForegroundServiceNotificationLocked;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    hasForegroundServiceNotificationLocked = ActivityManagerService.this.mServices.hasForegroundServiceNotificationLocked(pkg, userId, channelId);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return hasForegroundServiceNotificationLocked;
        }

        public ActivityManagerInternal.ServiceNotificationPolicy applyForegroundServiceNotification(Notification notification, String tag, int id, String pkg, int userId) {
            ActivityManagerInternal.ServiceNotificationPolicy applyForegroundServiceNotificationLocked;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    applyForegroundServiceNotificationLocked = ActivityManagerService.this.mServices.applyForegroundServiceNotificationLocked(notification, tag, id, pkg, userId);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return applyForegroundServiceNotificationLocked;
        }

        public void onForegroundServiceNotificationUpdate(boolean shown, Notification notification, int id, String pkg, int userId) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mServices.onForegroundServiceNotificationUpdateLocked(shown, notification, id, pkg, userId);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void stopAppForUser(String pkg, int userId) {
            ActivityManagerService.this.stopAppForUserInternal(pkg, userId);
        }

        public void stopForegroundServicesForChannel(String pkg, int userId, String channelId) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mServices.stopForegroundServicesForChannelLocked(pkg, userId, channelId);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void registerProcessObserver(IProcessObserver processObserver) {
            ActivityManagerService.this.registerProcessObserver(processObserver);
        }

        public void unregisterProcessObserver(IProcessObserver processObserver) {
            ActivityManagerService.this.unregisterProcessObserver(processObserver);
        }

        public int getInstrumentationSourceUid(int uid) {
            synchronized (ActivityManagerService.this.mProcLock) {
                try {
                    ActivityManagerService.boostPriorityForProcLockedSection();
                    for (int i = ActivityManagerService.this.mActiveInstrumentation.size() - 1; i >= 0; i--) {
                        ActiveInstrumentation activeInst = ActivityManagerService.this.mActiveInstrumentation.get(i);
                        if (!activeInst.mFinished && activeInst.mTargetInfo != null && activeInst.mTargetInfo.uid == uid) {
                            int i2 = activeInst.mSourceUid;
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                            return i2;
                        }
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return -1;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
        }

        public void setDeviceOwnerUid(int uid) {
            ActivityManagerService.this.mDeviceOwnerUid = uid;
        }

        public boolean isDeviceOwner(int uid) {
            int cachedUid = ActivityManagerService.this.mDeviceOwnerUid;
            return uid >= 0 && cachedUid == uid;
        }

        public void setProfileOwnerUid(ArraySet<Integer> profileOwnerUids) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mProfileOwnerUids = profileOwnerUids;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public boolean isProfileOwner(int uid) {
            boolean z;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    z = ActivityManagerService.this.mProfileOwnerUids != null && ActivityManagerService.this.mProfileOwnerUids.indexOf(Integer.valueOf(uid)) >= 0;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return z;
        }

        public void setCompanionAppUids(int userId, Set<Integer> companionAppUids) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mCompanionAppUidsMap.put(Integer.valueOf(userId), companionAppUids);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public boolean isAssociatedCompanionApp(int userId, int uid) {
            Set<Integer> allUids = (Set) ActivityManagerService.this.mCompanionAppUidsMap.get(Integer.valueOf(userId));
            if (allUids == null) {
                return false;
            }
            return allUids.contains(Integer.valueOf(uid));
        }

        public void addPendingTopUid(int uid, int pid, IApplicationThread thread) {
            boolean isNewPending = ActivityManagerService.this.mPendingStartActivityUids.add(uid, pid);
            if (isNewPending && ActivityManagerService.this.mOomAdjuster != null) {
                ActivityManagerService.this.mOomAdjuster.mCachedAppOptimizer.unfreezeProcess(pid);
            }
            if (isNewPending && ActivityManagerService.this.mNetworkPolicyUidObserver != null) {
                try {
                    long procStateSeq = ActivityManagerService.this.mProcessList.getNextProcStateSeq();
                    ActivityManagerService.this.mNetworkPolicyUidObserver.onUidStateChanged(uid, 2, procStateSeq, 15);
                    if (thread != null && shouldWaitForNetworkRulesUpdate(uid)) {
                        thread.setNetworkBlockSeq(procStateSeq);
                    }
                } catch (RemoteException e) {
                    Slog.d(ActivityManagerService.TAG, "Error calling setNetworkBlockSeq", e);
                }
            }
        }

        private boolean shouldWaitForNetworkRulesUpdate(int uid) {
            boolean z;
            synchronized (ActivityManagerService.this.mUidNetworkBlockedReasons) {
                z = false;
                int uidBlockedReasons = ActivityManagerService.this.mUidNetworkBlockedReasons.get(uid, 0);
                if (uidBlockedReasons != 0 && NetworkPolicyManagerInternal.updateBlockedReasonsWithProcState(uidBlockedReasons, 2) == 0) {
                    z = true;
                }
            }
            return z;
        }

        public void deletePendingTopUid(int uid, long nowElapsed) {
            ActivityManagerService.this.mPendingStartActivityUids.delete(uid, nowElapsed);
        }

        public boolean isPendingTopUid(int uid) {
            return ActivityManagerService.this.mPendingStartActivityUids.isPendingTopUid(uid);
        }

        public Intent getIntentForIntentSender(IIntentSender sender) {
            return ActivityManagerService.this.getIntentForIntentSender(sender);
        }

        public PendingIntent getPendingIntentActivityAsApp(int requestCode, Intent intent, int flags, Bundle options, String ownerPkg, int ownerUid) {
            return getPendingIntentActivityAsApp(requestCode, new Intent[]{intent}, flags, options, ownerPkg, ownerUid);
        }

        public PendingIntent getPendingIntentActivityAsApp(int requestCode, Intent[] intents, int flags, Bundle options, String ownerPkg, int ownerUid) {
            boolean flagImmutableSet = (flags & 67108864) != 0;
            boolean flagMutableSet = (flags & 33554432) != 0;
            if (flagImmutableSet == flagMutableSet) {
                throw new IllegalArgumentException("Must set exactly one of FLAG_IMMUTABLE or FLAG_MUTABLE");
            }
            Context context = ActivityManagerService.this.mContext;
            ContentResolver resolver = context.getContentResolver();
            int len = intents.length;
            String[] resolvedTypes = new String[len];
            for (int i = 0; i < len; i++) {
                Intent intent = intents[i];
                resolvedTypes[i] = intent.resolveTypeIfNeeded(resolver);
                intent.migrateExtraStreamToClipData(context);
                intent.prepareToLeaveProcess(context);
            }
            IIntentSender target = ActivityManagerService.this.getIntentSenderWithFeatureAsApp(2, ownerPkg, context.getAttributionTag(), null, null, requestCode, intents, resolvedTypes, flags, options, UserHandle.getUserId(ownerUid), ownerUid);
            if (target != null) {
                return new PendingIntent(target);
            }
            return null;
        }

        public long getBootTimeTempAllowListDuration() {
            return ActivityManagerService.this.mConstants.mBootTimeTempAllowlistDuration;
        }

        public void registerAnrController(AnrController controller) {
            ActivityManagerService.this.mActivityTaskManager.registerAnrController(controller);
        }

        public void unregisterAnrController(AnrController controller) {
            ActivityManagerService.this.mActivityTaskManager.unregisterAnrController(controller);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean canStartForegroundService(int pid, int uid, String packageName) {
            boolean canStartForegroundServiceLocked;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    canStartForegroundServiceLocked = ActivityManagerService.this.mServices.canStartForegroundServiceLocked(pid, uid, packageName);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return canStartForegroundServiceLocked;
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public void tempAllowWhileInUsePermissionInFgs(int uid, long durationMs) {
            ActivityManagerService.this.mFgsWhileInUseTempAllowList.add(uid, durationMs, "");
        }

        public boolean isTempAllowlistedForFgsWhileInUse(int uid) {
            return ActivityManagerService.this.mFgsWhileInUseTempAllowList.isAllowed(uid);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public boolean canAllowWhileInUsePermissionInFgs(int pid, int uid, String packageName) {
            boolean canAllowWhileInUsePermissionInFgsLocked;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    canAllowWhileInUsePermissionInFgsLocked = ActivityManagerService.this.mServices.canAllowWhileInUsePermissionInFgsLocked(pid, uid, packageName);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return canAllowWhileInUsePermissionInFgsLocked;
        }

        public int getPushMessagingOverQuotaBehavior() {
            int i;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    i = ActivityManagerService.this.mConstants.mPushMessagingOverQuotaBehavior;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return i;
        }

        public int getServiceStartForegroundTimeout() {
            return ActivityManagerService.this.mConstants.mServiceStartForegroundTimeoutMs;
        }

        public int getUidCapability(int uid) {
            int curCapability;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    UidRecord uidRecord = ActivityManagerService.this.mProcessList.getUidRecordLOSP(uid);
                    if (uidRecord == null) {
                        throw new IllegalArgumentException("uid record for " + uid + " not found");
                    }
                    curCapability = uidRecord.getCurCapability();
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return curCapability;
        }

        public List<Integer> getIsolatedProcesses(int uid) {
            List<Integer> isolatedProcessesLocked;
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    isolatedProcessesLocked = ActivityManagerService.this.mProcessList.getIsolatedProcessesLocked(uid);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return isolatedProcessesLocked;
        }

        public int sendIntentSender(IIntentSender target, IBinder allowlistToken, int code, Intent intent, String resolvedType, IIntentReceiver finishedReceiver, String requiredPermission, Bundle options) {
            return ActivityManagerService.this.sendIntentSender(target, allowlistToken, code, intent, resolvedType, finishedReceiver, requiredPermission, options);
        }

        public void setVoiceInteractionManagerProvider(ActivityManagerInternal.VoiceInteractionManagerProvider provider) {
            ActivityManagerService.this.setVoiceInteractionManagerProvider(provider);
        }

        public void setStopUserOnSwitch(int value) {
            ActivityManagerService.this.setStopUserOnSwitch(value);
        }

        public int getRestrictionLevel(int uid) {
            return ActivityManagerService.this.mAppRestrictionController.getRestrictionLevel(uid);
        }

        public int getRestrictionLevel(String pkg, int userId) {
            return ActivityManagerService.this.mAppRestrictionController.getRestrictionLevel(pkg, userId);
        }

        public boolean isBgAutoRestrictedBucketFeatureFlagEnabled() {
            return ActivityManagerService.this.mAppRestrictionController.isBgAutoRestrictedBucketFeatureFlagEnabled();
        }

        public void addAppBackgroundRestrictionListener(ActivityManagerInternal.AppBackgroundRestrictionListener listener) {
            ActivityManagerService.this.mAppRestrictionController.addAppBackgroundRestrictionListener(listener);
        }

        public void addForegroundServiceStateListener(ActivityManagerInternal.ForegroundServiceStateListener listener) {
            synchronized (ActivityManagerService.this) {
                try {
                    ActivityManagerService.boostPriorityForLockedSection();
                    ActivityManagerService.this.mForegroundServiceStateListeners.add(listener);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public void addBroadcastEventListener(ActivityManagerInternal.BroadcastEventListener listener) {
            ActivityManagerService.this.mBroadcastEventListeners.add(listener);
        }

        public void addBindServiceEventListener(ActivityManagerInternal.BindServiceEventListener listener) {
            ActivityManagerService.this.mBindServiceEventListeners.add(listener);
        }

        public void restart() {
            ActivityManagerService.this.restart();
        }

        public void registerNetworkPolicyUidObserver(IUidObserver observer, int which, int cutpoint, String callingPackage) {
            ActivityManagerService.this.mNetworkPolicyUidObserver = observer;
            ActivityManagerService.this.mUidObserverController.register(observer, which, cutpoint, callingPackage, Binder.getCallingUid());
        }

        public boolean isCurrentScreenAwake() {
            return ActivityManagerService.this.mWakefulness.get() == 1;
        }
    }

    long inputDispatchingTimedOut(int pid, boolean aboveSystem, String reason) {
        ProcessRecord proc;
        if (checkCallingPermission("android.permission.FILTER_EVENTS") != 0) {
            throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
        }
        synchronized (this.mPidsSelfLocked) {
            proc = this.mPidsSelfLocked.get(pid);
        }
        long timeoutMillis = proc != null ? proc.getInputDispatchingTimeoutMillis() : InputConstants.DEFAULT_DISPATCHING_TIMEOUT_MILLIS;
        if (inputDispatchingTimedOut(proc, null, null, null, null, aboveSystem, reason)) {
            return 0L;
        }
        return timeoutMillis;
    }

    boolean inputDispatchingTimedOut(ProcessRecord proc, String activityShortComponentName, ApplicationInfo aInfo, String parentShortComponentName, WindowProcessController parentProcess, boolean aboveSystem, String reason) {
        String annotation;
        if (checkCallingPermission("android.permission.FILTER_EVENTS") != 0) {
            throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
        }
        if (reason == null) {
            annotation = "Input dispatching timed out";
        } else {
            annotation = "Input dispatching timed out (" + reason + ")";
        }
        if (proc != null) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    if (proc.isDebugging()) {
                        resetPriorityAfterLockedSection();
                        return false;
                    } else if (this.mAnrManager.isAnrDeferrable()) {
                        resetPriorityAfterLockedSection();
                        return false;
                    } else if (proc.getActiveInstrumentation() != null) {
                        Bundle info = new Bundle();
                        info.putString("shortMsg", "keyDispatchingTimedOut");
                        info.putString("longMsg", annotation);
                        finishInstrumentationLocked(proc, 0, info);
                        resetPriorityAfterLockedSection();
                        return true;
                    } else {
                        resetPriorityAfterLockedSection();
                        this.mAnrHelper.appNotResponding(proc, activityShortComponentName, aInfo, parentShortComponentName, parentProcess, aboveSystem, annotation);
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        return true;
    }

    public void waitForNetworkStateUpdate(long procStateSeq) {
        int callingUid = Binder.getCallingUid();
        if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
            Slog.d(TAG_NETWORK, "Called from " + callingUid + " to wait for seq: " + procStateSeq);
        }
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                UidRecord record = this.mProcessList.getUidRecordLOSP(callingUid);
                if (record == null) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                resetPriorityAfterProcLockedSection();
                synchronized (record.networkStateLock) {
                    if (record.lastNetworkUpdatedProcStateSeq >= procStateSeq) {
                        if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                            Slog.d(TAG_NETWORK, "Network rules have been already updated for seq no. " + procStateSeq + ", so no need to wait. Uid: " + callingUid + ", lastProcStateSeqWithUpdatedNetworkState: " + record.lastNetworkUpdatedProcStateSeq);
                        }
                        return;
                    }
                    try {
                        if (ActivityManagerDebugConfig.DEBUG_NETWORK) {
                            Slog.d(TAG_NETWORK, "Starting to wait for the network rules update. Uid: " + callingUid + " procStateSeq: " + procStateSeq);
                        }
                        long startTime = SystemClock.uptimeMillis();
                        record.procStateSeqWaitingForNetwork = procStateSeq;
                        record.networkStateLock.wait(this.mConstants.mNetworkAccessTimeoutMs);
                        record.procStateSeqWaitingForNetwork = 0L;
                        long totalTime = SystemClock.uptimeMillis() - startTime;
                        if (totalTime >= this.mConstants.mNetworkAccessTimeoutMs || ActivityManagerDebugConfig.DEBUG_NETWORK) {
                            Slog.w(TAG_NETWORK, "Total time waited for network rules to get updated: " + totalTime + ". Uid: " + callingUid + " procStateSeq: " + procStateSeq + " UidRec: " + record + " validateUidRec: " + this.mUidObserverController.getValidateUidRecord(callingUid));
                        }
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public void waitForBroadcastIdle() {
        waitForBroadcastIdle(null);
    }

    public void waitForBroadcastIdle(PrintWriter pw) {
        BroadcastQueue[] broadcastQueueArr;
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastIdle()");
        while (true) {
            boolean idle = true;
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    for (BroadcastQueue queue : this.mBroadcastQueues) {
                        if (!queue.isIdle()) {
                            String msg = "Waiting for queue " + queue + " to become idle...";
                            if (pw != null) {
                                pw.println(msg);
                                pw.println(queue.describeState());
                                pw.flush();
                            }
                            Slog.v(TAG, msg);
                            queue.cancelDeferrals();
                            idle = false;
                        }
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            if (idle) {
                break;
            }
            SystemClock.sleep(1000L);
        }
        if (pw != null) {
            pw.println("All broadcast queues are idle!");
            pw.flush();
        }
        Slog.v(TAG, "All broadcast queues are idle!");
    }

    public int getBackgroundRestrictionExemptionReason(int uid) {
        enforceCallingPermission("android.permission.DEVICE_POWER", "getBackgroundRestrictionExemptionReason()");
        return this.mAppRestrictionController.getBackgroundRestrictionExemptionReason(uid);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void refreshSettingsCache() {
        this.mCoreSettingsObserver.onChange(true);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void resetDropboxRateLimiter() {
        this.mDropboxRateLimiter.reset();
        BootReceiver.resetDropboxRateLimiter();
    }

    public void killPackageDependents(String packageName, int userId) {
        enforceCallingPermission("android.permission.KILL_UID", "killPackageDependents()");
        if (packageName == null) {
            throw new NullPointerException("Cannot kill the dependents of a package without its name.");
        }
        long callingId = Binder.clearCallingIdentity();
        IPackageManager pm = AppGlobals.getPackageManager();
        int pkgUid = -1;
        try {
            pkgUid = pm.getPackageUid(packageName, 268435456L, userId);
        } catch (RemoteException e) {
        }
        if (userId != -1 && pkgUid == -1) {
            throw new IllegalArgumentException("Cannot kill dependents of non-existing package " + packageName);
        }
        try {
            synchronized (this) {
                boostPriorityForLockedSection();
                synchronized (this.mProcLock) {
                    try {
                        boostPriorityForProcLockedSection();
                        this.mProcessList.killPackageProcessesLSP(packageName, UserHandle.getAppId(pkgUid), userId, 0, 12, 0, "dep: " + packageName);
                    } catch (Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(callingId);
        }
    }

    public int restartUserInBackground(int userId) {
        return this.mUserController.restartUser(userId, false);
    }

    public void scheduleApplicationInfoChanged(List<String> packageNames, int userId) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "scheduleApplicationInfoChanged()");
        long origId = Binder.clearCallingIdentity();
        try {
            boolean updateFrameworkRes = packageNames.contains(PackageManagerService.PLATFORM_PACKAGE_NAME);
            synchronized (this.mProcLock) {
                boostPriorityForProcLockedSection();
                updateApplicationInfoLOSP(packageNames, updateFrameworkRes, userId);
            }
            resetPriorityAfterProcLockedSection();
            AppWidgetManagerInternal widgets = (AppWidgetManagerInternal) LocalServices.getService(AppWidgetManagerInternal.class);
            if (widgets != null) {
                widgets.applyResourceOverlaysToWidgets(new HashSet(packageNames), userId, updateFrameworkRes);
            }
        } finally {
            Binder.restoreCallingIdentity(origId);
        }
    }

    public void updateSystemUiContext() {
        PackageManagerInternal packageManagerInternal = getPackageManagerInternal();
        ApplicationInfo ai = packageManagerInternal.getApplicationInfo(PackageManagerService.PLATFORM_PACKAGE_NAME, GadgetFunction.NCM, Binder.getCallingUid(), 0);
        ActivityThread.currentActivityThread().handleSystemApplicationInfoChanged(ai);
    }

    private void updateApplicationInfoLOSP(List<String> packagesToUpdate, boolean updateFrameworkRes, int userId) {
        if (updateFrameworkRes) {
            ParsingPackageUtils.readConfigUseRoundIcon(null);
        }
        this.mProcessList.updateApplicationInfoLOSP(packagesToUpdate, userId, updateFrameworkRes);
        if (updateFrameworkRes) {
            Executor executor = ActivityThread.currentActivityThread().getExecutor();
            final DisplayManagerInternal display = (DisplayManagerInternal) LocalServices.getService(DisplayManagerInternal.class);
            if (display != null) {
                Objects.requireNonNull(display);
                executor.execute(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda11
                    @Override // java.lang.Runnable
                    public final void run() {
                        display.onOverlayChanged();
                    }
                });
            }
            WindowManagerService windowManagerService = this.mWindowManager;
            if (windowManagerService != null) {
                Objects.requireNonNull(windowManagerService);
                executor.execute(new ActivityManagerService$$ExternalSyntheticLambda12(windowManagerService));
                return;
            }
            this.mNotifyOverlayChangedWhenWmsSet = true;
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void scheduleUpdateBinderHeavyHitterWatcherConfig() {
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda34
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.m1059x8ca102a9();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$32$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1059x8ca102a9() {
        boolean enabled;
        int batchSize;
        float threshold;
        BinderCallHeavyHitterWatcher.BinderCallHeavyHitterListener listener;
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                if (ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_ENABLED) {
                    this.mHandler.removeMessages(72);
                    enabled = true;
                    batchSize = ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_BATCHSIZE;
                    threshold = ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_THRESHOLD;
                    listener = new BinderCallHeavyHitterWatcher.BinderCallHeavyHitterListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda9
                        public final void onHeavyHit(List list, int i, float f, long j) {
                            ActivityManagerService.this.m1056x296bbbc1(list, i, f, j);
                        }
                    };
                } else if (this.mHandler.hasMessages(72)) {
                    enabled = ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_ENABLED;
                    batchSize = ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_BATCHSIZE;
                    threshold = ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_THRESHOLD;
                    listener = new BinderCallHeavyHitterWatcher.BinderCallHeavyHitterListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda10
                        public final void onHeavyHit(List list, int i, float f, long j) {
                            ActivityManagerService.this.m1058xd329750a(list, i, f, j);
                        }
                    };
                } else {
                    enabled = false;
                    batchSize = 0;
                    threshold = 0.0f;
                    listener = null;
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        Binder.setHeavyHitterWatcherConfig(enabled, batchSize, threshold, listener);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$29$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1056x296bbbc1(final List a, final int b, final float c, final long d) {
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda22
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.m1055x6ff42e22(a, b, c, d);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$scheduleUpdateBinderHeavyHitterWatcherConfig$31$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1058xd329750a(final List a, final int b, final float c, final long d) {
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda27
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.m1057x19b1e76b(a, b, c, d);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public void scheduleBinderHeavyHitterAutoSampler() {
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda38
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.m1053xa048d8();
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$scheduleBinderHeavyHitterAutoSampler$35$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1053xa048d8() {
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                if (!ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_ENABLED) {
                    resetPriorityAfterProcLockedSection();
                } else if (ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_ENABLED) {
                    resetPriorityAfterProcLockedSection();
                } else {
                    long now = SystemClock.uptimeMillis();
                    if (this.mLastBinderHeavyHitterAutoSamplerStart + 3600000 > now) {
                        resetPriorityAfterProcLockedSection();
                        return;
                    }
                    int batchSize = ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_BATCHSIZE;
                    float threshold = ActivityManagerConstants.BINDER_HEAVY_HITTER_AUTO_SAMPLER_THRESHOLD;
                    resetPriorityAfterProcLockedSection();
                    this.mLastBinderHeavyHitterAutoSamplerStart = now;
                    Binder.setHeavyHitterWatcherConfig(true, batchSize, threshold, new BinderCallHeavyHitterWatcher.BinderCallHeavyHitterListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda15
                        public final void onHeavyHit(List list, int i, float f, long j) {
                            ActivityManagerService.this.m1052x4728bb39(list, i, f, j);
                        }
                    });
                    MainHandler mainHandler = this.mHandler;
                    mainHandler.sendMessageDelayed(mainHandler.obtainMessage(72), 300000L);
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    /* renamed from: lambda$scheduleBinderHeavyHitterAutoSampler$34$com-android-server-am-ActivityManagerService  reason: not valid java name */
    public /* synthetic */ void m1052x4728bb39(final List a, final int b, final float c, final long d) {
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda24
            @Override // java.lang.Runnable
            public final void run() {
                ActivityManagerService.this.m1051x8db12d9a(a, b, c, d);
            }
        });
    }

    /* JADX INFO: Access modifiers changed from: private */
    public void handleBinderHeavyHitterAutoSamplerTimeOut() {
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                if (ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_ENABLED) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                resetPriorityAfterProcLockedSection();
                Binder.setHeavyHitterWatcherConfig(false, 0, 0.0f, null);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX DEBUG: Method merged with bridge method */
    /* JADX INFO: Access modifiers changed from: private */
    /* renamed from: handleBinderHeavyHitters */
    public void m1057x19b1e76b(List<BinderCallHeavyHitterWatcher.HeavyHitterContainer> hitters, int totalBinderCalls, float threshold, long timeSpan) {
        int size = hitters.size();
        if (size == 0) {
            return;
        }
        BinderTransactionNameResolver resolver = new BinderTransactionNameResolver();
        StringBuilder sb = new StringBuilder("Excessive incoming binder calls(>").append(String.format("%.1f%%", Float.valueOf(threshold * 100.0f))).append(',').append(totalBinderCalls).append(',').append(timeSpan).append("ms): ");
        for (int i = 0; i < size; i++) {
            if (i > 0) {
                sb.append(", ");
            }
            BinderCallHeavyHitterWatcher.HeavyHitterContainer container = hitters.get(i);
            sb.append('[').append(container.mUid).append(',').append(container.mClass.getName()).append(',').append(resolver.getMethodName(container.mClass, container.mCode)).append(',').append(container.mCode).append(',').append(String.format("%.1f%%", Float.valueOf(container.mFrequency * 100.0f))).append(']');
        }
        Slog.w(TAG, sb.toString());
    }

    public void attachAgent(String process, String path) {
        IApplicationThread thread;
        try {
            synchronized (this.mProcLock) {
                boostPriorityForProcLockedSection();
                ProcessRecord proc = findProcessLOSP(process, 0, "attachAgent");
                if (proc == null || (thread = proc.getThread()) == null) {
                    throw new IllegalArgumentException("Unknown process: " + process);
                }
                enforceDebuggable(proc);
                thread.attachAgent(path);
            }
            resetPriorityAfterProcLockedSection();
        } catch (RemoteException e) {
            throw new IllegalStateException("Process disappeared");
        }
    }

    public void prepareForPossibleShutdown() {
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.prepareForPossibleShutdown();
        }
    }

    /* loaded from: classes.dex */
    public static class Injector {
        private Context mContext;
        private NetworkManagementInternal mNmi;

        public Injector(Context context) {
            this.mContext = context;
        }

        public Context getContext() {
            return this.mContext;
        }

        public AppOpsService getAppOpsService(File file, Handler handler) {
            return new AppOpsService(file, handler, getContext());
        }

        public Handler getUiHandler(ActivityManagerService service) {
            Objects.requireNonNull(service);
            return new UiHandler();
        }

        public boolean isNetworkRestrictedForUid(int uid) {
            if (ensureHasNetworkManagementInternal()) {
                return this.mNmi.isNetworkRestrictedForUid(uid);
            }
            return false;
        }

        public ProcessList getProcessList(ActivityManagerService service) {
            return new ProcessList();
        }

        private boolean ensureHasNetworkManagementInternal() {
            if (this.mNmi == null) {
                this.mNmi = (NetworkManagementInternal) LocalServices.getService(NetworkManagementInternal.class);
            }
            return this.mNmi != null;
        }
    }

    private void spdPrint(PrintWriter pw, String cmd) {
        if ("audio".equals(cmd)) {
            AudioManager audioManager = (AudioManager) this.mContext.getSystemService("audio");
            String temp = audioManager.getCurrentAudioFocusPackageName();
            pw.println(" audio is focused: " + temp);
        }
    }

    public void startDelegateShellPermissionIdentity(int delegateUid, String[] permissions) {
        if (UserHandle.getCallingAppId() != 2000 && UserHandle.getCallingAppId() != 0) {
            throw new SecurityException("Only the shell can delegate its permissions");
        }
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                if (this.mAppOpsService.getAppOpsServiceDelegate() != null) {
                    if (!(this.mAppOpsService.getAppOpsServiceDelegate() instanceof ShellDelegate)) {
                        throw new IllegalStateException("Bad shell delegate state");
                    }
                    ShellDelegate delegate = (ShellDelegate) this.mAppOpsService.getAppOpsServiceDelegate();
                    if (delegate.getDelegateUid() != delegateUid) {
                        throw new SecurityException("Shell can delegate permissions only to one instrumentation at a time");
                    }
                }
                int instrCount = this.mActiveInstrumentation.size();
                for (int i = 0; i < instrCount; i++) {
                    ActiveInstrumentation instr = this.mActiveInstrumentation.get(i);
                    if (instr.mTargetInfo.uid == delegateUid) {
                        if (instr.mUiAutomationConnection == null) {
                            throw new SecurityException("Shell can delegate its permissions only to an instrumentation started from the shell");
                        } else {
                            ShellDelegate shellDelegate = new ShellDelegate(delegateUid, permissions);
                            this.mAppOpsService.setAppOpsServiceDelegate(shellDelegate);
                            String packageName = instr.mTargetInfo.packageName;
                            List<String> permissionNames = permissions != null ? Arrays.asList(permissions) : null;
                            getPermissionManagerInternal().startShellPermissionIdentityDelegation(delegateUid, packageName, permissionNames);
                            resetPriorityAfterProcLockedSection();
                            return;
                        }
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public void stopDelegateShellPermissionIdentity() {
        if (UserHandle.getCallingAppId() != 2000 && UserHandle.getCallingAppId() != 0) {
            throw new SecurityException("Only the shell can delegate its permissions");
        }
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                this.mAppOpsService.setAppOpsServiceDelegate(null);
                getPermissionManagerInternal().stopShellPermissionIdentityDelegation();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public List<String> getDelegatedShellPermissions() {
        List<String> delegatedShellPermissions;
        if (UserHandle.getCallingAppId() != 2000 && UserHandle.getCallingAppId() != 0) {
            throw new SecurityException("Only the shell can get delegated permissions");
        }
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                delegatedShellPermissions = getPermissionManagerInternal().getDelegatedShellPermissions();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return delegatedShellPermissions;
    }

    /* loaded from: classes.dex */
    private class ShellDelegate implements AppOpsManagerInternal.CheckOpsDelegate {
        private final String[] mPermissions;
        private final int mTargetUid;

        ShellDelegate(int targetUid, String[] permissions) {
            this.mTargetUid = targetUid;
            this.mPermissions = permissions;
        }

        int getDelegateUid() {
            return this.mTargetUid;
        }

        public int checkOperation(int code, int uid, String packageName, String attributionTag, boolean raw, QuintFunction<Integer, Integer, String, String, Boolean, Integer> superImpl) {
            if (uid == this.mTargetUid && isTargetOp(code)) {
                int shellUid = UserHandle.getUid(UserHandle.getUserId(uid), 2000);
                long identity = Binder.clearCallingIdentity();
                try {
                    return ((Integer) superImpl.apply(Integer.valueOf(code), Integer.valueOf(shellUid), "com.android.shell", (Object) null, Boolean.valueOf(raw))).intValue();
                } finally {
                    Binder.restoreCallingIdentity(identity);
                }
            }
            return ((Integer) superImpl.apply(Integer.valueOf(code), Integer.valueOf(uid), packageName, attributionTag, Boolean.valueOf(raw))).intValue();
        }

        public int checkAudioOperation(int code, int usage, int uid, String packageName, QuadFunction<Integer, Integer, Integer, String, Integer> superImpl) {
            if (uid == this.mTargetUid && isTargetOp(code)) {
                int shellUid = UserHandle.getUid(UserHandle.getUserId(uid), 2000);
                long identity = Binder.clearCallingIdentity();
                try {
                    return ((Integer) superImpl.apply(Integer.valueOf(code), Integer.valueOf(usage), Integer.valueOf(shellUid), "com.android.shell")).intValue();
                } finally {
                    Binder.restoreCallingIdentity(identity);
                }
            }
            return ((Integer) superImpl.apply(Integer.valueOf(code), Integer.valueOf(usage), Integer.valueOf(uid), packageName)).intValue();
        }

        public SyncNotedAppOp noteOperation(int code, int uid, String packageName, String featureId, boolean shouldCollectAsyncNotedOp, String message, boolean shouldCollectMessage, HeptFunction<Integer, Integer, String, String, Boolean, String, Boolean, SyncNotedAppOp> superImpl) {
            if (uid == this.mTargetUid && isTargetOp(code)) {
                int shellUid = UserHandle.getUid(UserHandle.getUserId(uid), 2000);
                long identity = Binder.clearCallingIdentity();
                try {
                    return (SyncNotedAppOp) superImpl.apply(Integer.valueOf(code), Integer.valueOf(shellUid), "com.android.shell", featureId, Boolean.valueOf(shouldCollectAsyncNotedOp), message, Boolean.valueOf(shouldCollectMessage));
                } finally {
                    Binder.restoreCallingIdentity(identity);
                }
            }
            return (SyncNotedAppOp) superImpl.apply(Integer.valueOf(code), Integer.valueOf(uid), packageName, featureId, Boolean.valueOf(shouldCollectAsyncNotedOp), message, Boolean.valueOf(shouldCollectMessage));
        }

        public SyncNotedAppOp noteProxyOperation(int code, AttributionSource attributionSource, boolean shouldCollectAsyncNotedOp, String message, boolean shouldCollectMessage, boolean skiProxyOperation, HexFunction<Integer, AttributionSource, Boolean, String, Boolean, Boolean, SyncNotedAppOp> superImpl) {
            if (attributionSource.getUid() == this.mTargetUid && isTargetOp(code)) {
                int shellUid = UserHandle.getUid(UserHandle.getUserId(attributionSource.getUid()), 2000);
                long identity = Binder.clearCallingIdentity();
                try {
                    return (SyncNotedAppOp) superImpl.apply(Integer.valueOf(code), new AttributionSource(shellUid, "com.android.shell", attributionSource.getAttributionTag(), attributionSource.getToken(), attributionSource.getNext()), Boolean.valueOf(shouldCollectAsyncNotedOp), message, Boolean.valueOf(shouldCollectMessage), Boolean.valueOf(skiProxyOperation));
                } finally {
                    Binder.restoreCallingIdentity(identity);
                }
            }
            return (SyncNotedAppOp) superImpl.apply(Integer.valueOf(code), attributionSource, Boolean.valueOf(shouldCollectAsyncNotedOp), message, Boolean.valueOf(shouldCollectMessage), Boolean.valueOf(skiProxyOperation));
        }

        public SyncNotedAppOp startOperation(IBinder token, int code, int uid, String packageName, String attributionTag, boolean startIfModeDefault, boolean shouldCollectAsyncNotedOp, String message, boolean shouldCollectMessage, int attributionFlags, int attributionChainId, UndecFunction<IBinder, Integer, Integer, String, String, Boolean, Boolean, String, Boolean, Integer, Integer, SyncNotedAppOp> superImpl) {
            if (uid == this.mTargetUid && isTargetOp(code)) {
                int shellUid = UserHandle.getUid(UserHandle.getUserId(uid), 2000);
                long identity = Binder.clearCallingIdentity();
                try {
                    return (SyncNotedAppOp) superImpl.apply(token, Integer.valueOf(code), Integer.valueOf(shellUid), "com.android.shell", attributionTag, Boolean.valueOf(startIfModeDefault), Boolean.valueOf(shouldCollectAsyncNotedOp), message, Boolean.valueOf(shouldCollectMessage), Integer.valueOf(attributionFlags), Integer.valueOf(attributionChainId));
                } finally {
                    Binder.restoreCallingIdentity(identity);
                }
            }
            return (SyncNotedAppOp) superImpl.apply(token, Integer.valueOf(code), Integer.valueOf(uid), packageName, attributionTag, Boolean.valueOf(startIfModeDefault), Boolean.valueOf(shouldCollectAsyncNotedOp), message, Boolean.valueOf(shouldCollectMessage), Integer.valueOf(attributionFlags), Integer.valueOf(attributionChainId));
        }

        public SyncNotedAppOp startProxyOperation(IBinder clientId, int code, AttributionSource attributionSource, boolean startIfModeDefault, boolean shouldCollectAsyncNotedOp, String message, boolean shouldCollectMessage, boolean skipProxyOperation, int proxyAttributionFlags, int proxiedAttributionFlags, int attributionChainId, UndecFunction<IBinder, Integer, AttributionSource, Boolean, Boolean, String, Boolean, Boolean, Integer, Integer, Integer, SyncNotedAppOp> superImpl) {
            if (attributionSource.getUid() == this.mTargetUid && isTargetOp(code)) {
                int shellUid = UserHandle.getUid(UserHandle.getUserId(attributionSource.getUid()), 2000);
                long identity = Binder.clearCallingIdentity();
                try {
                    return (SyncNotedAppOp) superImpl.apply(clientId, Integer.valueOf(code), new AttributionSource(shellUid, "com.android.shell", attributionSource.getAttributionTag(), attributionSource.getToken(), attributionSource.getNext()), Boolean.valueOf(startIfModeDefault), Boolean.valueOf(shouldCollectAsyncNotedOp), message, Boolean.valueOf(shouldCollectMessage), Boolean.valueOf(skipProxyOperation), Integer.valueOf(proxyAttributionFlags), Integer.valueOf(proxiedAttributionFlags), Integer.valueOf(attributionChainId));
                } finally {
                    Binder.restoreCallingIdentity(identity);
                }
            }
            return (SyncNotedAppOp) superImpl.apply(clientId, Integer.valueOf(code), attributionSource, Boolean.valueOf(startIfModeDefault), Boolean.valueOf(shouldCollectAsyncNotedOp), message, Boolean.valueOf(shouldCollectMessage), Boolean.valueOf(skipProxyOperation), Integer.valueOf(proxyAttributionFlags), Integer.valueOf(proxiedAttributionFlags), Integer.valueOf(attributionChainId));
        }

        public void finishProxyOperation(IBinder clientId, int code, AttributionSource attributionSource, boolean skipProxyOperation, QuadFunction<IBinder, Integer, AttributionSource, Boolean, Void> superImpl) {
            if (attributionSource.getUid() == this.mTargetUid && isTargetOp(code)) {
                int shellUid = UserHandle.getUid(UserHandle.getUserId(attributionSource.getUid()), 2000);
                long identity = Binder.clearCallingIdentity();
                try {
                    superImpl.apply(clientId, Integer.valueOf(code), new AttributionSource(shellUid, "com.android.shell", attributionSource.getAttributionTag(), attributionSource.getToken(), attributionSource.getNext()), Boolean.valueOf(skipProxyOperation));
                } finally {
                    Binder.restoreCallingIdentity(identity);
                }
            }
            superImpl.apply(clientId, Integer.valueOf(code), attributionSource, Boolean.valueOf(skipProxyOperation));
        }

        private boolean isTargetOp(int code) {
            String permission;
            if (this.mPermissions == null || (permission = AppOpsManager.opToPermission(code)) == null) {
                return true;
            }
            return isTargetPermission(permission);
        }

        private boolean isTargetPermission(String permission) {
            String[] strArr = this.mPermissions;
            return strArr == null || ArrayUtils.contains(strArr, permission);
        }
    }

    void maybeTriggerWatchdog() {
    }

    private boolean isOnFgOffloadQueue(int flags) {
        return (flags & 2048) != 0;
    }

    private boolean isOnBgOffloadQueue(int flags) {
        return this.mEnableOffloadQueue && (Integer.MIN_VALUE & flags) != 0;
    }

    /* JADX DEBUG: Another duplicated slice has different insns count: {[]}, finally: {[INVOKE] complete} */
    public ParcelFileDescriptor getLifeMonitor() {
        ParcelFileDescriptor dup;
        if (!isCallerShell()) {
            throw new SecurityException("Only shell can call it");
        }
        synchronized (this.mProcLock) {
            try {
                try {
                    boostPriorityForProcLockedSection();
                    if (this.mLifeMonitorFds == null) {
                        this.mLifeMonitorFds = ParcelFileDescriptor.createPipe();
                    }
                    dup = this.mLifeMonitorFds[0].dup();
                } catch (IOException e) {
                    Slog.w(TAG, "Unable to create pipe", e);
                    resetPriorityAfterProcLockedSection();
                    return null;
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return dup;
    }

    public void setActivityLocusContext(ComponentName activity, LocusId locusId, IBinder appToken) {
        int callingUid = Binder.getCallingUid();
        int userId = UserHandle.getCallingUserId();
        if (getPackageManagerInternal().getPackageUid(activity.getPackageName(), 0L, userId) != callingUid) {
            throw new SecurityException("Calling uid " + callingUid + " cannot set locusIdfor package " + activity.getPackageName());
        }
        this.mActivityTaskManager.setLocusId(locusId, appToken);
        if (this.mUsageStatsService != null) {
            this.mUsageStatsService.reportLocusUpdate(activity, userId, locusId, appToken);
        }
    }

    public boolean isAppFreezerSupported() {
        long token = Binder.clearCallingIdentity();
        try {
            CachedAppOptimizer cachedAppOptimizer = this.mOomAdjuster.mCachedAppOptimizer;
            return CachedAppOptimizer.isFreezerSupported();
        } finally {
            Binder.restoreCallingIdentity(token);
        }
    }

    public boolean isAppFreezerEnabled() {
        return this.mOomAdjuster.mCachedAppOptimizer.useFreezer();
    }

    public void resetAppErrors() {
        enforceCallingPermission("android.permission.RESET_APP_ERRORS", "resetAppErrors");
        this.mAppErrors.resetState();
    }

    public boolean enableAppFreezer(boolean enable) {
        int callerUid = Binder.getCallingUid();
        if (callerUid == 1000 || Build.IS_DEBUGGABLE) {
            return this.mOomAdjuster.mCachedAppOptimizer.enableFreezer(enable);
        }
        throw new SecurityException("Caller uid " + callerUid + " cannot set freezer state ");
    }

    public boolean enableFgsNotificationRateLimit(boolean enable) {
        boolean enableFgsNotificationRateLimitLocked;
        enforceCallingPermission("android.permission.WRITE_DEVICE_CONFIG", "enableFgsNotificationRateLimit");
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                enableFgsNotificationRateLimitLocked = this.mServices.enableFgsNotificationRateLimitLocked(enable);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return enableFgsNotificationRateLimitLocked;
    }

    public void holdLock(IBinder token, int durationMs) {
        getTestUtilityServiceLocked().verifyHoldLockToken(token);
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                SystemClock.sleep(durationMs);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public void reportNe(String path) {
        ITranActivityManagerService.Instance().init(this.mContext);
        ITranActivityManagerService.Instance().reportNe(path);
    }

    /* JADX INFO: Access modifiers changed from: private */
    public static void sendLowWarningBroadCast(int val) {
        boolean isShowWarning = tempShowLowWarning() || isBatteryLowTemp();
        if (!isShowWarning) {
            mIsResetShowWarning = true;
        }
        if (mWarnContext != null && isShowWarning && !isSkipCameraInternalPackage()) {
            Intent intent = new Intent("mediatek.intent.action.CAMERA_LOW_DIAG");
            intent.addFlags(16777216);
            intent.putExtra(DatabaseHelper.SoundModelContract.KEY_TYPE, val);
            intent.putExtra("tran_bat_temp", mIsResetShowWarning);
            mWarnContext.sendBroadcastAsUser(intent, UserHandle.ALL);
            mIsResetShowWarning = false;
        }
    }

    /* JADX DEBUG: Another duplicated slice has different insns count: {[IF]}, finally: {[IF, CONST, MOVE_EXCEPTION, INVOKE, MOVE_EXCEPTION, IF, CONST, MOVE_EXCEPTION, INVOKE, MOVE_EXCEPTION, IF, CONST, CONST, MOVE_EXCEPTION, INVOKE, MOVE_EXCEPTION, IF, MOVE_EXCEPTION, INVOKE, CONST, MOVE_EXCEPTION, INVOKE, MOVE_EXCEPTION, IF, MOVE_EXCEPTION] complete} */
    /* JADX DEBUG: Don't trust debug lines info. Repeating lines: [20076=4, 20077=4, 20079=4, 20083=4, 20084=4, 20086=4] */
    private static boolean tempShowLowWarning() {
        BufferedReader br = null;
        FileInputStream fis = null;
        try {
            try {
                try {
                    fis = new FileInputStream(TRAN_BAT_TEMP);
                    br = new BufferedReader(new InputStreamReader(fis));
                    String line = br.readLine();
                    Log.d(TAG, "tran_bat_temp-->" + line);
                    int result = 0;
                    if (line != null) {
                        try {
                            result = Integer.parseInt(line);
                        } catch (NumberFormatException e) {
                        }
                    }
                    boolean z = result != 0;
                    try {
                        fis.close();
                    } catch (IOException e2) {
                    }
                    try {
                        br.close();
                    } catch (IOException e3) {
                    }
                    return z;
                } catch (Throwable th) {
                    if (fis != null) {
                        try {
                            fis.close();
                        } catch (IOException e4) {
                        }
                    }
                    if (br != null) {
                        try {
                            br.close();
                        } catch (IOException e5) {
                        }
                    }
                    throw th;
                }
            } catch (IOException e6) {
                e6.printStackTrace();
                if (fis != null) {
                    try {
                        fis.close();
                    } catch (IOException e7) {
                    }
                }
                if (br != null) {
                    try {
                        br.close();
                    } catch (IOException e8) {
                    }
                }
                return false;
            }
        } catch (FileNotFoundException e9) {
            e9.printStackTrace();
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException e10) {
                }
            }
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e11) {
                }
            }
            return false;
        }
    }

    private static boolean isSkipCameraInternalPackage() {
        String[] strArr;
        for (String str : skipCameraInternalList) {
            if (str.equals(mWarnCameraProcessName)) {
                Log.v(TAG, "isSkipCameraInternalPackage");
                return true;
            }
        }
        return false;
    }

    private static boolean isBatteryLowTemp() {
        Intent batteryBroadcast = mWarnContext.registerReceiver(null, new IntentFilter("android.intent.action.BATTERY_CHANGED"));
        boolean isLowTemp = batteryBroadcast.getIntExtra("temperature", -1) <= 0;
        Slog.d(TAG, "isBatteryLowTemp=" + isLowTemp);
        return isLowTemp;
    }

    public float getLatestTotalCpuPercent() {
        float result;
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                result = 100.0f;
                AppProfiler appProfiler = this.mAppProfiler;
                if (appProfiler != null) {
                    result = appProfiler.getTotalCpuPercent();
                } else {
                    Slog.e(TAG, "AppProfiler is uninitialized!");
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return result;
    }

    public boolean isProcessInPreloadState(String processName) {
        if (processName != null) {
            synchronized (this) {
                try {
                    boostPriorityForLockedSection();
                    SparseArray<ProcessRecord> apps = (SparseArray) this.mProcessList.getProcessNamesLOSP().getMap().get(processName);
                    if (apps == null) {
                        resetPriorityAfterLockedSection();
                        return false;
                    }
                    int NA = apps.size();
                    if (0 < NA) {
                        ProcessRecord app = apps.valueAt(0);
                        boolean z = app.preloadState > 0;
                        resetPriorityAfterLockedSection();
                        return z;
                    }
                    resetPriorityAfterLockedSection();
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }
        return false;
    }

    public boolean isRequestChangeParams(String packages, String params) {
        return false;
    }

    public void setGiftEnable(boolean isGiftEnable) {
        ITranActivityManagerService.Instance().setGiftEnable(isGiftEnable);
    }

    public void setGiftConfig(String cloudGiftConfig) {
        ITranActivityManagerService.Instance().setGiftConfig(cloudGiftConfig);
    }

    /* JADX INFO: Access modifiers changed from: package-private */
    public static void traceBegin(long traceTag, String methodName, String subInfo) {
        if (Trace.isTagEnabled(traceTag)) {
            Trace.traceBegin(traceTag, methodName + subInfo);
        }
    }

    public void setAalMode(int mode) {
        this.mAmsExt.setAalMode(mode);
    }

    public void setAalEnabled(boolean enabled) {
        this.mAmsExt.setAalEnabled(enabled);
    }

    public void doOptimize(int reasonCode, List<String> protectList) {
        ProcessRecord r;
        String pkg;
        int uid;
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!TranAmHooker.checkApmPermissionLocked(r)) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                resetPriorityAfterLockedSection();
                if (r == null) {
                    pkg = "";
                    uid = Binder.getCallingUid();
                } else {
                    pkg = r.info.packageName;
                    uid = r.uid;
                }
                ITranActivityManagerService.Instance().sceneClean(reasonCode, uid, pkg, protectList);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public boolean setAutoStartEnable(String packageName, boolean enable) {
        ProcessRecord r;
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!TranAmHooker.checkApmPermissionLocked(r)) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                resetPriorityAfterLockedSection();
                ITranActivityManagerService.Instance().setAutoStartEnable(enable, packageName);
                return true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public boolean isAutoStartEnabled(String packageName) {
        ProcessRecord r;
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!TranAmHooker.checkApmPermissionLocked(r)) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                resetPriorityAfterLockedSection();
                return ITranActivityManagerService.Instance().inStartWhiteList(packageName);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public boolean updateAutoStartList(List<String> whiteList) {
        ProcessRecord r;
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!TranAmHooker.checkApmPermissionLocked(r)) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                resetPriorityAfterLockedSection();
                ITranActivityManagerService.Instance().setStartWhiteList(whiteList);
                return true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public List<String> getAutoStartList() {
        ProcessRecord r;
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!TranAmHooker.checkApmPermissionLocked(r)) {
                    List<String> emptyList = Collections.emptyList();
                    resetPriorityAfterLockedSection();
                    return emptyList;
                }
                resetPriorityAfterLockedSection();
                return ITranActivityManagerService.Instance().getStartWhiteList();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public List<String> resetAutoStartList() {
        ProcessRecord r;
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!TranAmHooker.checkApmPermissionLocked(r)) {
                    List<String> emptyList = Collections.emptyList();
                    resetPriorityAfterLockedSection();
                    return emptyList;
                }
                resetPriorityAfterLockedSection();
                return ITranActivityManagerService.Instance().resetUserStartConfig();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void doClean(int level, List<String> protectList) {
        ProcessRecord r;
        String pkg;
        int uid;
        switch (level) {
            case 0:
            case 1:
            case 2:
                Slog.w(TAG, "doClean invalid clean level " + level);
                return;
            case 3:
                synchronized (this.mPidsSelfLocked) {
                    r = this.mPidsSelfLocked.get(Binder.getCallingPid());
                }
                synchronized (this) {
                    try {
                        boostPriorityForLockedSection();
                        if (!TranAmHooker.checkApmPermissionLocked(r)) {
                            resetPriorityAfterLockedSection();
                            return;
                        }
                        resetPriorityAfterLockedSection();
                        if (r == null) {
                            pkg = "";
                            uid = Binder.getCallingUid();
                        } else {
                            pkg = r.info.packageName;
                            uid = r.uid;
                        }
                        ITranActivityManagerService.Instance().hookOnekeyClean(level, protectList, pkg, uid);
                        return;
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            default:
                Slog.e(TAG, "doClean error clean level " + level);
                return;
        }
    }

    public boolean setCleanProtect(String packageName, boolean protect) {
        ProcessRecord r;
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!TranAmHooker.checkApmPermissionLocked(r)) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                resetPriorityAfterLockedSection();
                Slog.d("Griffin/CleanWhiteList", "callerPkg: " + r.info.packageName + ", setCleanProtect pkg:" + packageName + ", protect = " + protect);
                ITranActivityManagerService.Instance().setCleanProtect(protect, packageName);
                return true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public void updateCleanProtectList(List<String> protectList) {
        ProcessRecord r;
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!TranAmHooker.checkApmPermissionLocked(r)) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                resetPriorityAfterLockedSection();
                if (protectList != null && protectList.size() > 0) {
                    Slog.d("Griffin/CleanWhiteList", "callerPkg: " + r.info.packageName + ", updateCleanProtectList protectList:" + Arrays.toString(protectList.toArray()));
                }
                ITranActivityManagerService.Instance().setCleanWhiteList(protectList);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public List<String> getCleanProtectList() {
        ProcessRecord r;
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!TranAmHooker.checkApmPermissionLocked(r)) {
                    List<String> emptyList = Collections.emptyList();
                    resetPriorityAfterLockedSection();
                    return emptyList;
                }
                resetPriorityAfterLockedSection();
                return ITranActivityManagerService.Instance().getCleanWhiteList();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public boolean isFeatureEnable(int featureCode) {
        return ITranActivityManagerService.Instance().isFeatureEnable(featureCode);
    }

    public boolean inFrzList(String key, String packageName) {
        return ITranActivityManagerService.Instance().inFrzList(key, packageName);
    }

    public boolean inSlmList(String key, String packageName) {
        return ITranActivityManagerService.Instance().inSlmList(key, packageName);
    }

    public boolean setBlockStartEnable(String packageName, boolean enable) {
        ProcessRecord r;
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!TranAmHooker.checkApmPermissionLocked(r)) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                resetPriorityAfterLockedSection();
                return ITranActivityManagerService.Instance().setBlockStartEnable(packageName, enable);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public boolean isBlockStartEnabled(String packageName) {
        ProcessRecord r;
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!TranAmHooker.checkApmPermissionLocked(r)) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                resetPriorityAfterLockedSection();
                return ITranActivityManagerService.Instance().isBlockStartEnabled(packageName);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public boolean updateBlockStartList(List<String> blockList) {
        ProcessRecord r;
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!TranAmHooker.checkApmPermissionLocked(r)) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                resetPriorityAfterLockedSection();
                return ITranActivityManagerService.Instance().setStartBlockList(blockList);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public List<String> getBlockStartList() {
        ProcessRecord r;
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!TranAmHooker.checkApmPermissionLocked(r)) {
                    List<String> emptyList = Collections.emptyList();
                    resetPriorityAfterLockedSection();
                    return emptyList;
                }
                resetPriorityAfterLockedSection();
                return ITranActivityManagerService.Instance().getStartBlockList();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public List<String> resetBlockStartList() {
        ProcessRecord r;
        synchronized (this.mPidsSelfLocked) {
            r = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                if (!TranAmHooker.checkApmPermissionLocked(r)) {
                    List<String> emptyList = Collections.emptyList();
                    resetPriorityAfterLockedSection();
                    return emptyList;
                }
                resetPriorityAfterLockedSection();
                return ITranActivityManagerService.Instance().resetBlockStartList();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public String getTpTurboConfigs() {
        return ITranActivityManagerService.Instance().getTpTurboConfigs();
    }

    public int getScaledTouchSlop() {
        return ITranActivityManagerService.Instance().getScaledTouchSlop();
    }

    public boolean isTpTurboApp() {
        return ITranActivityManagerService.Instance().isTpTurboApp();
    }

    public void startTNE(String tag, long type, int pid, String externinfo) {
        ITranActivityManagerService.Instance().startTNE(tag, type, pid, externinfo);
    }

    public int setMemFusionEnable(boolean enable) {
        return ITranActivityManagerService.Instance().setMemFusionEnable(this.mContext, enable);
    }

    public void switchMemFusion(boolean enable) {
        Slog.e("AMS ", "switchMemFusion enable:" + enable);
        ITranActivityManagerService.Instance().switchMemFusion(this.mContext, enable);
    }

    public void compactAppFullForced(String appName, int uid) {
        if (!ITranActivityManagerService.Instance().isMemFusionEnabled()) {
            return;
        }
        synchronized (this.mProcLock) {
            try {
                boostPriorityForProcLockedSection();
                ProcessRecord app = (ProcessRecord) this.mProcessList.getProcessNamesLOSP().get(appName, uid);
                if (app == null) {
                    Slog.d(TAG, "compactAppFullForced app " + appName + "(" + uid + ") not found");
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                this.mOomAdjuster.mCachedAppOptimizer.compactAppFullForced(app);
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public boolean isUxCompactionSupport() {
        return ITranActivityManagerService.Instance().isUxCompactionSupport(this.mContext);
    }

    public void switchUXCompaction(boolean enable) {
        ITranActivityManagerService.Instance().switchUXCompaction(this.mContext, enable);
    }

    public void changeCompactionMem(String meminfo) {
        ITranActivityManagerService.Instance().changeCompactionMem(this.mContext, meminfo);
    }

    public List<String> getSwapFileSizeList() {
        return ITranActivityManagerService.Instance().getSwapFileSizeList(this.mContext);
    }

    public int isMemoryEnoughToMF(String memFusionSize) {
        return ITranActivityManagerService.Instance().isMemoryEnoughToMF(this.mContext, memFusionSize);
    }

    public int getMemoryForMF(String memFusionSize) {
        return ITranActivityManagerService.Instance().getMemoryForMF(this.mContext, memFusionSize);
    }

    public boolean isMatchCurMemSelection() {
        return ITranActivityManagerService.Instance().isMatchCurMemSelection(this.mContext);
    }

    private boolean needKillBackgroundProcess(String packageName, int userId, int callingPId, long callingId) {
        if (!ITranGriffinFeature.Instance().isGriffinSupport()) {
            return false;
        }
        String callerPkg = getCallerPackageName(callingPId);
        boolean isSystemApp = isSystemApp(packageName, userId);
        boolean bNeed = ITranActivityManagerService.Instance().needkillBackgroundProcesses(packageName, userId, callingId, callerPkg, isSystemApp);
        return bNeed;
    }

    private String getCallerPackageName(int callingPId) {
        String callerPkg = "";
        synchronized (this.mPidsSelfLocked) {
            ProcessRecord proc = this.mPidsSelfLocked.get(callingPId);
            if (proc != null) {
                callerPkg = proc.info != null ? proc.info.packageName : "";
            }
        }
        return callerPkg;
    }

    public boolean isFocusedAppInFloatWindow() {
        boolean isInFloatWindow;
        ActivityTaskManagerService activityTaskManagerService;
        synchronized (this.mGlobalLock) {
            try {
                boostPriorityForProcLockedSection();
                isInFloatWindow = false;
                String pkgName = ITranInputMethodManagerService.Instance().getCurrentFocusedPkgName();
                if (pkgName != null && (activityTaskManagerService = this.mActivityTaskManager) != null) {
                    isInFloatWindow = activityTaskManagerService.activityInMultiWindow(pkgName);
                }
                Slog.i(TAG, "isFocusedAppInFloatWindow, pkg:" + pkgName + ", inFloatWindow:" + isInFloatWindow);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return isInFloatWindow;
    }

    public Bundle getMultiWindowParams(String pkgName) {
        ActivityTaskManagerService activityTaskManagerService;
        Bundle bundle = new Bundle();
        if (pkgName != null && (activityTaskManagerService = this.mActivityTaskManager) != null) {
            return activityTaskManagerService.getMultiWindowParams(pkgName);
        }
        return bundle;
    }

    public void updateWallpaperSchedGroup(boolean isAnimationRunning) {
        synchronized (this) {
            try {
                boostPriorityForLockedSection();
                this.mOomAdjuster.updateWallpaperSchedGroup(isAnimationRunning);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public boolean setETControl(String featureType, boolean status) {
        return ITranActivityManagerService.Instance().setETControl(featureType, status);
    }

    public boolean isETDisabledByPackageName(String featureType, String packageName) {
        return ITranActivityManagerService.Instance().isETDisabledByPackageName(featureType, packageName);
    }

    /* loaded from: classes.dex */
    public static class TranActivityManagerServiceProxy {
        private ActivityManagerService mAms;

        public TranActivityManagerServiceProxy(ActivityManagerService ams) {
            this.mAms = null;
            this.mAms = ams;
        }

        public void dumpApplicationMemoryUsage(FileDescriptor fd, PrintWriter pw, String prefix, String[] args, boolean brief, PrintWriter categoryPw, boolean asProto) {
            ActivityManagerService activityManagerService = this.mAms;
            if (activityManagerService != null) {
                activityManagerService.dumpApplicationMemoryUsage(fd, pw, prefix, args, brief, categoryPw, asProto);
            }
        }
    }
}
